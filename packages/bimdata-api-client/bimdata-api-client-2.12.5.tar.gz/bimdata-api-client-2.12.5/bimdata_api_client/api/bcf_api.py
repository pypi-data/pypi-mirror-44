# coding: utf-8

"""
    BIMData API

    BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@bimdata.io
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bimdata_api_client.api_client import ApiClient


class BcfApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_coloring(self, projects_pk, topics_pk, viewpoints_pk, coloring, **kwargs):  # noqa: E501
        """create_coloring  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_coloring(projects_pk, topics_pk, viewpoints_pk, coloring, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param Coloring coloring: (required)
        :return: Coloring
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_coloring_with_http_info(projects_pk, topics_pk, viewpoints_pk, coloring, **kwargs)  # noqa: E501
        else:
            (data) = self.create_coloring_with_http_info(projects_pk, topics_pk, viewpoints_pk, coloring, **kwargs)  # noqa: E501
            return data

    def create_coloring_with_http_info(self, projects_pk, topics_pk, viewpoints_pk, coloring, **kwargs):  # noqa: E501
        """create_coloring  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_coloring_with_http_info(projects_pk, topics_pk, viewpoints_pk, coloring, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param Coloring coloring: (required)
        :return: Coloring
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk', 'topics_pk', 'viewpoints_pk', 'coloring']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_coloring" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `create_coloring`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `create_coloring`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in local_var_params or
                local_var_params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `create_coloring`")  # noqa: E501
        # verify the required parameter 'coloring' is set
        if ('coloring' not in local_var_params or
                local_var_params['coloring'] is None):
            raise ValueError("Missing the required parameter `coloring` when calling `create_coloring`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in local_var_params:
            path_params['viewpoints_pk'] = local_var_params['viewpoints_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'coloring' in local_var_params:
            body_params = local_var_params['coloring']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Coloring',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_comment(self, projects_pk, topics_pk, comment, **kwargs):  # noqa: E501
        """create_comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_comment(projects_pk, topics_pk, comment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Comment comment: (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_comment_with_http_info(projects_pk, topics_pk, comment, **kwargs)  # noqa: E501
        else:
            (data) = self.create_comment_with_http_info(projects_pk, topics_pk, comment, **kwargs)  # noqa: E501
            return data

    def create_comment_with_http_info(self, projects_pk, topics_pk, comment, **kwargs):  # noqa: E501
        """create_comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_comment_with_http_info(projects_pk, topics_pk, comment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Comment comment: (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk', 'topics_pk', 'comment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_comment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `create_comment`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `create_comment`")  # noqa: E501
        # verify the required parameter 'comment' is set
        if ('comment' not in local_var_params or
                local_var_params['comment'] is None):
            raise ValueError("Missing the required parameter `comment` when calling `create_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'comment' in local_var_params:
            body_params = local_var_params['comment']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Comment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_full_topic(self, projects_pk, single_json_topic, **kwargs):  # noqa: E501
        """create_full_topic  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_full_topic(projects_pk, single_json_topic, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param SingleJsonTopic single_json_topic: (required)
        :return: SingleJsonTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_full_topic_with_http_info(projects_pk, single_json_topic, **kwargs)  # noqa: E501
        else:
            (data) = self.create_full_topic_with_http_info(projects_pk, single_json_topic, **kwargs)  # noqa: E501
            return data

    def create_full_topic_with_http_info(self, projects_pk, single_json_topic, **kwargs):  # noqa: E501
        """create_full_topic  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_full_topic_with_http_info(projects_pk, single_json_topic, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param SingleJsonTopic single_json_topic: (required)
        :return: SingleJsonTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk', 'single_json_topic']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_full_topic" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `create_full_topic`")  # noqa: E501
        # verify the required parameter 'single_json_topic' is set
        if ('single_json_topic' not in local_var_params or
                local_var_params['single_json_topic'] is None):
            raise ValueError("Missing the required parameter `single_json_topic` when calling `create_full_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'single_json_topic' in local_var_params:
            body_params = local_var_params['single_json_topic']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/full-topic', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleJsonTopic',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_selection(self, projects_pk, topics_pk, viewpoints_pk, component, **kwargs):  # noqa: E501
        """create_selection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_selection(projects_pk, topics_pk, viewpoints_pk, component, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param Component component: (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_selection_with_http_info(projects_pk, topics_pk, viewpoints_pk, component, **kwargs)  # noqa: E501
        else:
            (data) = self.create_selection_with_http_info(projects_pk, topics_pk, viewpoints_pk, component, **kwargs)  # noqa: E501
            return data

    def create_selection_with_http_info(self, projects_pk, topics_pk, viewpoints_pk, component, **kwargs):  # noqa: E501
        """create_selection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_selection_with_http_info(projects_pk, topics_pk, viewpoints_pk, component, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param Component component: (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk', 'topics_pk', 'viewpoints_pk', 'component']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_selection" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `create_selection`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `create_selection`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in local_var_params or
                local_var_params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `create_selection`")  # noqa: E501
        # verify the required parameter 'component' is set
        if ('component' not in local_var_params or
                local_var_params['component'] is None):
            raise ValueError("Missing the required parameter `component` when calling `create_selection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in local_var_params:
            path_params['viewpoints_pk'] = local_var_params['viewpoints_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'component' in local_var_params:
            body_params = local_var_params['component']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Component',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_topic(self, projects_pk, topic, **kwargs):  # noqa: E501
        """create_topic  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_topic(projects_pk, topic, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param Topic topic: (required)
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_topic_with_http_info(projects_pk, topic, **kwargs)  # noqa: E501
        else:
            (data) = self.create_topic_with_http_info(projects_pk, topic, **kwargs)  # noqa: E501
            return data

    def create_topic_with_http_info(self, projects_pk, topic, **kwargs):  # noqa: E501
        """create_topic  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_topic_with_http_info(projects_pk, topic, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param Topic topic: (required)
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk', 'topic']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_topic" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `create_topic`")  # noqa: E501
        # verify the required parameter 'topic' is set
        if ('topic' not in local_var_params or
                local_var_params['topic'] is None):
            raise ValueError("Missing the required parameter `topic` when calling `create_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'topic' in local_var_params:
            body_params = local_var_params['topic']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Topic',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_viewpoint(self, projects_pk, topics_pk, viewpoint, **kwargs):  # noqa: E501
        """create_viewpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_viewpoint(projects_pk, topics_pk, viewpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Viewpoint viewpoint: (required)
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_viewpoint_with_http_info(projects_pk, topics_pk, viewpoint, **kwargs)  # noqa: E501
        else:
            (data) = self.create_viewpoint_with_http_info(projects_pk, topics_pk, viewpoint, **kwargs)  # noqa: E501
            return data

    def create_viewpoint_with_http_info(self, projects_pk, topics_pk, viewpoint, **kwargs):  # noqa: E501
        """create_viewpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_viewpoint_with_http_info(projects_pk, topics_pk, viewpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Viewpoint viewpoint: (required)
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk', 'topics_pk', 'viewpoint']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_viewpoint" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `create_viewpoint`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `create_viewpoint`")  # noqa: E501
        # verify the required parameter 'viewpoint' is set
        if ('viewpoint' not in local_var_params or
                local_var_params['viewpoint'] is None):
            raise ValueError("Missing the required parameter `viewpoint` when calling `create_viewpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'viewpoint' in local_var_params:
            body_params = local_var_params['viewpoint']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Viewpoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_visibility(self, projects_pk, topics_pk, viewpoints_pk, visibility, **kwargs):  # noqa: E501
        """create_visibility  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_visibility(projects_pk, topics_pk, viewpoints_pk, visibility, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param Visibility visibility: (required)
        :return: Visibility
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_visibility_with_http_info(projects_pk, topics_pk, viewpoints_pk, visibility, **kwargs)  # noqa: E501
        else:
            (data) = self.create_visibility_with_http_info(projects_pk, topics_pk, viewpoints_pk, visibility, **kwargs)  # noqa: E501
            return data

    def create_visibility_with_http_info(self, projects_pk, topics_pk, viewpoints_pk, visibility, **kwargs):  # noqa: E501
        """create_visibility  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_visibility_with_http_info(projects_pk, topics_pk, viewpoints_pk, visibility, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param Visibility visibility: (required)
        :return: Visibility
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk', 'topics_pk', 'viewpoints_pk', 'visibility']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_visibility" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `create_visibility`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `create_visibility`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in local_var_params or
                local_var_params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `create_visibility`")  # noqa: E501
        # verify the required parameter 'visibility' is set
        if ('visibility' not in local_var_params or
                local_var_params['visibility'] is None):
            raise ValueError("Missing the required parameter `visibility` when calling `create_visibility`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in local_var_params:
            path_params['viewpoints_pk'] = local_var_params['viewpoints_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'visibility' in local_var_params:
            body_params = local_var_params['visibility']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Visibility',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_coloring(self, id, projects_pk, topics_pk, viewpoints_pk, **kwargs):  # noqa: E501
        """delete_coloring  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_coloring(id, projects_pk, topics_pk, viewpoints_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this coloring. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_coloring_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_coloring_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, **kwargs)  # noqa: E501
            return data

    def delete_coloring_with_http_info(self, id, projects_pk, topics_pk, viewpoints_pk, **kwargs):  # noqa: E501
        """delete_coloring  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_coloring_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this coloring. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'projects_pk', 'topics_pk', 'viewpoints_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_coloring" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_coloring`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `delete_coloring`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `delete_coloring`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in local_var_params or
                local_var_params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `delete_coloring`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in local_var_params:
            path_params['viewpoints_pk'] = local_var_params['viewpoints_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_comment(self, guid, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """delete_comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_comment(guid, projects_pk, topics_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this comment. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_comment_with_http_info(guid, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_comment_with_http_info(guid, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def delete_comment_with_http_info(self, guid, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """delete_comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_comment_with_http_info(guid, projects_pk, topics_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this comment. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_comment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in local_var_params or
                local_var_params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `delete_comment`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `delete_comment`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `delete_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_selection(self, id, projects_pk, topics_pk, viewpoints_pk, **kwargs):  # noqa: E501
        """delete_selection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_selection(id, projects_pk, topics_pk, viewpoints_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this component. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_selection_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_selection_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, **kwargs)  # noqa: E501
            return data

    def delete_selection_with_http_info(self, id, projects_pk, topics_pk, viewpoints_pk, **kwargs):  # noqa: E501
        """delete_selection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_selection_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this component. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'projects_pk', 'topics_pk', 'viewpoints_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_selection" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_selection`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `delete_selection`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `delete_selection`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in local_var_params or
                local_var_params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `delete_selection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in local_var_params:
            path_params['viewpoints_pk'] = local_var_params['viewpoints_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_topic(self, guid, projects_pk, **kwargs):  # noqa: E501
        """delete_topic  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_topic(guid, projects_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this topic. (required)
        :param str projects_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_topic_with_http_info(guid, projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_topic_with_http_info(guid, projects_pk, **kwargs)  # noqa: E501
            return data

    def delete_topic_with_http_info(self, guid, projects_pk, **kwargs):  # noqa: E501
        """delete_topic  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_topic_with_http_info(guid, projects_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this topic. (required)
        :param str projects_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_topic" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in local_var_params or
                local_var_params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `delete_topic`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `delete_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_viewpoint(self, guid, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """delete_viewpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_viewpoint(guid, projects_pk, topics_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this viewpoint. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_viewpoint_with_http_info(guid, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_viewpoint_with_http_info(guid, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def delete_viewpoint_with_http_info(self, guid, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """delete_viewpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_viewpoint_with_http_info(guid, projects_pk, topics_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this viewpoint. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_viewpoint" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in local_var_params or
                local_var_params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `delete_viewpoint`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `delete_viewpoint`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `delete_viewpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_visibility(self, id, projects_pk, topics_pk, viewpoints_pk, **kwargs):  # noqa: E501
        """delete_visibility  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_visibility(id, projects_pk, topics_pk, viewpoints_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this visibility. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_visibility_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_visibility_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, **kwargs)  # noqa: E501
            return data

    def delete_visibility_with_http_info(self, id, projects_pk, topics_pk, viewpoints_pk, **kwargs):  # noqa: E501
        """delete_visibility  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_visibility_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this visibility. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'projects_pk', 'topics_pk', 'viewpoints_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_visibility" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_visibility`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `delete_visibility`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `delete_visibility`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in local_var_params or
                local_var_params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `delete_visibility`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in local_var_params:
            path_params['viewpoints_pk'] = local_var_params['viewpoints_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_bcf_export(self, id, **kwargs):  # noqa: E501
        """download_bcf_export  # noqa: E501

                 export project's topics in bcf-xml format           # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_bcf_export(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param str topics: topic guids to export, comma separated. Default = all
        :param str format: topic format to export, comma separated. Default = all
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_bcf_export_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.download_bcf_export_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def download_bcf_export_with_http_info(self, id, **kwargs):  # noqa: E501
        """download_bcf_export  # noqa: E501

                 export project's topics in bcf-xml format           # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_bcf_export_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param str topics: topic guids to export, comma separated. Default = all
        :param str format: topic format to export, comma separated. Default = all
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'topics', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_bcf_export" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `download_bcf_export`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'topics' in local_var_params:
            query_params.append(('topics', local_var_params['topics']))  # noqa: E501
        if 'format' in local_var_params:
            query_params.append(('format', local_var_params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{id}/export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_bcf_project(self, id, bcf_project, **kwargs):  # noqa: E501
        """full_update_bcf_project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_bcf_project(id, bcf_project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param BcfProject bcf_project: (required)
        :return: BcfProject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.full_update_bcf_project_with_http_info(id, bcf_project, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_bcf_project_with_http_info(id, bcf_project, **kwargs)  # noqa: E501
            return data

    def full_update_bcf_project_with_http_info(self, id, bcf_project, **kwargs):  # noqa: E501
        """full_update_bcf_project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_bcf_project_with_http_info(id, bcf_project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param BcfProject bcf_project: (required)
        :return: BcfProject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'bcf_project']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_bcf_project" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_bcf_project`")  # noqa: E501
        # verify the required parameter 'bcf_project' is set
        if ('bcf_project' not in local_var_params or
                local_var_params['bcf_project'] is None):
            raise ValueError("Missing the required parameter `bcf_project` when calling `full_update_bcf_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bcf_project' in local_var_params:
            body_params = local_var_params['bcf_project']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcfProject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_coloring(self, id, projects_pk, topics_pk, viewpoints_pk, coloring, **kwargs):  # noqa: E501
        """full_update_coloring  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_coloring(id, projects_pk, topics_pk, viewpoints_pk, coloring, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this coloring. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param Coloring coloring: (required)
        :return: Coloring
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.full_update_coloring_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, coloring, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_coloring_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, coloring, **kwargs)  # noqa: E501
            return data

    def full_update_coloring_with_http_info(self, id, projects_pk, topics_pk, viewpoints_pk, coloring, **kwargs):  # noqa: E501
        """full_update_coloring  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_coloring_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, coloring, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this coloring. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param Coloring coloring: (required)
        :return: Coloring
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'projects_pk', 'topics_pk', 'viewpoints_pk', 'coloring']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_coloring" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_coloring`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `full_update_coloring`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `full_update_coloring`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in local_var_params or
                local_var_params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `full_update_coloring`")  # noqa: E501
        # verify the required parameter 'coloring' is set
        if ('coloring' not in local_var_params or
                local_var_params['coloring'] is None):
            raise ValueError("Missing the required parameter `coloring` when calling `full_update_coloring`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in local_var_params:
            path_params['viewpoints_pk'] = local_var_params['viewpoints_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'coloring' in local_var_params:
            body_params = local_var_params['coloring']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Coloring',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_comment(self, guid, projects_pk, topics_pk, comment, **kwargs):  # noqa: E501
        """full_update_comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_comment(guid, projects_pk, topics_pk, comment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this comment. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Comment comment: (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.full_update_comment_with_http_info(guid, projects_pk, topics_pk, comment, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_comment_with_http_info(guid, projects_pk, topics_pk, comment, **kwargs)  # noqa: E501
            return data

    def full_update_comment_with_http_info(self, guid, projects_pk, topics_pk, comment, **kwargs):  # noqa: E501
        """full_update_comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_comment_with_http_info(guid, projects_pk, topics_pk, comment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this comment. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Comment comment: (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'topics_pk', 'comment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_comment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in local_var_params or
                local_var_params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `full_update_comment`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `full_update_comment`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `full_update_comment`")  # noqa: E501
        # verify the required parameter 'comment' is set
        if ('comment' not in local_var_params or
                local_var_params['comment'] is None):
            raise ValueError("Missing the required parameter `comment` when calling `full_update_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'comment' in local_var_params:
            body_params = local_var_params['comment']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Comment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_full_topic(self, guid, projects_pk, single_json_topic, **kwargs):  # noqa: E501
        """full_update_full_topic  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_full_topic(guid, projects_pk, single_json_topic, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this topic. (required)
        :param str projects_pk: (required)
        :param SingleJsonTopic single_json_topic: (required)
        :return: SingleJsonTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.full_update_full_topic_with_http_info(guid, projects_pk, single_json_topic, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_full_topic_with_http_info(guid, projects_pk, single_json_topic, **kwargs)  # noqa: E501
            return data

    def full_update_full_topic_with_http_info(self, guid, projects_pk, single_json_topic, **kwargs):  # noqa: E501
        """full_update_full_topic  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_full_topic_with_http_info(guid, projects_pk, single_json_topic, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this topic. (required)
        :param str projects_pk: (required)
        :param SingleJsonTopic single_json_topic: (required)
        :return: SingleJsonTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'single_json_topic']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_full_topic" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in local_var_params or
                local_var_params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `full_update_full_topic`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `full_update_full_topic`")  # noqa: E501
        # verify the required parameter 'single_json_topic' is set
        if ('single_json_topic' not in local_var_params or
                local_var_params['single_json_topic'] is None):
            raise ValueError("Missing the required parameter `single_json_topic` when calling `full_update_full_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'single_json_topic' in local_var_params:
            body_params = local_var_params['single_json_topic']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/full-topic/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleJsonTopic',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_selection(self, id, projects_pk, topics_pk, viewpoints_pk, component, **kwargs):  # noqa: E501
        """full_update_selection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_selection(id, projects_pk, topics_pk, viewpoints_pk, component, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this component. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param Component component: (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.full_update_selection_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, component, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_selection_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, component, **kwargs)  # noqa: E501
            return data

    def full_update_selection_with_http_info(self, id, projects_pk, topics_pk, viewpoints_pk, component, **kwargs):  # noqa: E501
        """full_update_selection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_selection_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, component, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this component. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param Component component: (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'projects_pk', 'topics_pk', 'viewpoints_pk', 'component']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_selection" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_selection`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `full_update_selection`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `full_update_selection`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in local_var_params or
                local_var_params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `full_update_selection`")  # noqa: E501
        # verify the required parameter 'component' is set
        if ('component' not in local_var_params or
                local_var_params['component'] is None):
            raise ValueError("Missing the required parameter `component` when calling `full_update_selection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in local_var_params:
            path_params['viewpoints_pk'] = local_var_params['viewpoints_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'component' in local_var_params:
            body_params = local_var_params['component']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Component',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_topic(self, guid, projects_pk, topic, **kwargs):  # noqa: E501
        """full_update_topic  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_topic(guid, projects_pk, topic, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this topic. (required)
        :param str projects_pk: (required)
        :param Topic topic: (required)
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.full_update_topic_with_http_info(guid, projects_pk, topic, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_topic_with_http_info(guid, projects_pk, topic, **kwargs)  # noqa: E501
            return data

    def full_update_topic_with_http_info(self, guid, projects_pk, topic, **kwargs):  # noqa: E501
        """full_update_topic  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_topic_with_http_info(guid, projects_pk, topic, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this topic. (required)
        :param str projects_pk: (required)
        :param Topic topic: (required)
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'topic']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_topic" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in local_var_params or
                local_var_params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `full_update_topic`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `full_update_topic`")  # noqa: E501
        # verify the required parameter 'topic' is set
        if ('topic' not in local_var_params or
                local_var_params['topic'] is None):
            raise ValueError("Missing the required parameter `topic` when calling `full_update_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'topic' in local_var_params:
            body_params = local_var_params['topic']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Topic',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_viewpoint(self, guid, projects_pk, topics_pk, viewpoint, **kwargs):  # noqa: E501
        """full_update_viewpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_viewpoint(guid, projects_pk, topics_pk, viewpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this viewpoint. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Viewpoint viewpoint: (required)
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.full_update_viewpoint_with_http_info(guid, projects_pk, topics_pk, viewpoint, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_viewpoint_with_http_info(guid, projects_pk, topics_pk, viewpoint, **kwargs)  # noqa: E501
            return data

    def full_update_viewpoint_with_http_info(self, guid, projects_pk, topics_pk, viewpoint, **kwargs):  # noqa: E501
        """full_update_viewpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_viewpoint_with_http_info(guid, projects_pk, topics_pk, viewpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this viewpoint. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Viewpoint viewpoint: (required)
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'topics_pk', 'viewpoint']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_viewpoint" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in local_var_params or
                local_var_params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `full_update_viewpoint`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `full_update_viewpoint`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `full_update_viewpoint`")  # noqa: E501
        # verify the required parameter 'viewpoint' is set
        if ('viewpoint' not in local_var_params or
                local_var_params['viewpoint'] is None):
            raise ValueError("Missing the required parameter `viewpoint` when calling `full_update_viewpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'viewpoint' in local_var_params:
            body_params = local_var_params['viewpoint']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Viewpoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_visibility(self, id, projects_pk, topics_pk, viewpoints_pk, visibility, **kwargs):  # noqa: E501
        """full_update_visibility  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_visibility(id, projects_pk, topics_pk, viewpoints_pk, visibility, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this visibility. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param Visibility visibility: (required)
        :return: Visibility
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.full_update_visibility_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, visibility, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_visibility_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, visibility, **kwargs)  # noqa: E501
            return data

    def full_update_visibility_with_http_info(self, id, projects_pk, topics_pk, viewpoints_pk, visibility, **kwargs):  # noqa: E501
        """full_update_visibility  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_visibility_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, visibility, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this visibility. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param Visibility visibility: (required)
        :return: Visibility
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'projects_pk', 'topics_pk', 'viewpoints_pk', 'visibility']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_visibility" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_visibility`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `full_update_visibility`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `full_update_visibility`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in local_var_params or
                local_var_params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `full_update_visibility`")  # noqa: E501
        # verify the required parameter 'visibility' is set
        if ('visibility' not in local_var_params or
                local_var_params['visibility'] is None):
            raise ValueError("Missing the required parameter `visibility` when calling `full_update_visibility`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in local_var_params:
            path_params['viewpoints_pk'] = local_var_params['viewpoints_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'visibility' in local_var_params:
            body_params = local_var_params['visibility']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Visibility',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bcf_project(self, id, **kwargs):  # noqa: E501
        """get_bcf_project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bcf_project(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :return: BcfProject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_bcf_project_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bcf_project_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_bcf_project_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_bcf_project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bcf_project_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :return: BcfProject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bcf_project" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_bcf_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcfProject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bcf_projects(self, **kwargs):  # noqa: E501
        """get_bcf_projects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bcf_projects(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[BcfProject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_bcf_projects_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_bcf_projects_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_bcf_projects_with_http_info(self, **kwargs):  # noqa: E501
        """get_bcf_projects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bcf_projects_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[BcfProject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bcf_projects" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BcfProject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_coloring(self, id, projects_pk, topics_pk, viewpoints_pk, **kwargs):  # noqa: E501
        """get_coloring  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_coloring(id, projects_pk, topics_pk, viewpoints_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this coloring. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :return: Coloring
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_coloring_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_coloring_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, **kwargs)  # noqa: E501
            return data

    def get_coloring_with_http_info(self, id, projects_pk, topics_pk, viewpoints_pk, **kwargs):  # noqa: E501
        """get_coloring  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_coloring_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this coloring. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :return: Coloring
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'projects_pk', 'topics_pk', 'viewpoints_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_coloring" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_coloring`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_coloring`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_coloring`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in local_var_params or
                local_var_params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `get_coloring`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in local_var_params:
            path_params['viewpoints_pk'] = local_var_params['viewpoints_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Coloring',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_colorings(self, projects_pk, topics_pk, viewpoints_pk, **kwargs):  # noqa: E501
        """get_colorings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_colorings(projects_pk, topics_pk, viewpoints_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :return: list[Coloring]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_colorings_with_http_info(projects_pk, topics_pk, viewpoints_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_colorings_with_http_info(projects_pk, topics_pk, viewpoints_pk, **kwargs)  # noqa: E501
            return data

    def get_colorings_with_http_info(self, projects_pk, topics_pk, viewpoints_pk, **kwargs):  # noqa: E501
        """get_colorings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_colorings_with_http_info(projects_pk, topics_pk, viewpoints_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :return: list[Coloring]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk', 'topics_pk', 'viewpoints_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_colorings" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_colorings`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_colorings`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in local_var_params or
                local_var_params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `get_colorings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in local_var_params:
            path_params['viewpoints_pk'] = local_var_params['viewpoints_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Coloring]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_comment(self, guid, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_comment(guid, projects_pk, topics_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this comment. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_comment_with_http_info(guid, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_comment_with_http_info(guid, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_comment_with_http_info(self, guid, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_comment_with_http_info(guid, projects_pk, topics_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this comment. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_comment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in local_var_params or
                local_var_params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `get_comment`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_comment`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Comment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_comments(self, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_comments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_comments(projects_pk, topics_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[Comment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_comments_with_http_info(projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_comments_with_http_info(projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_comments_with_http_info(self, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_comments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_comments_with_http_info(projects_pk, topics_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[Comment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_comments" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_comments`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_comments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Comment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_extensions(self, projects_pk, **kwargs):  # noqa: E501
        """get_extensions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_extensions(projects_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :return: Extensions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_extensions_with_http_info(projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_extensions_with_http_info(projects_pk, **kwargs)  # noqa: E501
            return data

    def get_extensions_with_http_info(self, projects_pk, **kwargs):  # noqa: E501
        """get_extensions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_extensions_with_http_info(projects_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :return: Extensions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_extensions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_extensions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/extensions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Extensions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_full_topic(self, guid, projects_pk, **kwargs):  # noqa: E501
        """get_full_topic  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_full_topic(guid, projects_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this topic. (required)
        :param str projects_pk: (required)
        :return: SingleJsonTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_full_topic_with_http_info(guid, projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_full_topic_with_http_info(guid, projects_pk, **kwargs)  # noqa: E501
            return data

    def get_full_topic_with_http_info(self, guid, projects_pk, **kwargs):  # noqa: E501
        """get_full_topic  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_full_topic_with_http_info(guid, projects_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this topic. (required)
        :param str projects_pk: (required)
        :return: SingleJsonTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_full_topic" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in local_var_params or
                local_var_params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `get_full_topic`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_full_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/full-topic/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleJsonTopic',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_full_topics(self, projects_pk, **kwargs):  # noqa: E501
        """get_full_topics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_full_topics(projects_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str ifcs: Filter the returned list by ifcs
        :param str format: Filter the returned list by format
        :return: list[SingleJsonTopic]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_full_topics_with_http_info(projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_full_topics_with_http_info(projects_pk, **kwargs)  # noqa: E501
            return data

    def get_full_topics_with_http_info(self, projects_pk, **kwargs):  # noqa: E501
        """get_full_topics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_full_topics_with_http_info(projects_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str ifcs: Filter the returned list by ifcs
        :param str format: Filter the returned list by format
        :return: list[SingleJsonTopic]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk', 'ifcs', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_full_topics" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_full_topics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501

        query_params = []
        if 'ifcs' in local_var_params:
            query_params.append(('ifcs', local_var_params['ifcs']))  # noqa: E501
        if 'format' in local_var_params:
            query_params.append(('format', local_var_params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/full-topic', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SingleJsonTopic]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_selection(self, id, projects_pk, topics_pk, viewpoints_pk, **kwargs):  # noqa: E501
        """get_selection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_selection(id, projects_pk, topics_pk, viewpoints_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this component. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_selection_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_selection_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, **kwargs)  # noqa: E501
            return data

    def get_selection_with_http_info(self, id, projects_pk, topics_pk, viewpoints_pk, **kwargs):  # noqa: E501
        """get_selection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_selection_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this component. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'projects_pk', 'topics_pk', 'viewpoints_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_selection" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_selection`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_selection`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_selection`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in local_var_params or
                local_var_params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `get_selection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in local_var_params:
            path_params['viewpoints_pk'] = local_var_params['viewpoints_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Component',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_selections(self, projects_pk, topics_pk, viewpoints_pk, **kwargs):  # noqa: E501
        """get_selections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_selections(projects_pk, topics_pk, viewpoints_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_selections_with_http_info(projects_pk, topics_pk, viewpoints_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_selections_with_http_info(projects_pk, topics_pk, viewpoints_pk, **kwargs)  # noqa: E501
            return data

    def get_selections_with_http_info(self, projects_pk, topics_pk, viewpoints_pk, **kwargs):  # noqa: E501
        """get_selections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_selections_with_http_info(projects_pk, topics_pk, viewpoints_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk', 'topics_pk', 'viewpoints_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_selections" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_selections`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_selections`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in local_var_params or
                local_var_params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `get_selections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in local_var_params:
            path_params['viewpoints_pk'] = local_var_params['viewpoints_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Component]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_snapshot(self, projects_pk, topics_pk, viewpoints_pk, **kwargs):  # noqa: E501
        """get_snapshot  # noqa: E501

        Retrieve the viewpoint' snapshot  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_snapshot(projects_pk, topics_pk, viewpoints_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_snapshot_with_http_info(projects_pk, topics_pk, viewpoints_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_snapshot_with_http_info(projects_pk, topics_pk, viewpoints_pk, **kwargs)  # noqa: E501
            return data

    def get_snapshot_with_http_info(self, projects_pk, topics_pk, viewpoints_pk, **kwargs):  # noqa: E501
        """get_snapshot  # noqa: E501

        Retrieve the viewpoint' snapshot  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_snapshot_with_http_info(projects_pk, topics_pk, viewpoints_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk', 'topics_pk', 'viewpoints_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_snapshot" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_snapshot`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_snapshot`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in local_var_params or
                local_var_params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `get_snapshot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in local_var_params:
            path_params['viewpoints_pk'] = local_var_params['viewpoints_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/snapshot', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_topic(self, guid, projects_pk, **kwargs):  # noqa: E501
        """get_topic  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_topic(guid, projects_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this topic. (required)
        :param str projects_pk: (required)
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_topic_with_http_info(guid, projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_topic_with_http_info(guid, projects_pk, **kwargs)  # noqa: E501
            return data

    def get_topic_with_http_info(self, guid, projects_pk, **kwargs):  # noqa: E501
        """get_topic  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_topic_with_http_info(guid, projects_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this topic. (required)
        :param str projects_pk: (required)
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_topic" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in local_var_params or
                local_var_params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `get_topic`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Topic',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_topic_viewpoints(self, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_topic_viewpoints  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_topic_viewpoints(projects_pk, topics_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[Viewpoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_topic_viewpoints_with_http_info(projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_topic_viewpoints_with_http_info(projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_topic_viewpoints_with_http_info(self, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_topic_viewpoints  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_topic_viewpoints_with_http_info(projects_pk, topics_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[Viewpoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_topic_viewpoints" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_topic_viewpoints`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_topic_viewpoints`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/topic-viewpoints', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Viewpoint]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_topics(self, projects_pk, **kwargs):  # noqa: E501
        """get_topics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_topics(projects_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str ifcs: Filter the returned list by ifcs
        :param str format: Filter the returned list by format
        :return: list[Topic]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_topics_with_http_info(projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_topics_with_http_info(projects_pk, **kwargs)  # noqa: E501
            return data

    def get_topics_with_http_info(self, projects_pk, **kwargs):  # noqa: E501
        """get_topics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_topics_with_http_info(projects_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str ifcs: Filter the returned list by ifcs
        :param str format: Filter the returned list by format
        :return: list[Topic]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk', 'ifcs', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_topics" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_topics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501

        query_params = []
        if 'ifcs' in local_var_params:
            query_params.append(('ifcs', local_var_params['ifcs']))  # noqa: E501
        if 'format' in local_var_params:
            query_params.append(('format', local_var_params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Topic]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user(self, **kwargs):  # noqa: E501
        """get_user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SelfBcfUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_user_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_user_with_http_info(self, **kwargs):  # noqa: E501
        """get_user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SelfBcfUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/current-user', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SelfBcfUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_viewpoint(self, guid, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_viewpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_viewpoint(guid, projects_pk, topics_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this viewpoint. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_viewpoint_with_http_info(guid, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_viewpoint_with_http_info(guid, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_viewpoint_with_http_info(self, guid, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_viewpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_viewpoint_with_http_info(guid, projects_pk, topics_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this viewpoint. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_viewpoint" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in local_var_params or
                local_var_params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `get_viewpoint`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_viewpoint`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_viewpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Viewpoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_viewpoints(self, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_viewpoints  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_viewpoints(projects_pk, topics_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[Viewpoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_viewpoints_with_http_info(projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_viewpoints_with_http_info(projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_viewpoints_with_http_info(self, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_viewpoints  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_viewpoints_with_http_info(projects_pk, topics_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[Viewpoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_viewpoints" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_viewpoints`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_viewpoints`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Viewpoint]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_visibilities(self, projects_pk, topics_pk, viewpoints_pk, **kwargs):  # noqa: E501
        """get_visibilities  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_visibilities(projects_pk, topics_pk, viewpoints_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :return: list[Visibility]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_visibilities_with_http_info(projects_pk, topics_pk, viewpoints_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_visibilities_with_http_info(projects_pk, topics_pk, viewpoints_pk, **kwargs)  # noqa: E501
            return data

    def get_visibilities_with_http_info(self, projects_pk, topics_pk, viewpoints_pk, **kwargs):  # noqa: E501
        """get_visibilities  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_visibilities_with_http_info(projects_pk, topics_pk, viewpoints_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :return: list[Visibility]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk', 'topics_pk', 'viewpoints_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_visibilities" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_visibilities`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_visibilities`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in local_var_params or
                local_var_params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `get_visibilities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in local_var_params:
            path_params['viewpoints_pk'] = local_var_params['viewpoints_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Visibility]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_visibility(self, id, projects_pk, topics_pk, viewpoints_pk, **kwargs):  # noqa: E501
        """get_visibility  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_visibility(id, projects_pk, topics_pk, viewpoints_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this visibility. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :return: Visibility
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_visibility_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_visibility_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, **kwargs)  # noqa: E501
            return data

    def get_visibility_with_http_info(self, id, projects_pk, topics_pk, viewpoints_pk, **kwargs):  # noqa: E501
        """get_visibility  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_visibility_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this visibility. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :return: Visibility
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'projects_pk', 'topics_pk', 'viewpoints_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_visibility" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_visibility`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_visibility`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_visibility`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in local_var_params or
                local_var_params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `get_visibility`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in local_var_params:
            path_params['viewpoints_pk'] = local_var_params['viewpoints_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Visibility',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_bcf_project(self, id, bcf_project, **kwargs):  # noqa: E501
        """update_bcf_project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_bcf_project(id, bcf_project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param BcfProject bcf_project: (required)
        :return: BcfProject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_bcf_project_with_http_info(id, bcf_project, **kwargs)  # noqa: E501
        else:
            (data) = self.update_bcf_project_with_http_info(id, bcf_project, **kwargs)  # noqa: E501
            return data

    def update_bcf_project_with_http_info(self, id, bcf_project, **kwargs):  # noqa: E501
        """update_bcf_project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_bcf_project_with_http_info(id, bcf_project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param BcfProject bcf_project: (required)
        :return: BcfProject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'bcf_project']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_bcf_project" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_bcf_project`")  # noqa: E501
        # verify the required parameter 'bcf_project' is set
        if ('bcf_project' not in local_var_params or
                local_var_params['bcf_project'] is None):
            raise ValueError("Missing the required parameter `bcf_project` when calling `update_bcf_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bcf_project' in local_var_params:
            body_params = local_var_params['bcf_project']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcfProject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_coloring(self, id, projects_pk, topics_pk, viewpoints_pk, coloring, **kwargs):  # noqa: E501
        """update_coloring  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_coloring(id, projects_pk, topics_pk, viewpoints_pk, coloring, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this coloring. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param Coloring coloring: (required)
        :return: Coloring
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_coloring_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, coloring, **kwargs)  # noqa: E501
        else:
            (data) = self.update_coloring_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, coloring, **kwargs)  # noqa: E501
            return data

    def update_coloring_with_http_info(self, id, projects_pk, topics_pk, viewpoints_pk, coloring, **kwargs):  # noqa: E501
        """update_coloring  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_coloring_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, coloring, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this coloring. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param Coloring coloring: (required)
        :return: Coloring
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'projects_pk', 'topics_pk', 'viewpoints_pk', 'coloring']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_coloring" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_coloring`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `update_coloring`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `update_coloring`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in local_var_params or
                local_var_params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `update_coloring`")  # noqa: E501
        # verify the required parameter 'coloring' is set
        if ('coloring' not in local_var_params or
                local_var_params['coloring'] is None):
            raise ValueError("Missing the required parameter `coloring` when calling `update_coloring`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in local_var_params:
            path_params['viewpoints_pk'] = local_var_params['viewpoints_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'coloring' in local_var_params:
            body_params = local_var_params['coloring']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Coloring',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_comment(self, guid, projects_pk, topics_pk, comment, **kwargs):  # noqa: E501
        """update_comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_comment(guid, projects_pk, topics_pk, comment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this comment. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Comment comment: (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_comment_with_http_info(guid, projects_pk, topics_pk, comment, **kwargs)  # noqa: E501
        else:
            (data) = self.update_comment_with_http_info(guid, projects_pk, topics_pk, comment, **kwargs)  # noqa: E501
            return data

    def update_comment_with_http_info(self, guid, projects_pk, topics_pk, comment, **kwargs):  # noqa: E501
        """update_comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_comment_with_http_info(guid, projects_pk, topics_pk, comment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this comment. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Comment comment: (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'topics_pk', 'comment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_comment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in local_var_params or
                local_var_params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `update_comment`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `update_comment`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `update_comment`")  # noqa: E501
        # verify the required parameter 'comment' is set
        if ('comment' not in local_var_params or
                local_var_params['comment'] is None):
            raise ValueError("Missing the required parameter `comment` when calling `update_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'comment' in local_var_params:
            body_params = local_var_params['comment']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{guid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Comment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_extensions(self, projects_pk, extensions, **kwargs):  # noqa: E501
        """update_extensions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_extensions(projects_pk, extensions, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param Extensions extensions: (required)
        :return: Extensions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_extensions_with_http_info(projects_pk, extensions, **kwargs)  # noqa: E501
        else:
            (data) = self.update_extensions_with_http_info(projects_pk, extensions, **kwargs)  # noqa: E501
            return data

    def update_extensions_with_http_info(self, projects_pk, extensions, **kwargs):  # noqa: E501
        """update_extensions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_extensions_with_http_info(projects_pk, extensions, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str projects_pk: (required)
        :param Extensions extensions: (required)
        :return: Extensions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk', 'extensions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_extensions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `update_extensions`")  # noqa: E501
        # verify the required parameter 'extensions' is set
        if ('extensions' not in local_var_params or
                local_var_params['extensions'] is None):
            raise ValueError("Missing the required parameter `extensions` when calling `update_extensions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'extensions' in local_var_params:
            body_params = local_var_params['extensions']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/extensions', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Extensions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_full_topic(self, guid, projects_pk, single_json_topic, **kwargs):  # noqa: E501
        """update_full_topic  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_full_topic(guid, projects_pk, single_json_topic, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this topic. (required)
        :param str projects_pk: (required)
        :param SingleJsonTopic single_json_topic: (required)
        :return: SingleJsonTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_full_topic_with_http_info(guid, projects_pk, single_json_topic, **kwargs)  # noqa: E501
        else:
            (data) = self.update_full_topic_with_http_info(guid, projects_pk, single_json_topic, **kwargs)  # noqa: E501
            return data

    def update_full_topic_with_http_info(self, guid, projects_pk, single_json_topic, **kwargs):  # noqa: E501
        """update_full_topic  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_full_topic_with_http_info(guid, projects_pk, single_json_topic, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this topic. (required)
        :param str projects_pk: (required)
        :param SingleJsonTopic single_json_topic: (required)
        :return: SingleJsonTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'single_json_topic']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_full_topic" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in local_var_params or
                local_var_params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `update_full_topic`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `update_full_topic`")  # noqa: E501
        # verify the required parameter 'single_json_topic' is set
        if ('single_json_topic' not in local_var_params or
                local_var_params['single_json_topic'] is None):
            raise ValueError("Missing the required parameter `single_json_topic` when calling `update_full_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'single_json_topic' in local_var_params:
            body_params = local_var_params['single_json_topic']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/full-topic/{guid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleJsonTopic',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_selection(self, id, projects_pk, topics_pk, viewpoints_pk, component, **kwargs):  # noqa: E501
        """update_selection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_selection(id, projects_pk, topics_pk, viewpoints_pk, component, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this component. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param Component component: (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_selection_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, component, **kwargs)  # noqa: E501
        else:
            (data) = self.update_selection_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, component, **kwargs)  # noqa: E501
            return data

    def update_selection_with_http_info(self, id, projects_pk, topics_pk, viewpoints_pk, component, **kwargs):  # noqa: E501
        """update_selection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_selection_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, component, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this component. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param Component component: (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'projects_pk', 'topics_pk', 'viewpoints_pk', 'component']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_selection" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_selection`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `update_selection`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `update_selection`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in local_var_params or
                local_var_params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `update_selection`")  # noqa: E501
        # verify the required parameter 'component' is set
        if ('component' not in local_var_params or
                local_var_params['component'] is None):
            raise ValueError("Missing the required parameter `component` when calling `update_selection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in local_var_params:
            path_params['viewpoints_pk'] = local_var_params['viewpoints_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'component' in local_var_params:
            body_params = local_var_params['component']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Component',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_topic(self, guid, projects_pk, topic, **kwargs):  # noqa: E501
        """update_topic  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_topic(guid, projects_pk, topic, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this topic. (required)
        :param str projects_pk: (required)
        :param Topic topic: (required)
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_topic_with_http_info(guid, projects_pk, topic, **kwargs)  # noqa: E501
        else:
            (data) = self.update_topic_with_http_info(guid, projects_pk, topic, **kwargs)  # noqa: E501
            return data

    def update_topic_with_http_info(self, guid, projects_pk, topic, **kwargs):  # noqa: E501
        """update_topic  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_topic_with_http_info(guid, projects_pk, topic, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this topic. (required)
        :param str projects_pk: (required)
        :param Topic topic: (required)
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'topic']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_topic" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in local_var_params or
                local_var_params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `update_topic`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `update_topic`")  # noqa: E501
        # verify the required parameter 'topic' is set
        if ('topic' not in local_var_params or
                local_var_params['topic'] is None):
            raise ValueError("Missing the required parameter `topic` when calling `update_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'topic' in local_var_params:
            body_params = local_var_params['topic']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{guid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Topic',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_viewpoint(self, guid, projects_pk, topics_pk, viewpoint, **kwargs):  # noqa: E501
        """update_viewpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_viewpoint(guid, projects_pk, topics_pk, viewpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this viewpoint. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Viewpoint viewpoint: (required)
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_viewpoint_with_http_info(guid, projects_pk, topics_pk, viewpoint, **kwargs)  # noqa: E501
        else:
            (data) = self.update_viewpoint_with_http_info(guid, projects_pk, topics_pk, viewpoint, **kwargs)  # noqa: E501
            return data

    def update_viewpoint_with_http_info(self, guid, projects_pk, topics_pk, viewpoint, **kwargs):  # noqa: E501
        """update_viewpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_viewpoint_with_http_info(guid, projects_pk, topics_pk, viewpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: A UUID string identifying this viewpoint. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Viewpoint viewpoint: (required)
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'topics_pk', 'viewpoint']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_viewpoint" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in local_var_params or
                local_var_params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `update_viewpoint`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `update_viewpoint`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `update_viewpoint`")  # noqa: E501
        # verify the required parameter 'viewpoint' is set
        if ('viewpoint' not in local_var_params or
                local_var_params['viewpoint'] is None):
            raise ValueError("Missing the required parameter `viewpoint` when calling `update_viewpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'viewpoint' in local_var_params:
            body_params = local_var_params['viewpoint']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{guid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Viewpoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_visibility(self, id, projects_pk, topics_pk, viewpoints_pk, visibility, **kwargs):  # noqa: E501
        """update_visibility  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_visibility(id, projects_pk, topics_pk, viewpoints_pk, visibility, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this visibility. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param Visibility visibility: (required)
        :return: Visibility
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_visibility_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, visibility, **kwargs)  # noqa: E501
        else:
            (data) = self.update_visibility_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, visibility, **kwargs)  # noqa: E501
            return data

    def update_visibility_with_http_info(self, id, projects_pk, topics_pk, viewpoints_pk, visibility, **kwargs):  # noqa: E501
        """update_visibility  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_visibility_with_http_info(id, projects_pk, topics_pk, viewpoints_pk, visibility, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this visibility. (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param Visibility visibility: (required)
        :return: Visibility
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'projects_pk', 'topics_pk', 'viewpoints_pk', 'visibility']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_visibility" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_visibility`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in local_var_params or
                local_var_params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `update_visibility`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in local_var_params or
                local_var_params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `update_visibility`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in local_var_params or
                local_var_params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `update_visibility`")  # noqa: E501
        # verify the required parameter 'visibility' is set
        if ('visibility' not in local_var_params or
                local_var_params['visibility'] is None):
            raise ValueError("Missing the required parameter `visibility` when calling `update_visibility`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_pk' in local_var_params:
            path_params['topics_pk'] = local_var_params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in local_var_params:
            path_params['viewpoints_pk'] = local_var_params['viewpoints_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'visibility' in local_var_params:
            body_params = local_var_params['visibility']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Visibility',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
