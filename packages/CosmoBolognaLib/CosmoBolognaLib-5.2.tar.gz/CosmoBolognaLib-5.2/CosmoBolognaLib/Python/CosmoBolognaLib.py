# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_CosmoBolognaLib')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_CosmoBolognaLib')
    _CosmoBolognaLib = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CosmoBolognaLib', [dirname(__file__)])
        except ImportError:
            import _CosmoBolognaLib
            return _CosmoBolognaLib
        try:
            _mod = imp.load_module('_CosmoBolognaLib', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _CosmoBolognaLib = swig_import_helper()
    del swig_import_helper
else:
    import _CosmoBolognaLib
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _CosmoBolognaLib.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CosmoBolognaLib.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CosmoBolognaLib.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CosmoBolognaLib.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CosmoBolognaLib.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CosmoBolognaLib.SwigPyIterator_copy(self)

    def next(self):
        return _CosmoBolognaLib.SwigPyIterator_next(self)

    def __next__(self):
        return _CosmoBolognaLib.SwigPyIterator___next__(self)

    def previous(self):
        return _CosmoBolognaLib.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CosmoBolognaLib.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CosmoBolognaLib.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CosmoBolognaLib.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CosmoBolognaLib.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CosmoBolognaLib.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CosmoBolognaLib.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CosmoBolognaLib.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _CosmoBolognaLib.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _CosmoBolognaLib.SHARED_PTR_DISOWN
Dim__1D_ = _CosmoBolognaLib.Dim__1D_
Dim__2D_ = _CosmoBolognaLib.Dim__2D_

def DimNames():
    return _CosmoBolognaLib.DimNames()
DimNames = _CosmoBolognaLib.DimNames
BinType__linear_ = _CosmoBolognaLib.BinType__linear_
BinType__logarithmic_ = _CosmoBolognaLib.BinType__logarithmic_

def BinTypeNames():
    return _CosmoBolognaLib.BinTypeNames()
BinTypeNames = _CosmoBolognaLib.BinTypeNames

def BinTypeCast(*args):
    return _CosmoBolognaLib.BinTypeCast(*args)
BinTypeCast = _CosmoBolognaLib.BinTypeCast
CoordinateUnits__radians_ = _CosmoBolognaLib.CoordinateUnits__radians_
CoordinateUnits__degrees_ = _CosmoBolognaLib.CoordinateUnits__degrees_
CoordinateUnits__arcseconds_ = _CosmoBolognaLib.CoordinateUnits__arcseconds_
CoordinateUnits__arcminutes_ = _CosmoBolognaLib.CoordinateUnits__arcminutes_

def CoordinateUnitsNames():
    return _CosmoBolognaLib.CoordinateUnitsNames()
CoordinateUnitsNames = _CosmoBolognaLib.CoordinateUnitsNames

def CoordinateUnitsCast(*args):
    return _CosmoBolognaLib.CoordinateUnitsCast(*args)
CoordinateUnitsCast = _CosmoBolognaLib.CoordinateUnitsCast
CoordinateType__comoving_ = _CosmoBolognaLib.CoordinateType__comoving_
CoordinateType__observed_ = _CosmoBolognaLib.CoordinateType__observed_

def CoordinateTypeNames():
    return _CosmoBolognaLib.CoordinateTypeNames()
CoordinateTypeNames = _CosmoBolognaLib.CoordinateTypeNames

def CoordinateTypeCast(*args):
    return _CosmoBolognaLib.CoordinateTypeCast(*args)
CoordinateTypeCast = _CosmoBolognaLib.CoordinateTypeCast
class comovingCoordinates(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, comovingCoordinates, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, comovingCoordinates, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xx"] = _CosmoBolognaLib.comovingCoordinates_xx_set
    __swig_getmethods__["xx"] = _CosmoBolognaLib.comovingCoordinates_xx_get
    if _newclass:
        xx = _swig_property(_CosmoBolognaLib.comovingCoordinates_xx_get, _CosmoBolognaLib.comovingCoordinates_xx_set)
    __swig_setmethods__["yy"] = _CosmoBolognaLib.comovingCoordinates_yy_set
    __swig_getmethods__["yy"] = _CosmoBolognaLib.comovingCoordinates_yy_get
    if _newclass:
        yy = _swig_property(_CosmoBolognaLib.comovingCoordinates_yy_get, _CosmoBolognaLib.comovingCoordinates_yy_set)
    __swig_setmethods__["zz"] = _CosmoBolognaLib.comovingCoordinates_zz_set
    __swig_getmethods__["zz"] = _CosmoBolognaLib.comovingCoordinates_zz_get
    if _newclass:
        zz = _swig_property(_CosmoBolognaLib.comovingCoordinates_zz_get, _CosmoBolognaLib.comovingCoordinates_zz_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_comovingCoordinates()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_comovingCoordinates
    __del__ = lambda self: None
comovingCoordinates_swigregister = _CosmoBolognaLib.comovingCoordinates_swigregister
comovingCoordinates_swigregister(comovingCoordinates)

class observedCoordinates(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, observedCoordinates, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, observedCoordinates, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ra"] = _CosmoBolognaLib.observedCoordinates_ra_set
    __swig_getmethods__["ra"] = _CosmoBolognaLib.observedCoordinates_ra_get
    if _newclass:
        ra = _swig_property(_CosmoBolognaLib.observedCoordinates_ra_get, _CosmoBolognaLib.observedCoordinates_ra_set)
    __swig_setmethods__["dec"] = _CosmoBolognaLib.observedCoordinates_dec_set
    __swig_getmethods__["dec"] = _CosmoBolognaLib.observedCoordinates_dec_get
    if _newclass:
        dec = _swig_property(_CosmoBolognaLib.observedCoordinates_dec_get, _CosmoBolognaLib.observedCoordinates_dec_set)
    __swig_setmethods__["redshift"] = _CosmoBolognaLib.observedCoordinates_redshift_set
    __swig_getmethods__["redshift"] = _CosmoBolognaLib.observedCoordinates_redshift_get
    if _newclass:
        redshift = _swig_property(_CosmoBolognaLib.observedCoordinates_redshift_get, _CosmoBolognaLib.observedCoordinates_redshift_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_observedCoordinates()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_observedCoordinates
    __del__ = lambda self: None
observedCoordinates_swigregister = _CosmoBolognaLib.observedCoordinates_swigregister
observedCoordinates_swigregister(observedCoordinates)


def headerCBL(stream):
    return _CosmoBolognaLib.headerCBL(stream)
headerCBL = _CosmoBolognaLib.headerCBL

def SetDirs(input_DirCosmo, input_DirLoc):
    return _CosmoBolognaLib.SetDirs(input_DirCosmo, input_DirLoc)
SetDirs = _CosmoBolognaLib.SetDirs

def WarningMsg(msg):
    return _CosmoBolognaLib.WarningMsg(msg)
WarningMsg = _CosmoBolognaLib.WarningMsg

def Error(*args):
    return _CosmoBolognaLib.Error(*args)
Error = _CosmoBolognaLib.Error

def ErrorCBL(*args):
    return _CosmoBolognaLib.ErrorCBL(*args)
ErrorCBL = _CosmoBolognaLib.ErrorCBL

def Beep():
    return _CosmoBolognaLib.Beep()
Beep = _CosmoBolognaLib.Beep

def isSet(*args):
    return _CosmoBolognaLib.isSet(*args)
isSet = _CosmoBolognaLib.isSet

def fullpath(path, isDir=True):
    return _CosmoBolognaLib.fullpath(path, isDir)
fullpath = _CosmoBolognaLib.fullpath

def ShortSwap(s):
    return _CosmoBolognaLib.ShortSwap(s)
ShortSwap = _CosmoBolognaLib.ShortSwap

def IntSwap(i):
    return _CosmoBolognaLib.IntSwap(i)
IntSwap = _CosmoBolognaLib.IntSwap

def LongSwap(i):
    return _CosmoBolognaLib.LongSwap(i)
LongSwap = _CosmoBolognaLib.LongSwap

def FloatSwap(f):
    return _CosmoBolognaLib.FloatSwap(f)
FloatSwap = _CosmoBolognaLib.FloatSwap

def DoubleSwap(d):
    return _CosmoBolognaLib.DoubleSwap(d)
DoubleSwap = _CosmoBolognaLib.DoubleSwap

def round_to_digits(num, ndigits):
    return _CosmoBolognaLib.round_to_digits(num, ndigits)
round_to_digits = _CosmoBolognaLib.round_to_digits

def round_to_precision(num, ndigits):
    return _CosmoBolognaLib.round_to_precision(num, ndigits)
round_to_precision = _CosmoBolognaLib.round_to_precision

def checkIO(*args):
    return _CosmoBolognaLib.checkIO(*args)
checkIO = _CosmoBolognaLib.checkIO

def set_EnvVar(Var):
    return _CosmoBolognaLib.set_EnvVar(Var)
set_EnvVar = _CosmoBolognaLib.set_EnvVar

def check_EnvVar(Var):
    return _CosmoBolognaLib.check_EnvVar(Var)
check_EnvVar = _CosmoBolognaLib.check_EnvVar

def used_memory(type):
    return _CosmoBolognaLib.used_memory(type)
used_memory = _CosmoBolognaLib.used_memory

def check_memory(*args):
    return _CosmoBolognaLib.check_memory(*args)
check_memory = _CosmoBolognaLib.check_memory

def Print(*args):
    return _CosmoBolognaLib.Print(*args)
Print = _CosmoBolognaLib.Print

def unique_unsorted(*args):
    return _CosmoBolognaLib.unique_unsorted(*args)
unique_unsorted = _CosmoBolognaLib.unique_unsorted
class CL(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CL, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CL, name)
    __repr__ = _swig_repr
    __swig_setmethods__["VV"] = _CosmoBolognaLib.CL_VV_set
    __swig_getmethods__["VV"] = _CosmoBolognaLib.CL_VV_get
    if _newclass:
        VV = _swig_property(_CosmoBolognaLib.CL_VV_get, _CosmoBolognaLib.CL_VV_set)

    def __init__(self, vv):
        this = _CosmoBolognaLib.new_CL(vv)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_CL
    __del__ = lambda self: None
CL_swigregister = _CosmoBolognaLib.CL_swigregister
CL_swigregister(CL)


def __lt__(arg1, arg2):
    return _CosmoBolognaLib.__lt__(arg1, arg2)
__lt__ = _CosmoBolognaLib.__lt__

def sort_2vectors(p1, p2, dim):
    return _CosmoBolognaLib.sort_2vectors(p1, p2, dim)
sort_2vectors = _CosmoBolognaLib.sort_2vectors

def sort_3vectors(p1, p2, p3, dim):
    return _CosmoBolognaLib.sort_3vectors(p1, p2, p3, dim)
sort_3vectors = _CosmoBolognaLib.sort_3vectors

def sort_4vectors(p1, p2, p3, p4, dim):
    return _CosmoBolognaLib.sort_4vectors(p1, p2, p3, p4, dim)
sort_4vectors = _CosmoBolognaLib.sort_4vectors

def __mul__(Mat1, Mat2):
    return _CosmoBolognaLib.__mul__(Mat1, Mat2)
__mul__ = _CosmoBolognaLib.__mul__
class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CosmoBolognaLib.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CosmoBolognaLib.IntVector___nonzero__(self)

    def __bool__(self):
        return _CosmoBolognaLib.IntVector___bool__(self)

    def __len__(self):
        return _CosmoBolognaLib.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _CosmoBolognaLib.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CosmoBolognaLib.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CosmoBolognaLib.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CosmoBolognaLib.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CosmoBolognaLib.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CosmoBolognaLib.IntVector___setitem__(self, *args)

    def pop(self):
        return _CosmoBolognaLib.IntVector_pop(self)

    def append(self, x):
        return _CosmoBolognaLib.IntVector_append(self, x)

    def empty(self):
        return _CosmoBolognaLib.IntVector_empty(self)

    def size(self):
        return _CosmoBolognaLib.IntVector_size(self)

    def swap(self, v):
        return _CosmoBolognaLib.IntVector_swap(self, v)

    def begin(self):
        return _CosmoBolognaLib.IntVector_begin(self)

    def end(self):
        return _CosmoBolognaLib.IntVector_end(self)

    def rbegin(self):
        return _CosmoBolognaLib.IntVector_rbegin(self)

    def rend(self):
        return _CosmoBolognaLib.IntVector_rend(self)

    def clear(self):
        return _CosmoBolognaLib.IntVector_clear(self)

    def get_allocator(self):
        return _CosmoBolognaLib.IntVector_get_allocator(self)

    def pop_back(self):
        return _CosmoBolognaLib.IntVector_pop_back(self)

    def erase(self, *args):
        return _CosmoBolognaLib.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _CosmoBolognaLib.IntVector_push_back(self, x)

    def front(self):
        return _CosmoBolognaLib.IntVector_front(self)

    def back(self):
        return _CosmoBolognaLib.IntVector_back(self)

    def assign(self, n, x):
        return _CosmoBolognaLib.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _CosmoBolognaLib.IntVector_resize(self, *args)

    def insert(self, *args):
        return _CosmoBolognaLib.IntVector_insert(self, *args)

    def reserve(self, n):
        return _CosmoBolognaLib.IntVector_reserve(self, n)

    def capacity(self):
        return _CosmoBolognaLib.IntVector_capacity(self)
    __swig_destroy__ = _CosmoBolognaLib.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _CosmoBolognaLib.IntVector_swigregister
IntVector_swigregister(IntVector)
cvar = _CosmoBolognaLib.cvar
yotta = cvar.yotta
zetta = cvar.zetta
exa = cvar.exa
peta = cvar.peta
tera = cvar.tera
giga = cvar.giga
mega = cvar.mega
kilo = cvar.kilo
ecto = cvar.ecto
deca = cvar.deca
deci = cvar.deci
centi = cvar.centi
milli = cvar.milli
micro = cvar.micro
nano = cvar.nano
pico = cvar.pico
femto = cvar.femto
atto = cvar.atto
zepto = cvar.zepto
yocto = cvar.yocto
fINT = cvar.fINT
fLONG = cvar.fLONG
fDP0 = cvar.fDP0
fDP1 = cvar.fDP1
fDP2 = cvar.fDP2
fDP3 = cvar.fDP3
fDP4 = cvar.fDP4
fDP5 = cvar.fDP5
fDP6 = cvar.fDP6
ee3 = cvar.ee3
pi = cvar.pi
ee = cvar.ee
hbar = cvar.hbar
cc = cvar.cc
kB = cvar.kB
sSB = cvar.sSB
el = cvar.el
alpha = cvar.alpha
epsilon0 = cvar.epsilon0
mu0 = cvar.mu0
NAv = cvar.NAv
GN = cvar.GN
gn = cvar.gn
lP = cvar.lP
MP = cvar.MP
Msol = cvar.Msol
me = cvar.me
mn = cvar.mn
mp = cvar.mp
au = cvar.au
pc = cvar.pc
TCMB = cvar.TCMB
yr = cvar.yr
col_default = cvar.col_default
col_red = cvar.col_red
col_bred = cvar.col_bred
col_onred = cvar.col_onred
col_green = cvar.col_green
col_blue = cvar.col_blue
col_yellow = cvar.col_yellow
col_purple = cvar.col_purple
default_func = cvar.default_func

class LongVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CosmoBolognaLib.LongVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CosmoBolognaLib.LongVector___nonzero__(self)

    def __bool__(self):
        return _CosmoBolognaLib.LongVector___bool__(self)

    def __len__(self):
        return _CosmoBolognaLib.LongVector___len__(self)

    def __getslice__(self, i, j):
        return _CosmoBolognaLib.LongVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CosmoBolognaLib.LongVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CosmoBolognaLib.LongVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CosmoBolognaLib.LongVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CosmoBolognaLib.LongVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CosmoBolognaLib.LongVector___setitem__(self, *args)

    def pop(self):
        return _CosmoBolognaLib.LongVector_pop(self)

    def append(self, x):
        return _CosmoBolognaLib.LongVector_append(self, x)

    def empty(self):
        return _CosmoBolognaLib.LongVector_empty(self)

    def size(self):
        return _CosmoBolognaLib.LongVector_size(self)

    def swap(self, v):
        return _CosmoBolognaLib.LongVector_swap(self, v)

    def begin(self):
        return _CosmoBolognaLib.LongVector_begin(self)

    def end(self):
        return _CosmoBolognaLib.LongVector_end(self)

    def rbegin(self):
        return _CosmoBolognaLib.LongVector_rbegin(self)

    def rend(self):
        return _CosmoBolognaLib.LongVector_rend(self)

    def clear(self):
        return _CosmoBolognaLib.LongVector_clear(self)

    def get_allocator(self):
        return _CosmoBolognaLib.LongVector_get_allocator(self)

    def pop_back(self):
        return _CosmoBolognaLib.LongVector_pop_back(self)

    def erase(self, *args):
        return _CosmoBolognaLib.LongVector_erase(self, *args)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_LongVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _CosmoBolognaLib.LongVector_push_back(self, x)

    def front(self):
        return _CosmoBolognaLib.LongVector_front(self)

    def back(self):
        return _CosmoBolognaLib.LongVector_back(self)

    def assign(self, n, x):
        return _CosmoBolognaLib.LongVector_assign(self, n, x)

    def resize(self, *args):
        return _CosmoBolognaLib.LongVector_resize(self, *args)

    def insert(self, *args):
        return _CosmoBolognaLib.LongVector_insert(self, *args)

    def reserve(self, n):
        return _CosmoBolognaLib.LongVector_reserve(self, n)

    def capacity(self):
        return _CosmoBolognaLib.LongVector_capacity(self)
    __swig_destroy__ = _CosmoBolognaLib.delete_LongVector
    __del__ = lambda self: None
LongVector_swigregister = _CosmoBolognaLib.LongVector_swigregister
LongVector_swigregister(LongVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CosmoBolognaLib.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CosmoBolognaLib.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _CosmoBolognaLib.DoubleVector___bool__(self)

    def __len__(self):
        return _CosmoBolognaLib.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _CosmoBolognaLib.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CosmoBolognaLib.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CosmoBolognaLib.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CosmoBolognaLib.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CosmoBolognaLib.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CosmoBolognaLib.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _CosmoBolognaLib.DoubleVector_pop(self)

    def append(self, x):
        return _CosmoBolognaLib.DoubleVector_append(self, x)

    def empty(self):
        return _CosmoBolognaLib.DoubleVector_empty(self)

    def size(self):
        return _CosmoBolognaLib.DoubleVector_size(self)

    def swap(self, v):
        return _CosmoBolognaLib.DoubleVector_swap(self, v)

    def begin(self):
        return _CosmoBolognaLib.DoubleVector_begin(self)

    def end(self):
        return _CosmoBolognaLib.DoubleVector_end(self)

    def rbegin(self):
        return _CosmoBolognaLib.DoubleVector_rbegin(self)

    def rend(self):
        return _CosmoBolognaLib.DoubleVector_rend(self)

    def clear(self):
        return _CosmoBolognaLib.DoubleVector_clear(self)

    def get_allocator(self):
        return _CosmoBolognaLib.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _CosmoBolognaLib.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _CosmoBolognaLib.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _CosmoBolognaLib.DoubleVector_push_back(self, x)

    def front(self):
        return _CosmoBolognaLib.DoubleVector_front(self)

    def back(self):
        return _CosmoBolognaLib.DoubleVector_back(self)

    def assign(self, n, x):
        return _CosmoBolognaLib.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _CosmoBolognaLib.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _CosmoBolognaLib.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _CosmoBolognaLib.DoubleVector_reserve(self, n)

    def capacity(self):
        return _CosmoBolognaLib.DoubleVector_capacity(self)
    __swig_destroy__ = _CosmoBolognaLib.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _CosmoBolognaLib.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CosmoBolognaLib.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CosmoBolognaLib.StringVector___nonzero__(self)

    def __bool__(self):
        return _CosmoBolognaLib.StringVector___bool__(self)

    def __len__(self):
        return _CosmoBolognaLib.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _CosmoBolognaLib.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CosmoBolognaLib.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CosmoBolognaLib.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CosmoBolognaLib.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CosmoBolognaLib.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CosmoBolognaLib.StringVector___setitem__(self, *args)

    def pop(self):
        return _CosmoBolognaLib.StringVector_pop(self)

    def append(self, x):
        return _CosmoBolognaLib.StringVector_append(self, x)

    def empty(self):
        return _CosmoBolognaLib.StringVector_empty(self)

    def size(self):
        return _CosmoBolognaLib.StringVector_size(self)

    def swap(self, v):
        return _CosmoBolognaLib.StringVector_swap(self, v)

    def begin(self):
        return _CosmoBolognaLib.StringVector_begin(self)

    def end(self):
        return _CosmoBolognaLib.StringVector_end(self)

    def rbegin(self):
        return _CosmoBolognaLib.StringVector_rbegin(self)

    def rend(self):
        return _CosmoBolognaLib.StringVector_rend(self)

    def clear(self):
        return _CosmoBolognaLib.StringVector_clear(self)

    def get_allocator(self):
        return _CosmoBolognaLib.StringVector_get_allocator(self)

    def pop_back(self):
        return _CosmoBolognaLib.StringVector_pop_back(self)

    def erase(self, *args):
        return _CosmoBolognaLib.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _CosmoBolognaLib.StringVector_push_back(self, x)

    def front(self):
        return _CosmoBolognaLib.StringVector_front(self)

    def back(self):
        return _CosmoBolognaLib.StringVector_back(self)

    def assign(self, n, x):
        return _CosmoBolognaLib.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _CosmoBolognaLib.StringVector_resize(self, *args)

    def insert(self, *args):
        return _CosmoBolognaLib.StringVector_insert(self, *args)

    def reserve(self, n):
        return _CosmoBolognaLib.StringVector_reserve(self, n)

    def capacity(self):
        return _CosmoBolognaLib.StringVector_capacity(self)
    __swig_destroy__ = _CosmoBolognaLib.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _CosmoBolognaLib.StringVector_swigregister
StringVector_swigregister(StringVector)

class BoolVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CosmoBolognaLib.BoolVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CosmoBolognaLib.BoolVector___nonzero__(self)

    def __bool__(self):
        return _CosmoBolognaLib.BoolVector___bool__(self)

    def __len__(self):
        return _CosmoBolognaLib.BoolVector___len__(self)

    def __getslice__(self, i, j):
        return _CosmoBolognaLib.BoolVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CosmoBolognaLib.BoolVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CosmoBolognaLib.BoolVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CosmoBolognaLib.BoolVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CosmoBolognaLib.BoolVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CosmoBolognaLib.BoolVector___setitem__(self, *args)

    def pop(self):
        return _CosmoBolognaLib.BoolVector_pop(self)

    def append(self, x):
        return _CosmoBolognaLib.BoolVector_append(self, x)

    def empty(self):
        return _CosmoBolognaLib.BoolVector_empty(self)

    def size(self):
        return _CosmoBolognaLib.BoolVector_size(self)

    def swap(self, v):
        return _CosmoBolognaLib.BoolVector_swap(self, v)

    def begin(self):
        return _CosmoBolognaLib.BoolVector_begin(self)

    def end(self):
        return _CosmoBolognaLib.BoolVector_end(self)

    def rbegin(self):
        return _CosmoBolognaLib.BoolVector_rbegin(self)

    def rend(self):
        return _CosmoBolognaLib.BoolVector_rend(self)

    def clear(self):
        return _CosmoBolognaLib.BoolVector_clear(self)

    def get_allocator(self):
        return _CosmoBolognaLib.BoolVector_get_allocator(self)

    def pop_back(self):
        return _CosmoBolognaLib.BoolVector_pop_back(self)

    def erase(self, *args):
        return _CosmoBolognaLib.BoolVector_erase(self, *args)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_BoolVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _CosmoBolognaLib.BoolVector_push_back(self, x)

    def front(self):
        return _CosmoBolognaLib.BoolVector_front(self)

    def back(self):
        return _CosmoBolognaLib.BoolVector_back(self)

    def assign(self, n, x):
        return _CosmoBolognaLib.BoolVector_assign(self, n, x)

    def resize(self, *args):
        return _CosmoBolognaLib.BoolVector_resize(self, *args)

    def insert(self, *args):
        return _CosmoBolognaLib.BoolVector_insert(self, *args)

    def reserve(self, n):
        return _CosmoBolognaLib.BoolVector_reserve(self, n)

    def capacity(self):
        return _CosmoBolognaLib.BoolVector_capacity(self)
    __swig_destroy__ = _CosmoBolognaLib.delete_BoolVector
    __del__ = lambda self: None
BoolVector_swigregister = _CosmoBolognaLib.BoolVector_swigregister
BoolVector_swigregister(BoolVector)

class DoubleVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CosmoBolognaLib.DoubleVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CosmoBolognaLib.DoubleVectorVector___nonzero__(self)

    def __bool__(self):
        return _CosmoBolognaLib.DoubleVectorVector___bool__(self)

    def __len__(self):
        return _CosmoBolognaLib.DoubleVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _CosmoBolognaLib.DoubleVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CosmoBolognaLib.DoubleVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CosmoBolognaLib.DoubleVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CosmoBolognaLib.DoubleVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CosmoBolognaLib.DoubleVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CosmoBolognaLib.DoubleVectorVector___setitem__(self, *args)

    def pop(self):
        return _CosmoBolognaLib.DoubleVectorVector_pop(self)

    def append(self, x):
        return _CosmoBolognaLib.DoubleVectorVector_append(self, x)

    def empty(self):
        return _CosmoBolognaLib.DoubleVectorVector_empty(self)

    def size(self):
        return _CosmoBolognaLib.DoubleVectorVector_size(self)

    def swap(self, v):
        return _CosmoBolognaLib.DoubleVectorVector_swap(self, v)

    def begin(self):
        return _CosmoBolognaLib.DoubleVectorVector_begin(self)

    def end(self):
        return _CosmoBolognaLib.DoubleVectorVector_end(self)

    def rbegin(self):
        return _CosmoBolognaLib.DoubleVectorVector_rbegin(self)

    def rend(self):
        return _CosmoBolognaLib.DoubleVectorVector_rend(self)

    def clear(self):
        return _CosmoBolognaLib.DoubleVectorVector_clear(self)

    def get_allocator(self):
        return _CosmoBolognaLib.DoubleVectorVector_get_allocator(self)

    def pop_back(self):
        return _CosmoBolognaLib.DoubleVectorVector_pop_back(self)

    def erase(self, *args):
        return _CosmoBolognaLib.DoubleVectorVector_erase(self, *args)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_DoubleVectorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _CosmoBolognaLib.DoubleVectorVector_push_back(self, x)

    def front(self):
        return _CosmoBolognaLib.DoubleVectorVector_front(self)

    def back(self):
        return _CosmoBolognaLib.DoubleVectorVector_back(self)

    def assign(self, n, x):
        return _CosmoBolognaLib.DoubleVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _CosmoBolognaLib.DoubleVectorVector_resize(self, *args)

    def insert(self, *args):
        return _CosmoBolognaLib.DoubleVectorVector_insert(self, *args)

    def reserve(self, n):
        return _CosmoBolognaLib.DoubleVectorVector_reserve(self, n)

    def capacity(self):
        return _CosmoBolognaLib.DoubleVectorVector_capacity(self)
    __swig_destroy__ = _CosmoBolognaLib.delete_DoubleVectorVector
    __del__ = lambda self: None
DoubleVectorVector_swigregister = _CosmoBolognaLib.DoubleVectorVector_swigregister
DoubleVectorVector_swigregister(DoubleVectorVector)

NDIM = _CosmoBolognaLib.NDIM
NCOMP = _CosmoBolognaLib.NCOMP
NVEC = _CosmoBolognaLib.NVEC
EPSREL = _CosmoBolognaLib.EPSREL
EPSABS = _CosmoBolognaLib.EPSABS
VERBOSE = _CosmoBolognaLib.VERBOSE
LAST = _CosmoBolognaLib.LAST
SEED = _CosmoBolognaLib.SEED
MINEVAL = _CosmoBolognaLib.MINEVAL
MAXEVAL = _CosmoBolognaLib.MAXEVAL
NSTART = _CosmoBolognaLib.NSTART
NINCREASE = _CosmoBolognaLib.NINCREASE
NBATCH = _CosmoBolognaLib.NBATCH
GRIDNO = _CosmoBolognaLib.GRIDNO
NNEW = _CosmoBolognaLib.NNEW
NMIN = _CosmoBolognaLib.NMIN
FLATNESS = _CosmoBolognaLib.FLATNESS
KEY1 = _CosmoBolognaLib.KEY1
KEY2 = _CosmoBolognaLib.KEY2
KEY3 = _CosmoBolognaLib.KEY3
MAXPASS = _CosmoBolognaLib.MAXPASS
BORDER = _CosmoBolognaLib.BORDER
MAXCHISQ = _CosmoBolognaLib.MAXCHISQ
MINDEVIATION = _CosmoBolognaLib.MINDEVIATION
NGIVEN = _CosmoBolognaLib.NGIVEN
LDXGIVEN = _CosmoBolognaLib.LDXGIVEN
NEXTRA = _CosmoBolognaLib.NEXTRA
KEY = _CosmoBolognaLib.KEY
class STR_CUBA_integrand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_CUBA_integrand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_CUBA_integrand, name)
    __repr__ = _swig_repr
    __swig_setmethods__["func"] = _CosmoBolognaLib.STR_CUBA_integrand_func_set
    __swig_getmethods__["func"] = _CosmoBolognaLib.STR_CUBA_integrand_func_get
    if _newclass:
        func = _swig_property(_CosmoBolognaLib.STR_CUBA_integrand_func_get, _CosmoBolognaLib.STR_CUBA_integrand_func_set)
    __swig_setmethods__["integration_limits"] = _CosmoBolognaLib.STR_CUBA_integrand_integration_limits_set
    __swig_getmethods__["integration_limits"] = _CosmoBolognaLib.STR_CUBA_integrand_integration_limits_get
    if _newclass:
        integration_limits = _swig_property(_CosmoBolognaLib.STR_CUBA_integrand_integration_limits_get, _CosmoBolognaLib.STR_CUBA_integrand_integration_limits_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_CUBA_integrand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_CUBA_integrand
    __del__ = lambda self: None
STR_CUBA_integrand_swigregister = _CosmoBolognaLib.STR_CUBA_integrand_swigregister
STR_CUBA_integrand_swigregister(STR_CUBA_integrand)


def CUBAIntegrand(ndim, xx, ncomp, ff, userdata):
    return _CosmoBolognaLib.CUBAIntegrand(ndim, xx, ncomp, ff, userdata)
CUBAIntegrand = _CosmoBolognaLib.CUBAIntegrand
class CUBAwrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CUBAwrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CUBAwrapper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_CUBAwrapper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_CUBAwrapper
    __del__ = lambda self: None

    def set_integrand(self, *args):
        return _CosmoBolognaLib.CUBAwrapper_set_integrand(self, *args)

    def set_limits(self, integration_limits):
        return _CosmoBolognaLib.CUBAwrapper_set_limits(self, integration_limits)

    def IntegrateVegas(self, integration_limits):
        return _CosmoBolognaLib.CUBAwrapper_IntegrateVegas(self, integration_limits)

    def IntegrateSuave(self, integration_limits):
        return _CosmoBolognaLib.CUBAwrapper_IntegrateSuave(self, integration_limits)

    def IntegrateDivonne(self, integration_limits):
        return _CosmoBolognaLib.CUBAwrapper_IntegrateDivonne(self, integration_limits)

    def IntegrateCuhre(self, integration_limits):
        return _CosmoBolognaLib.CUBAwrapper_IntegrateCuhre(self, integration_limits)
CUBAwrapper_swigregister = _CosmoBolognaLib.CUBAwrapper_swigregister
CUBAwrapper_swigregister(CUBAwrapper)


def read_table_fits(*args):
    return _CosmoBolognaLib.read_table_fits(*args)
read_table_fits = _CosmoBolognaLib.read_table_fits

def write_table_fits(*args):
    return _CosmoBolognaLib.write_table_fits(*args)
write_table_fits = _CosmoBolognaLib.write_table_fits
class STR_generic_func_GSL(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_generic_func_GSL, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_generic_func_GSL, name)
    __repr__ = _swig_repr
    __swig_setmethods__["f"] = _CosmoBolognaLib.STR_generic_func_GSL_f_set
    __swig_getmethods__["f"] = _CosmoBolognaLib.STR_generic_func_GSL_f_get
    if _newclass:
        f = _swig_property(_CosmoBolognaLib.STR_generic_func_GSL_f_get, _CosmoBolognaLib.STR_generic_func_GSL_f_set)
    __swig_setmethods__["xx0"] = _CosmoBolognaLib.STR_generic_func_GSL_xx0_set
    __swig_getmethods__["xx0"] = _CosmoBolognaLib.STR_generic_func_GSL_xx0_get
    if _newclass:
        xx0 = _swig_property(_CosmoBolognaLib.STR_generic_func_GSL_xx0_get, _CosmoBolognaLib.STR_generic_func_GSL_xx0_set)
    __swig_setmethods__["fmin"] = _CosmoBolognaLib.STR_generic_func_GSL_fmin_set
    __swig_getmethods__["fmin"] = _CosmoBolognaLib.STR_generic_func_GSL_fmin_get
    if _newclass:
        fmin = _swig_property(_CosmoBolognaLib.STR_generic_func_GSL_fmin_get, _CosmoBolognaLib.STR_generic_func_GSL_fmin_set)
    __swig_setmethods__["fmin_return"] = _CosmoBolognaLib.STR_generic_func_GSL_fmin_return_set
    __swig_getmethods__["fmin_return"] = _CosmoBolognaLib.STR_generic_func_GSL_fmin_return_get
    if _newclass:
        fmin_return = _swig_property(_CosmoBolognaLib.STR_generic_func_GSL_fmin_return_get, _CosmoBolognaLib.STR_generic_func_GSL_fmin_return_set)
    __swig_setmethods__["parameters_return"] = _CosmoBolognaLib.STR_generic_func_GSL_parameters_return_set
    __swig_getmethods__["parameters_return"] = _CosmoBolognaLib.STR_generic_func_GSL_parameters_return_get
    if _newclass:
        parameters_return = _swig_property(_CosmoBolognaLib.STR_generic_func_GSL_parameters_return_get, _CosmoBolognaLib.STR_generic_func_GSL_parameters_return_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_generic_func_GSL()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_generic_func_GSL
    __del__ = lambda self: None
STR_generic_func_GSL_swigregister = _CosmoBolognaLib.STR_generic_func_GSL_swigregister
STR_generic_func_GSL_swigregister(STR_generic_func_GSL)


def check_GSL_fail(status, exit, CBLfunction, GSLroutine):
    return _CosmoBolognaLib.check_GSL_fail(status, exit, CBLfunction, GSLroutine)
check_GSL_fail = _CosmoBolognaLib.check_GSL_fail

def generic_function(xx, params):
    return _CosmoBolognaLib.generic_function(xx, params)
generic_function = _CosmoBolognaLib.generic_function

def generic_roots(xx, params):
    return _CosmoBolognaLib.generic_roots(xx, params)
generic_roots = _CosmoBolognaLib.generic_roots

def generic_minimizer(xx, params):
    return _CosmoBolognaLib.generic_minimizer(xx, params)
generic_minimizer = _CosmoBolognaLib.generic_minimizer

def generic_minimizer_return(xx, params):
    return _CosmoBolognaLib.generic_minimizer_return(xx, params)
generic_minimizer_return = _CosmoBolognaLib.generic_minimizer_return

def GSL_derivative(*args):
    return _CosmoBolognaLib.GSL_derivative(*args)
GSL_derivative = _CosmoBolognaLib.GSL_derivative

def GSL_integrate_cquad(*args):
    return _CosmoBolognaLib.GSL_integrate_cquad(*args)
GSL_integrate_cquad = _CosmoBolognaLib.GSL_integrate_cquad

def GSL_integrate_qag(*args):
    return _CosmoBolognaLib.GSL_integrate_qag(*args)
GSL_integrate_qag = _CosmoBolognaLib.GSL_integrate_qag

def GSL_integrate_qagiu(*args):
    return _CosmoBolognaLib.GSL_integrate_qagiu(*args)
GSL_integrate_qagiu = _CosmoBolognaLib.GSL_integrate_qagiu

def GSL_integrate_qaws(*args):
    return _CosmoBolognaLib.GSL_integrate_qaws(*args)
GSL_integrate_qaws = _CosmoBolognaLib.GSL_integrate_qaws

def GSL_root_brent(*args):
    return _CosmoBolognaLib.GSL_root_brent(*args)
GSL_root_brent = _CosmoBolognaLib.GSL_root_brent

def GSL_minimize_nD(*args):
    return _CosmoBolognaLib.GSL_minimize_nD(*args)
GSL_minimize_nD = _CosmoBolognaLib.GSL_minimize_nD

def GSL_minimize_1D(*args):
    return _CosmoBolognaLib.GSL_minimize_1D(*args)
GSL_minimize_1D = _CosmoBolognaLib.GSL_minimize_1D

def GSL_polynomial_eval(x, fixed_parameters, coeff):
    return _CosmoBolognaLib.GSL_polynomial_eval(x, fixed_parameters, coeff)
GSL_polynomial_eval = _CosmoBolognaLib.GSL_polynomial_eval

def GSL_polynomial_root(coeff, root):
    return _CosmoBolognaLib.GSL_polynomial_root(coeff, root)
GSL_polynomial_root = _CosmoBolognaLib.GSL_polynomial_root
class FuncGrid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FuncGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FuncGrid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_FuncGrid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_FuncGrid
    __del__ = lambda self: None

    def x(self, *args):
        return _CosmoBolognaLib.FuncGrid_x(self, *args)

    def y(self, *args):
        return _CosmoBolognaLib.FuncGrid_y(self, *args)

    def size(self):
        return _CosmoBolognaLib.FuncGrid_size(self)

    def xmin(self):
        return _CosmoBolognaLib.FuncGrid_xmin(self)

    def xmax(self):
        return _CosmoBolognaLib.FuncGrid_xmax(self)

    def free(self):
        return _CosmoBolognaLib.FuncGrid_free(self)

    def __call__(self, xx):
        return _CosmoBolognaLib.FuncGrid___call__(self, xx)

    def eval_func(self, xx):
        return _CosmoBolognaLib.FuncGrid_eval_func(self, xx)

    def D1v(self, xx):
        return _CosmoBolognaLib.FuncGrid_D1v(self, xx)

    def D2v(self, xx):
        return _CosmoBolognaLib.FuncGrid_D2v(self, xx)

    def integrate_qag(self, a, b, rel_err=1.e-2, abs_err=1.e-6, limit_size=1000, rule=6):
        return _CosmoBolognaLib.FuncGrid_integrate_qag(self, a, b, rel_err, abs_err, limit_size, rule)

    def integrate_qaws(self, a, b, alpha=0, beta=0, mu=0, nu=0, rel_err=1.e-2, abs_err=1.e-6, limit_size=1000):
        return _CosmoBolognaLib.FuncGrid_integrate_qaws(self, a, b, alpha, beta, mu, nu, rel_err, abs_err, limit_size)

    def root(self, x_low, x_up, fx0=0, rel_err=1.e-2, abs_err=1.e-6):
        return _CosmoBolognaLib.FuncGrid_root(self, x_low, x_up, fx0, rel_err, abs_err)

    def root_D1v(self, x_low, x_up, fx0=0, rel_err=1.e-2, abs_err=1.e-6):
        return _CosmoBolognaLib.FuncGrid_root_D1v(self, x_low, x_up, fx0, rel_err, abs_err)

    def root_D2v(self, x_low, x_up, fx0=0, rel_err=1.e-2, abs_err=1.e-6):
        return _CosmoBolognaLib.FuncGrid_root_D2v(self, x_low, x_up, fx0, rel_err, abs_err)
FuncGrid_swigregister = _CosmoBolognaLib.FuncGrid_swigregister
FuncGrid_swigregister(FuncGrid)

class FuncGrid2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FuncGrid2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FuncGrid2D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_FuncGrid2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_FuncGrid2D
    __del__ = lambda self: None

    def x(self, *args):
        return _CosmoBolognaLib.FuncGrid2D_x(self, *args)

    def y(self, *args):
        return _CosmoBolognaLib.FuncGrid2D_y(self, *args)

    def size_x(self):
        return _CosmoBolognaLib.FuncGrid2D_size_x(self)

    def xmin(self):
        return _CosmoBolognaLib.FuncGrid2D_xmin(self)

    def xmax(self):
        return _CosmoBolognaLib.FuncGrid2D_xmax(self)

    def size_y(self):
        return _CosmoBolognaLib.FuncGrid2D_size_y(self)

    def ymin(self):
        return _CosmoBolognaLib.FuncGrid2D_ymin(self)

    def ymax(self):
        return _CosmoBolognaLib.FuncGrid2D_ymax(self)

    def free(self):
        return _CosmoBolognaLib.FuncGrid2D_free(self)

    def __call__(self, xx, yy):
        return _CosmoBolognaLib.FuncGrid2D___call__(self, xx, yy)

    def eval_func(self, xx):
        return _CosmoBolognaLib.FuncGrid2D_eval_func(self, xx)

    def IntegrateVegas(self, xmin, xmax, ymin, ymax):
        return _CosmoBolognaLib.FuncGrid2D_IntegrateVegas(self, xmin, xmax, ymin, ymax)

    def IntegrateSuave(self, xmin, xmax, ymin, ymax):
        return _CosmoBolognaLib.FuncGrid2D_IntegrateSuave(self, xmin, xmax, ymin, ymax)

    def IntegrateDivonne(self, xmin, xmax, ymin, ymax):
        return _CosmoBolognaLib.FuncGrid2D_IntegrateDivonne(self, xmin, xmax, ymin, ymax)

    def IntegrateCuhre(self, xmin, xmax, ymin, ymax):
        return _CosmoBolognaLib.FuncGrid2D_IntegrateCuhre(self, xmin, xmax, ymin, ymax)
FuncGrid2D_swigregister = _CosmoBolognaLib.FuncGrid2D_swigregister
FuncGrid2D_swigregister(FuncGrid2D)


def fhti_(_n, _mu, _q, _dlnr, _kr, _kropt, _wsave, _ok):
    return _CosmoBolognaLib.fhti_(_n, _mu, _q, _dlnr, _kr, _kropt, _wsave, _ok)
fhti_ = _CosmoBolognaLib.fhti_

def fftl_(_n, _a, _rk, _dir, _wsave):
    return _CosmoBolognaLib.fftl_(_n, _a, _rk, _dir, _wsave)
fftl_ = _CosmoBolognaLib.fftl_

def transform_FFTlog(*args):
    return _CosmoBolognaLib.transform_FFTlog(*args)
transform_FFTlog = _CosmoBolognaLib.transform_FFTlog
class RandomNumbers(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RandomNumbers, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RandomNumbers, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_RandomNumbers
    __del__ = lambda self: None

    def __call__(self):
        return _CosmoBolognaLib.RandomNumbers___call__(self)

    def set_seed(self, seed):
        return _CosmoBolognaLib.RandomNumbers_set_seed(self, seed)

    def set_range(self, MinVal, MaxVal):
        return _CosmoBolognaLib.RandomNumbers_set_range(self, MinVal, MaxVal)

    def set_value(self, value):
        return _CosmoBolognaLib.RandomNumbers_set_value(self, value)

    def set_mean(self, mean):
        return _CosmoBolognaLib.RandomNumbers_set_mean(self, mean)

    def set_mean_sigma(self, mean, sigma):
        return _CosmoBolognaLib.RandomNumbers_set_mean_sigma(self, mean, sigma)

    def set_discrete_values(self, values, weights):
        return _CosmoBolognaLib.RandomNumbers_set_discrete_values(self, values, weights)

    def set_interpolated_distribution(self, values, weights):
        return _CosmoBolognaLib.RandomNumbers_set_interpolated_distribution(self, values, weights)

    def set_custom_distribution(self, func, fixed_pars, pars):
        return _CosmoBolognaLib.RandomNumbers_set_custom_distribution(self, func, fixed_pars, pars)
RandomNumbers_swigregister = _CosmoBolognaLib.RandomNumbers_swigregister
RandomNumbers_swigregister(RandomNumbers)

class ConstantRandomNumbers(RandomNumbers):
    __swig_setmethods__ = {}
    for _s in [RandomNumbers]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantRandomNumbers, name, value)
    __swig_getmethods__ = {}
    for _s in [RandomNumbers]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantRandomNumbers, name)
    __repr__ = _swig_repr

    def __init__(self, value):
        this = _CosmoBolognaLib.new_ConstantRandomNumbers(value)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_ConstantRandomNumbers
    __del__ = lambda self: None

    def set_value(self, value):
        return _CosmoBolognaLib.ConstantRandomNumbers_set_value(self, value)

    def __call__(self):
        return _CosmoBolognaLib.ConstantRandomNumbers___call__(self)
ConstantRandomNumbers_swigregister = _CosmoBolognaLib.ConstantRandomNumbers_swigregister
ConstantRandomNumbers_swigregister(ConstantRandomNumbers)

class UniformRandomNumbers(RandomNumbers):
    __swig_setmethods__ = {}
    for _s in [RandomNumbers]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UniformRandomNumbers, name, value)
    __swig_getmethods__ = {}
    for _s in [RandomNumbers]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UniformRandomNumbers, name)
    __repr__ = _swig_repr

    def __init__(self, MinVal, MaxVal, seed):
        this = _CosmoBolognaLib.new_UniformRandomNumbers(MinVal, MaxVal, seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_UniformRandomNumbers
    __del__ = lambda self: None

    def __call__(self):
        return _CosmoBolognaLib.UniformRandomNumbers___call__(self)
UniformRandomNumbers_swigregister = _CosmoBolognaLib.UniformRandomNumbers_swigregister
UniformRandomNumbers_swigregister(UniformRandomNumbers)

class UniformRandomNumbers_Int(RandomNumbers):
    __swig_setmethods__ = {}
    for _s in [RandomNumbers]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UniformRandomNumbers_Int, name, value)
    __swig_getmethods__ = {}
    for _s in [RandomNumbers]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UniformRandomNumbers_Int, name)
    __repr__ = _swig_repr

    def __init__(self, MinVal, MaxVal, seed):
        this = _CosmoBolognaLib.new_UniformRandomNumbers_Int(MinVal, MaxVal, seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_UniformRandomNumbers_Int
    __del__ = lambda self: None

    def __call__(self):
        return _CosmoBolognaLib.UniformRandomNumbers_Int___call__(self)
UniformRandomNumbers_Int_swigregister = _CosmoBolognaLib.UniformRandomNumbers_Int_swigregister
UniformRandomNumbers_Int_swigregister(UniformRandomNumbers_Int)

class PoissonRandomNumbers(RandomNumbers):
    __swig_setmethods__ = {}
    for _s in [RandomNumbers]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoissonRandomNumbers, name, value)
    __swig_getmethods__ = {}
    for _s in [RandomNumbers]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PoissonRandomNumbers, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_PoissonRandomNumbers(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_PoissonRandomNumbers
    __del__ = lambda self: None

    def set_mean(self, mean):
        return _CosmoBolognaLib.PoissonRandomNumbers_set_mean(self, mean)

    def __call__(self):
        return _CosmoBolognaLib.PoissonRandomNumbers___call__(self)
PoissonRandomNumbers_swigregister = _CosmoBolognaLib.PoissonRandomNumbers_swigregister
PoissonRandomNumbers_swigregister(PoissonRandomNumbers)

class NormalRandomNumbers(RandomNumbers):
    __swig_setmethods__ = {}
    for _s in [RandomNumbers]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NormalRandomNumbers, name, value)
    __swig_getmethods__ = {}
    for _s in [RandomNumbers]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NormalRandomNumbers, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_NormalRandomNumbers(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_NormalRandomNumbers
    __del__ = lambda self: None

    def set_mean_sigma(self, mean, sigma):
        return _CosmoBolognaLib.NormalRandomNumbers_set_mean_sigma(self, mean, sigma)

    def __call__(self):
        return _CosmoBolognaLib.NormalRandomNumbers___call__(self)
NormalRandomNumbers_swigregister = _CosmoBolognaLib.NormalRandomNumbers_swigregister
NormalRandomNumbers_swigregister(NormalRandomNumbers)

class DiscreteRandomNumbers(RandomNumbers):
    __swig_setmethods__ = {}
    for _s in [RandomNumbers]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscreteRandomNumbers, name, value)
    __swig_getmethods__ = {}
    for _s in [RandomNumbers]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiscreteRandomNumbers, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_DiscreteRandomNumbers(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_DiscreteRandomNumbers
    __del__ = lambda self: None

    def set_discrete_values(self, values, weights):
        return _CosmoBolognaLib.DiscreteRandomNumbers_set_discrete_values(self, values, weights)

    def __call__(self):
        return _CosmoBolognaLib.DiscreteRandomNumbers___call__(self)
DiscreteRandomNumbers_swigregister = _CosmoBolognaLib.DiscreteRandomNumbers_swigregister
DiscreteRandomNumbers_swigregister(DiscreteRandomNumbers)

class DistributionRandomNumbers(RandomNumbers):
    __swig_setmethods__ = {}
    for _s in [RandomNumbers]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DistributionRandomNumbers, name, value)
    __swig_getmethods__ = {}
    for _s in [RandomNumbers]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DistributionRandomNumbers, name)
    __repr__ = _swig_repr

    def __init__(self, xx, distribution_function, interpolation_method, seed):
        this = _CosmoBolognaLib.new_DistributionRandomNumbers(xx, distribution_function, interpolation_method, seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_DistributionRandomNumbers
    __del__ = lambda self: None

    def set_seed(self, seed):
        return _CosmoBolognaLib.DistributionRandomNumbers_set_seed(self, seed)

    def set_interpolated_distribution(self, xx, distribution_function, interpolation_method):
        return _CosmoBolognaLib.DistributionRandomNumbers_set_interpolated_distribution(self, xx, distribution_function, interpolation_method)

    def __call__(self):
        return _CosmoBolognaLib.DistributionRandomNumbers___call__(self)
DistributionRandomNumbers_swigregister = _CosmoBolognaLib.DistributionRandomNumbers_swigregister
DistributionRandomNumbers_swigregister(DistributionRandomNumbers)

class CustomDistributionRandomNumbers(RandomNumbers):
    __swig_setmethods__ = {}
    for _s in [RandomNumbers]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CustomDistributionRandomNumbers, name, value)
    __swig_getmethods__ = {}
    for _s in [RandomNumbers]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CustomDistributionRandomNumbers, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_CustomDistributionRandomNumbers(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_CustomDistributionRandomNumbers
    __del__ = lambda self: None

    def set_seed(self, seed):
        return _CosmoBolognaLib.CustomDistributionRandomNumbers_set_seed(self, seed)

    def set_custom_distribution(self, func, fixed_pars, pars):
        return _CosmoBolognaLib.CustomDistributionRandomNumbers_set_custom_distribution(self, func, fixed_pars, pars)

    def __call__(self):
        return _CosmoBolognaLib.CustomDistributionRandomNumbers___call__(self)
CustomDistributionRandomNumbers_swigregister = _CosmoBolognaLib.CustomDistributionRandomNumbers_swigregister
CustomDistributionRandomNumbers_swigregister(CustomDistributionRandomNumbers)


def interpolated(_xx, xx, yy, type):
    return _CosmoBolognaLib.interpolated(_xx, xx, yy, type)
interpolated = _CosmoBolognaLib.interpolated

def interpolated_2D(_x1, _x2, x1, x2, yy, type):
    return _CosmoBolognaLib.interpolated_2D(_x1, _x2, x1, x2, yy, type)
interpolated_2D = _CosmoBolognaLib.interpolated_2D

def Filter(r, rc):
    return _CosmoBolognaLib.Filter(r, rc)
Filter = _CosmoBolognaLib.Filter

def legendre_polynomial(mu, l):
    return _CosmoBolognaLib.legendre_polynomial(mu, l)
legendre_polynomial = _CosmoBolognaLib.legendre_polynomial

def legendre_polynomial_integral(mu, params):
    return _CosmoBolognaLib.legendre_polynomial_integral(mu, params)
legendre_polynomial_integral = _CosmoBolognaLib.legendre_polynomial_integral

def Legendre_polynomial_mu_average(*args):
    return _CosmoBolognaLib.Legendre_polynomial_mu_average(*args)
Legendre_polynomial_mu_average = _CosmoBolognaLib.Legendre_polynomial_mu_average

def Legendre_polynomial_theta_average(theta_min, theta_max, ll):
    return _CosmoBolognaLib.Legendre_polynomial_theta_average(theta_min, theta_max, ll)
Legendre_polynomial_theta_average = _CosmoBolognaLib.Legendre_polynomial_theta_average

def Legendre_polynomial_triangles_average(r12_min, r12_max, r13_min, r13_max, r23_min, r23_max, ll, rel_err=1.e-5, abs_err=1.e-8, nevals=100):
    return _CosmoBolognaLib.Legendre_polynomial_triangles_average(r12_min, r12_max, r13_min, r13_max, r23_min, r23_max, ll, rel_err, abs_err, nevals)
Legendre_polynomial_triangles_average = _CosmoBolognaLib.Legendre_polynomial_triangles_average

def spherical_harmonics(*args):
    return _CosmoBolognaLib.spherical_harmonics(*args)
spherical_harmonics = _CosmoBolognaLib.spherical_harmonics

def spherical_harmonics_array(lmax, xx, yy, zz):
    return _CosmoBolognaLib.spherical_harmonics_array(lmax, xx, yy, zz)
spherical_harmonics_array = _CosmoBolognaLib.spherical_harmonics_array

def j0(xx):
    return _CosmoBolognaLib.j0(xx)
j0 = _CosmoBolognaLib.j0

def j2(xx):
    return _CosmoBolognaLib.j2(xx)
j2 = _CosmoBolognaLib.j2

def j4(xx):
    return _CosmoBolognaLib.j4(xx)
j4 = _CosmoBolognaLib.j4

def jl(xx, order):
    return _CosmoBolognaLib.jl(xx, order)
jl = _CosmoBolognaLib.jl

def j0_distance_average(kk, r_down, r_up):
    return _CosmoBolognaLib.j0_distance_average(kk, r_down, r_up)
j0_distance_average = _CosmoBolognaLib.j0_distance_average

def j2_distance_average(kk, r_down, r_up):
    return _CosmoBolognaLib.j2_distance_average(kk, r_down, r_up)
j2_distance_average = _CosmoBolognaLib.j2_distance_average

def jl_spherical_integrand(rr, params):
    return _CosmoBolognaLib.jl_spherical_integrand(rr, params)
jl_spherical_integrand = _CosmoBolognaLib.jl_spherical_integrand

def jl_distance_average(kk, order, r_down, r_up):
    return _CosmoBolognaLib.jl_distance_average(kk, order, r_down, r_up)
jl_distance_average = _CosmoBolognaLib.jl_distance_average

def trapezoid_integration(xx, yy):
    return _CosmoBolognaLib.trapezoid_integration(xx, yy)
trapezoid_integration = _CosmoBolognaLib.trapezoid_integration

def gauleg(arg1, arg2, arg3, arg4, arg5):
    return _CosmoBolognaLib.gauleg(arg1, arg2, arg3, arg4, arg5)
gauleg = _CosmoBolognaLib.gauleg

def read_vector(*args):
    return _CosmoBolognaLib.read_vector(*args)
read_vector = _CosmoBolognaLib.read_vector

def read_matrix(*args):
    return _CosmoBolognaLib.read_matrix(*args)
read_matrix = _CosmoBolognaLib.read_matrix

def determinant_matrix(mat):
    return _CosmoBolognaLib.determinant_matrix(mat)
determinant_matrix = _CosmoBolognaLib.determinant_matrix

def invert_matrix(*args):
    return _CosmoBolognaLib.invert_matrix(*args)
invert_matrix = _CosmoBolognaLib.invert_matrix

def covariance_matrix(*args):
    return _CosmoBolognaLib.covariance_matrix(*args)
covariance_matrix = _CosmoBolognaLib.covariance_matrix

def read_invert_covariance(filecov, cov, cov_inv, i1, i2):
    return _CosmoBolognaLib.read_invert_covariance(filecov, cov, cov_inv, i1, i2)
read_invert_covariance = _CosmoBolognaLib.read_invert_covariance

def number_from_distribution(xx, fx, xmin, xmax, seed):
    return _CosmoBolognaLib.number_from_distribution(xx, fx, xmin, xmax, seed)
number_from_distribution = _CosmoBolognaLib.number_from_distribution

def vector_from_distribution(nRan, xx, fx, xmin, xmax, seed):
    return _CosmoBolognaLib.vector_from_distribution(nRan, xx, fx, xmin, xmax, seed)
vector_from_distribution = _CosmoBolognaLib.vector_from_distribution

def minimum_maximum_indexes(xx, x_min, x_max):
    return _CosmoBolognaLib.minimum_maximum_indexes(xx, x_min, x_max)
minimum_maximum_indexes = _CosmoBolognaLib.minimum_maximum_indexes

def generate_correlated_data(*args):
    return _CosmoBolognaLib.generate_correlated_data(*args)
generate_correlated_data = _CosmoBolognaLib.generate_correlated_data

def Average(*args):
    return _CosmoBolognaLib.Average(*args)
Average = _CosmoBolognaLib.Average

def Sigma(*args):
    return _CosmoBolognaLib.Sigma(*args)
Sigma = _CosmoBolognaLib.Sigma

def Quartile(Vect):
    return _CosmoBolognaLib.Quartile(Vect)
Quartile = _CosmoBolognaLib.Quartile

def Moment(data, ave, adev, sdev, var, skew, curt):
    return _CosmoBolognaLib.Moment(data, ave, adev, sdev, var, skew, curt)
Moment = _CosmoBolognaLib.Moment

def linearfit(xx):
    return _CosmoBolognaLib.linearfit(xx)
linearfit = _CosmoBolognaLib.linearfit

def quadratic(xx):
    return _CosmoBolognaLib.quadratic(xx)
quadratic = _CosmoBolognaLib.quadratic

def cubicfit(xx):
    return _CosmoBolognaLib.cubicfit(xx)
cubicfit = _CosmoBolognaLib.cubicfit

def closest_probability(xx, pp, par):
    return _CosmoBolognaLib.closest_probability(xx, pp, par)
closest_probability = _CosmoBolognaLib.closest_probability

def distribution_probability(xx, pp, par):
    return _CosmoBolognaLib.distribution_probability(xx, pp, par)
distribution_probability = _CosmoBolognaLib.distribution_probability

def measure_var_function(var, bin, V_min, V_max, Volume, Var, Phi, err):
    return _CosmoBolognaLib.measure_var_function(var, bin, V_min, V_max, Volume, Var, Phi, err)
measure_var_function = _CosmoBolognaLib.measure_var_function

def distribution(*args):
    return _CosmoBolognaLib.distribution(*args)
distribution = _CosmoBolognaLib.distribution

def MC_Int(*args):
    return _CosmoBolognaLib.MC_Int(*args)
MC_Int = _CosmoBolognaLib.MC_Int

def bin_function(file_grid, func, par, bin, x_min, x_max, binning, xx, yy):
    return _CosmoBolognaLib.bin_function(file_grid, func, par, bin, x_min, x_max, binning, xx, yy)
bin_function = _CosmoBolognaLib.bin_function

def bin_function_2D(file_grid, func, par, bin, x1_min, x1_max, x2_min, x2_max, binning, xx1, xx2, yy):
    return _CosmoBolognaLib.bin_function_2D(file_grid, func, par, bin, x1_min, x1_max, x2_min, x2_max, binning, xx1, xx2, yy)
bin_function_2D = _CosmoBolognaLib.bin_function_2D

def func_grid_lin(arg1, arg2):
    return _CosmoBolognaLib.func_grid_lin(arg1, arg2)
func_grid_lin = _CosmoBolognaLib.func_grid_lin

def func_grid_loglin(arg1, arg2):
    return _CosmoBolognaLib.func_grid_loglin(arg1, arg2)
func_grid_loglin = _CosmoBolognaLib.func_grid_loglin

def func_grid_log(arg1, arg2):
    return _CosmoBolognaLib.func_grid_log(arg1, arg2)
func_grid_log = _CosmoBolognaLib.func_grid_log

def func_grid_lin_2D(arg1, arg2, arg3):
    return _CosmoBolognaLib.func_grid_lin_2D(arg1, arg2, arg3)
func_grid_lin_2D = _CosmoBolognaLib.func_grid_lin_2D

def func_grid_loglin_2D(arg1, arg2, arg3):
    return _CosmoBolognaLib.func_grid_loglin_2D(arg1, arg2, arg3)
func_grid_loglin_2D = _CosmoBolognaLib.func_grid_loglin_2D

def func_grid_log_2D(arg1, arg2, arg3):
    return _CosmoBolognaLib.func_grid_log_2D(arg1, arg2, arg3)
func_grid_log_2D = _CosmoBolognaLib.func_grid_log_2D

def convolution(f1, f2, res, deltaX):
    return _CosmoBolognaLib.convolution(f1, f2, res, deltaX)
convolution = _CosmoBolognaLib.convolution

def degrees(*args):
    return _CosmoBolognaLib.degrees(*args)
degrees = _CosmoBolognaLib.degrees

def radians(*args):
    return _CosmoBolognaLib.radians(*args)
radians = _CosmoBolognaLib.radians

def arcseconds(*args):
    return _CosmoBolognaLib.arcseconds(*args)
arcseconds = _CosmoBolognaLib.arcseconds

def arcminutes(*args):
    return _CosmoBolognaLib.arcminutes(*args)
arcminutes = _CosmoBolognaLib.arcminutes

def converted_angle(*args):
    return _CosmoBolognaLib.converted_angle(*args)
converted_angle = _CosmoBolognaLib.converted_angle

def polar_coord(*args):
    return _CosmoBolognaLib.polar_coord(*args)
polar_coord = _CosmoBolognaLib.polar_coord

def cartesian_coord(*args):
    return _CosmoBolognaLib.cartesian_coord(*args)
cartesian_coord = _CosmoBolognaLib.cartesian_coord

def Euclidean_distance(x1, x2, y1, y2, z1, z2):
    return _CosmoBolognaLib.Euclidean_distance(x1, x2, y1, y2, z1, z2)
Euclidean_distance = _CosmoBolognaLib.Euclidean_distance

def perpendicular_distance(ra1, ra2, dec1, dec2, d1, d2):
    return _CosmoBolognaLib.perpendicular_distance(ra1, ra2, dec1, dec2, d1, d2)
perpendicular_distance = _CosmoBolognaLib.perpendicular_distance

def angular_distance(x1, x2, y1, y2, z1, z2):
    return _CosmoBolognaLib.angular_distance(x1, x2, y1, y2, z1, z2)
angular_distance = _CosmoBolognaLib.angular_distance

def haversine_distance(ra1, ra2, dec1, dec2):
    return _CosmoBolognaLib.haversine_distance(ra1, ra2, dec1, dec2)
haversine_distance = _CosmoBolognaLib.haversine_distance

def sdss_atbound(angle, minval, maxval):
    return _CosmoBolognaLib.sdss_atbound(angle, minval, maxval)
sdss_atbound = _CosmoBolognaLib.sdss_atbound

def sdss_atbound2(theta, phi):
    return _CosmoBolognaLib.sdss_atbound2(theta, phi)
sdss_atbound2 = _CosmoBolognaLib.sdss_atbound2

def eq2sdss(ra, dec, arg3, eta):
    return _CosmoBolognaLib.eq2sdss(ra, dec, arg3, eta)
eq2sdss = _CosmoBolognaLib.eq2sdss

def sdss2eq(arg1, eta, ra, dec):
    return _CosmoBolognaLib.sdss2eq(arg1, eta, ra, dec)
sdss2eq = _CosmoBolognaLib.sdss2eq

def sdss_stripe(eta, arg2, stripe, str_u):
    return _CosmoBolognaLib.sdss_stripe(eta, arg2, stripe, str_u)
sdss_stripe = _CosmoBolognaLib.sdss_stripe

def xi_from_Pk(*args):
    return _CosmoBolognaLib.xi_from_Pk(*args)
xi_from_Pk = _CosmoBolognaLib.xi_from_Pk

def Pk_from_xi(*args):
    return _CosmoBolognaLib.Pk_from_xi(*args)
Pk_from_xi = _CosmoBolognaLib.Pk_from_xi

def func_xi_GSL(arg1, arg2):
    return _CosmoBolognaLib.func_xi_GSL(arg1, arg2)
func_xi_GSL = _CosmoBolognaLib.func_xi_GSL

def func_SSM_GSL(arg1, arg2):
    return _CosmoBolognaLib.func_SSM_GSL(arg1, arg2)
func_SSM_GSL = _CosmoBolognaLib.func_SSM_GSL

def wp(*args):
    return _CosmoBolognaLib.wp(*args)
wp = _CosmoBolognaLib.wp

def sigmaR(RR, corrType, rr, corr):
    return _CosmoBolognaLib.sigmaR(RR, corrType, rr, corr)
sigmaR = _CosmoBolognaLib.sigmaR

def xi_projected_powerlaw(rp, r0, gamma):
    return _CosmoBolognaLib.xi_projected_powerlaw(rp, r0, gamma)
xi_projected_powerlaw = _CosmoBolognaLib.xi_projected_powerlaw

def xi_ratio(*args):
    return _CosmoBolognaLib.xi_ratio(*args)
xi_ratio = _CosmoBolognaLib.xi_ratio

def error_xi_ratio(beta, error_beta):
    return _CosmoBolognaLib.error_xi_ratio(beta, error_beta)
error_xi_ratio = _CosmoBolognaLib.error_xi_ratio

def barred_xi_direct(RR, rr, xi, rAPP=0., r0=-1., gamma=1.):
    return _CosmoBolognaLib.barred_xi_direct(RR, rr, xi, rAPP, r0, gamma)
barred_xi_direct = _CosmoBolognaLib.barred_xi_direct

def barred_xi__direct(RR, rr, xi, rAPP=0., r0=-1., gamma=1.):
    return _CosmoBolognaLib.barred_xi__direct(RR, rr, xi, rAPP, r0, gamma)
barred_xi__direct = _CosmoBolognaLib.barred_xi__direct

def barred_xi_(RR, rr, xi, rAPP=0., r0=-1., gamma=1.):
    return _CosmoBolognaLib.barred_xi_(RR, rr, xi, rAPP, r0, gamma)
barred_xi_ = _CosmoBolognaLib.barred_xi_

def barred_xi__(RR, rr, xi, rAPP=0., r0=-1., gamma=1.):
    return _CosmoBolognaLib.barred_xi__(RR, rr, xi, rAPP, r0, gamma)
barred_xi__ = _CosmoBolognaLib.barred_xi__

def multipole_xi0(*args):
    return _CosmoBolognaLib.multipole_xi0(*args)
multipole_xi0 = _CosmoBolognaLib.multipole_xi0

def multipole_xi2(*args):
    return _CosmoBolognaLib.multipole_xi2(*args)
multipole_xi2 = _CosmoBolognaLib.multipole_xi2

def multipole_xi4(*args):
    return _CosmoBolognaLib.multipole_xi4(*args)
multipole_xi4 = _CosmoBolognaLib.multipole_xi4

def error_multipole_xi0(*args):
    return _CosmoBolognaLib.error_multipole_xi0(*args)
error_multipole_xi0 = _CosmoBolognaLib.error_multipole_xi0

def error_multipole_xi2(*args):
    return _CosmoBolognaLib.error_multipole_xi2(*args)
error_multipole_xi2 = _CosmoBolognaLib.error_multipole_xi2

def error_multipole_xi4(*args):
    return _CosmoBolognaLib.error_multipole_xi4(*args)
error_multipole_xi4 = _CosmoBolognaLib.error_multipole_xi4

def multipoles(rr, pp, par):
    return _CosmoBolognaLib.multipoles(rr, pp, par)
multipoles = _CosmoBolognaLib.multipoles

def multipole_xi0_model(*args):
    return _CosmoBolognaLib.multipole_xi0_model(*args)
multipole_xi0_model = _CosmoBolognaLib.multipole_xi0_model

def multipole_xi2_model(beta, xi_real, xi_):
    return _CosmoBolognaLib.multipole_xi2_model(beta, xi_real, xi_)
multipole_xi2_model = _CosmoBolognaLib.multipole_xi2_model

def multipole_xi4_model(beta, xi_real, xi_, xi__):
    return _CosmoBolognaLib.multipole_xi4_model(beta, xi_real, xi_, xi__)
multipole_xi4_model = _CosmoBolognaLib.multipole_xi4_model

def xi2D_lin_model(*args):
    return _CosmoBolognaLib.xi2D_lin_model(*args)
xi2D_lin_model = _CosmoBolognaLib.xi2D_lin_model

def xi2D_model(*args):
    return _CosmoBolognaLib.xi2D_model(*args)
xi2D_model = _CosmoBolognaLib.xi2D_model

def f_v(*args):
    return _CosmoBolognaLib.f_v(*args)
f_v = _CosmoBolognaLib.f_v

def f_star(xx, f_g, k_star):
    return _CosmoBolognaLib.f_star(xx, f_g, k_star)
f_star = _CosmoBolognaLib.f_star

def b_nl(rr, bA, bB=10., bC=4.):
    return _CosmoBolognaLib.b_nl(rr, bA, bB, bC)
b_nl = _CosmoBolognaLib.b_nl

def relative_error_beta(bias, Volume, density):
    return _CosmoBolognaLib.relative_error_beta(bias, Volume, density)
relative_error_beta = _CosmoBolognaLib.relative_error_beta

def Pkl_Kaiser_integrand(mu, parameters):
    return _CosmoBolognaLib.Pkl_Kaiser_integrand(mu, parameters)
Pkl_Kaiser_integrand = _CosmoBolognaLib.Pkl_Kaiser_integrand

def sigma2_integrand(mu, parameters):
    return _CosmoBolognaLib.sigma2_integrand(mu, parameters)
sigma2_integrand = _CosmoBolognaLib.sigma2_integrand

def covariance_XiMultipoles_integrand(kk, parameters):
    return _CosmoBolognaLib.covariance_XiMultipoles_integrand(kk, parameters)
covariance_XiMultipoles_integrand = _CosmoBolognaLib.covariance_XiMultipoles_integrand

def XiMultipoles_integrand(kk, parameters):
    return _CosmoBolognaLib.XiMultipoles_integrand(kk, parameters)
XiMultipoles_integrand = _CosmoBolognaLib.XiMultipoles_integrand

def XiMultipoles_from_Xi2D_integrand(mu, parameters):
    return _CosmoBolognaLib.XiMultipoles_from_Xi2D_integrand(mu, parameters)
XiMultipoles_from_Xi2D_integrand = _CosmoBolognaLib.XiMultipoles_from_Xi2D_integrand

def Pkl_Kaiser_integral(order, bias, f):
    return _CosmoBolognaLib.Pkl_Kaiser_integral(order, bias, f)
Pkl_Kaiser_integral = _CosmoBolognaLib.Pkl_Kaiser_integral

def Pk0_Kaiser(kk, Pk, bias, f):
    return _CosmoBolognaLib.Pk0_Kaiser(kk, Pk, bias, f)
Pk0_Kaiser = _CosmoBolognaLib.Pk0_Kaiser

def Pk2_Kaiser(kk, Pk, bias, f):
    return _CosmoBolognaLib.Pk2_Kaiser(kk, Pk, bias, f)
Pk2_Kaiser = _CosmoBolognaLib.Pk2_Kaiser

def Pk4_Kaiser(kk, Pk, bias, f):
    return _CosmoBolognaLib.Pk4_Kaiser(kk, Pk, bias, f)
Pk4_Kaiser = _CosmoBolognaLib.Pk4_Kaiser

def Pkl_Kaiser(orders, kk, Pk, bias, f):
    return _CosmoBolognaLib.Pkl_Kaiser(orders, kk, Pk, bias, f)
Pkl_Kaiser = _CosmoBolognaLib.Pkl_Kaiser

def Xi0(r, kk, Pk0, k_cut=0.7, cut_pow=2, IntegrationMethod=1):
    return _CosmoBolognaLib.Xi0(r, kk, Pk0, k_cut, cut_pow, IntegrationMethod)
Xi0 = _CosmoBolognaLib.Xi0

def Xi2(rr, kk, Pk2, k_cut=0.58, cut_pow=4, IntegrationMethod=1):
    return _CosmoBolognaLib.Xi2(rr, kk, Pk2, k_cut, cut_pow, IntegrationMethod)
Xi2 = _CosmoBolognaLib.Xi2

def Xi4(rr, kk, Pk4, k_cut=0.6, cut_pow=2, IntegrationMethod=1):
    return _CosmoBolognaLib.Xi4(rr, kk, Pk4, k_cut, cut_pow, IntegrationMethod)
Xi4 = _CosmoBolognaLib.Xi4

def sigma2_k(nObjects, Volume, kk, Pk_multipoles, orders):
    return _CosmoBolognaLib.sigma2_k(nObjects, Volume, kk, Pk_multipoles, orders)
sigma2_k = _CosmoBolognaLib.sigma2_k

def Covariance_XiMultipoles(*args):
    return _CosmoBolognaLib.Covariance_XiMultipoles(*args)
Covariance_XiMultipoles = _CosmoBolognaLib.Covariance_XiMultipoles

def Covariance_XiWedges(*args):
    return _CosmoBolognaLib.Covariance_XiWedges(*args)
Covariance_XiWedges = _CosmoBolognaLib.Covariance_XiWedges
class STR_grid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_grid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_grid, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_xx"] = _CosmoBolognaLib.STR_grid__xx_set
    __swig_getmethods__["_xx"] = _CosmoBolognaLib.STR_grid__xx_get
    if _newclass:
        _xx = _swig_property(_CosmoBolognaLib.STR_grid__xx_get, _CosmoBolognaLib.STR_grid__xx_set)
    __swig_setmethods__["_yy"] = _CosmoBolognaLib.STR_grid__yy_set
    __swig_getmethods__["_yy"] = _CosmoBolognaLib.STR_grid__yy_get
    if _newclass:
        _yy = _swig_property(_CosmoBolognaLib.STR_grid__yy_get, _CosmoBolognaLib.STR_grid__yy_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_grid()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_grid
    __del__ = lambda self: None
STR_grid_swigregister = _CosmoBolognaLib.STR_grid_swigregister
STR_grid_swigregister(STR_grid)

class STR_grid_2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_grid_2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_grid_2D, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_xx1"] = _CosmoBolognaLib.STR_grid_2D__xx1_set
    __swig_getmethods__["_xx1"] = _CosmoBolognaLib.STR_grid_2D__xx1_get
    if _newclass:
        _xx1 = _swig_property(_CosmoBolognaLib.STR_grid_2D__xx1_get, _CosmoBolognaLib.STR_grid_2D__xx1_set)
    __swig_setmethods__["_xx2"] = _CosmoBolognaLib.STR_grid_2D__xx2_set
    __swig_getmethods__["_xx2"] = _CosmoBolognaLib.STR_grid_2D__xx2_get
    if _newclass:
        _xx2 = _swig_property(_CosmoBolognaLib.STR_grid_2D__xx2_get, _CosmoBolognaLib.STR_grid_2D__xx2_set)
    __swig_setmethods__["_yy"] = _CosmoBolognaLib.STR_grid_2D__yy_set
    __swig_getmethods__["_yy"] = _CosmoBolognaLib.STR_grid_2D__yy_get
    if _newclass:
        _yy = _swig_property(_CosmoBolognaLib.STR_grid_2D__yy_get, _CosmoBolognaLib.STR_grid_2D__yy_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_grid_2D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_grid_2D
    __del__ = lambda self: None
STR_grid_2D_swigregister = _CosmoBolognaLib.STR_grid_2D_swigregister
STR_grid_2D_swigregister(STR_grid_2D)

class STR_xi0_model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_xi0_model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_xi0_model, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bias_sigma8"] = _CosmoBolognaLib.STR_xi0_model_bias_sigma8_set
    __swig_getmethods__["bias_sigma8"] = _CosmoBolognaLib.STR_xi0_model_bias_sigma8_get
    if _newclass:
        bias_sigma8 = _swig_property(_CosmoBolognaLib.STR_xi0_model_bias_sigma8_get, _CosmoBolognaLib.STR_xi0_model_bias_sigma8_set)
    __swig_setmethods__["sigma8z"] = _CosmoBolognaLib.STR_xi0_model_sigma8z_set
    __swig_getmethods__["sigma8z"] = _CosmoBolognaLib.STR_xi0_model_sigma8z_get
    if _newclass:
        sigma8z = _swig_property(_CosmoBolognaLib.STR_xi0_model_sigma8z_get, _CosmoBolognaLib.STR_xi0_model_sigma8z_set)
    __swig_setmethods__["xi_DM"] = _CosmoBolognaLib.STR_xi0_model_xi_DM_set
    __swig_getmethods__["xi_DM"] = _CosmoBolognaLib.STR_xi0_model_xi_DM_get
    if _newclass:
        xi_DM = _swig_property(_CosmoBolognaLib.STR_xi0_model_xi_DM_get, _CosmoBolognaLib.STR_xi0_model_xi_DM_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_xi0_model()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_xi0_model
    __del__ = lambda self: None
STR_xi0_model_swigregister = _CosmoBolognaLib.STR_xi0_model_swigregister
STR_xi0_model_swigregister(STR_xi0_model)

class STR_xi2D_model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_xi2D_model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_xi2D_model, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rp"] = _CosmoBolognaLib.STR_xi2D_model_rp_set
    __swig_getmethods__["rp"] = _CosmoBolognaLib.STR_xi2D_model_rp_get
    if _newclass:
        rp = _swig_property(_CosmoBolognaLib.STR_xi2D_model_rp_get, _CosmoBolognaLib.STR_xi2D_model_rp_set)
    __swig_setmethods__["pi"] = _CosmoBolognaLib.STR_xi2D_model_pi_set
    __swig_getmethods__["pi"] = _CosmoBolognaLib.STR_xi2D_model_pi_get
    if _newclass:
        pi = _swig_property(_CosmoBolognaLib.STR_xi2D_model_pi_get, _CosmoBolognaLib.STR_xi2D_model_pi_set)
    __swig_setmethods__["xi_real"] = _CosmoBolognaLib.STR_xi2D_model_xi_real_set
    __swig_getmethods__["xi_real"] = _CosmoBolognaLib.STR_xi2D_model_xi_real_get
    if _newclass:
        xi_real = _swig_property(_CosmoBolognaLib.STR_xi2D_model_xi_real_get, _CosmoBolognaLib.STR_xi2D_model_xi_real_set)
    __swig_setmethods__["xi_"] = _CosmoBolognaLib.STR_xi2D_model_xi__set
    __swig_getmethods__["xi_"] = _CosmoBolognaLib.STR_xi2D_model_xi__get
    if _newclass:
        xi_ = _swig_property(_CosmoBolognaLib.STR_xi2D_model_xi__get, _CosmoBolognaLib.STR_xi2D_model_xi__set)
    __swig_setmethods__["xi__"] = _CosmoBolognaLib.STR_xi2D_model_xi___set
    __swig_getmethods__["xi__"] = _CosmoBolognaLib.STR_xi2D_model_xi___get
    if _newclass:
        xi__ = _swig_property(_CosmoBolognaLib.STR_xi2D_model_xi___get, _CosmoBolognaLib.STR_xi2D_model_xi___set)
    __swig_setmethods__["P2"] = _CosmoBolognaLib.STR_xi2D_model_P2_set
    __swig_getmethods__["P2"] = _CosmoBolognaLib.STR_xi2D_model_P2_get
    if _newclass:
        P2 = _swig_property(_CosmoBolognaLib.STR_xi2D_model_P2_get, _CosmoBolognaLib.STR_xi2D_model_P2_set)
    __swig_setmethods__["P4"] = _CosmoBolognaLib.STR_xi2D_model_P4_set
    __swig_getmethods__["P4"] = _CosmoBolognaLib.STR_xi2D_model_P4_get
    if _newclass:
        P4 = _swig_property(_CosmoBolognaLib.STR_xi2D_model_P4_get, _CosmoBolognaLib.STR_xi2D_model_P4_set)
    __swig_setmethods__["vel"] = _CosmoBolognaLib.STR_xi2D_model_vel_set
    __swig_getmethods__["vel"] = _CosmoBolognaLib.STR_xi2D_model_vel_get
    if _newclass:
        vel = _swig_property(_CosmoBolognaLib.STR_xi2D_model_vel_get, _CosmoBolognaLib.STR_xi2D_model_vel_set)
    __swig_setmethods__["lim_index_fit"] = _CosmoBolognaLib.STR_xi2D_model_lim_index_fit_set
    __swig_getmethods__["lim_index_fit"] = _CosmoBolognaLib.STR_xi2D_model_lim_index_fit_get
    if _newclass:
        lim_index_fit = _swig_property(_CosmoBolognaLib.STR_xi2D_model_lim_index_fit_get, _CosmoBolognaLib.STR_xi2D_model_lim_index_fit_set)
    __swig_setmethods__["type"] = _CosmoBolognaLib.STR_xi2D_model_type_set
    __swig_getmethods__["type"] = _CosmoBolognaLib.STR_xi2D_model_type_get
    if _newclass:
        type = _swig_property(_CosmoBolognaLib.STR_xi2D_model_type_get, _CosmoBolognaLib.STR_xi2D_model_type_set)
    __swig_setmethods__["step_v"] = _CosmoBolognaLib.STR_xi2D_model_step_v_set
    __swig_getmethods__["step_v"] = _CosmoBolognaLib.STR_xi2D_model_step_v_get
    if _newclass:
        step_v = _swig_property(_CosmoBolognaLib.STR_xi2D_model_step_v_get, _CosmoBolognaLib.STR_xi2D_model_step_v_set)
    __swig_setmethods__["FV"] = _CosmoBolognaLib.STR_xi2D_model_FV_set
    __swig_getmethods__["FV"] = _CosmoBolognaLib.STR_xi2D_model_FV_get
    if _newclass:
        FV = _swig_property(_CosmoBolognaLib.STR_xi2D_model_FV_get, _CosmoBolognaLib.STR_xi2D_model_FV_set)
    __swig_setmethods__["dim"] = _CosmoBolognaLib.STR_xi2D_model_dim_set
    __swig_getmethods__["dim"] = _CosmoBolognaLib.STR_xi2D_model_dim_get
    if _newclass:
        dim = _swig_property(_CosmoBolognaLib.STR_xi2D_model_dim_get, _CosmoBolognaLib.STR_xi2D_model_dim_set)
    __swig_setmethods__["delta_v"] = _CosmoBolognaLib.STR_xi2D_model_delta_v_set
    __swig_getmethods__["delta_v"] = _CosmoBolognaLib.STR_xi2D_model_delta_v_get
    if _newclass:
        delta_v = _swig_property(_CosmoBolognaLib.STR_xi2D_model_delta_v_get, _CosmoBolognaLib.STR_xi2D_model_delta_v_set)
    __swig_setmethods__["bias_nl"] = _CosmoBolognaLib.STR_xi2D_model_bias_nl_set
    __swig_getmethods__["bias_nl"] = _CosmoBolognaLib.STR_xi2D_model_bias_nl_get
    if _newclass:
        bias_nl = _swig_property(_CosmoBolognaLib.STR_xi2D_model_bias_nl_get, _CosmoBolognaLib.STR_xi2D_model_bias_nl_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_xi2D_model()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_xi2D_model
    __del__ = lambda self: None
STR_xi2D_model_swigregister = _CosmoBolognaLib.STR_xi2D_model_swigregister
STR_xi2D_model_swigregister(STR_xi2D_model)

class STR_xi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_xi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_xi, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rr"] = _CosmoBolognaLib.STR_xi_rr_set
    __swig_getmethods__["rr"] = _CosmoBolognaLib.STR_xi_rr_get
    if _newclass:
        rr = _swig_property(_CosmoBolognaLib.STR_xi_rr_get, _CosmoBolognaLib.STR_xi_rr_set)
    __swig_setmethods__["aa"] = _CosmoBolognaLib.STR_xi_aa_set
    __swig_getmethods__["aa"] = _CosmoBolognaLib.STR_xi_aa_get
    if _newclass:
        aa = _swig_property(_CosmoBolognaLib.STR_xi_aa_get, _CosmoBolognaLib.STR_xi_aa_set)
    __swig_setmethods__["lgkk"] = _CosmoBolognaLib.STR_xi_lgkk_set
    __swig_getmethods__["lgkk"] = _CosmoBolognaLib.STR_xi_lgkk_get
    if _newclass:
        lgkk = _swig_property(_CosmoBolognaLib.STR_xi_lgkk_get, _CosmoBolognaLib.STR_xi_lgkk_set)
    __swig_setmethods__["lgPk"] = _CosmoBolognaLib.STR_xi_lgPk_set
    __swig_getmethods__["lgPk"] = _CosmoBolognaLib.STR_xi_lgPk_get
    if _newclass:
        lgPk = _swig_property(_CosmoBolognaLib.STR_xi_lgPk_get, _CosmoBolognaLib.STR_xi_lgPk_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_xi()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_xi
    __del__ = lambda self: None
STR_xi_swigregister = _CosmoBolognaLib.STR_xi_swigregister
STR_xi_swigregister(STR_xi)

class STR_SSM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_SSM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_SSM, name)
    __repr__ = _swig_repr
    __swig_setmethods__["unit"] = _CosmoBolognaLib.STR_SSM_unit_set
    __swig_getmethods__["unit"] = _CosmoBolognaLib.STR_SSM_unit_get
    if _newclass:
        unit = _swig_property(_CosmoBolognaLib.STR_SSM_unit_get, _CosmoBolognaLib.STR_SSM_unit_set)
    __swig_setmethods__["hh"] = _CosmoBolognaLib.STR_SSM_hh_set
    __swig_getmethods__["hh"] = _CosmoBolognaLib.STR_SSM_hh_get
    if _newclass:
        hh = _swig_property(_CosmoBolognaLib.STR_SSM_hh_get, _CosmoBolognaLib.STR_SSM_hh_set)
    __swig_setmethods__["mass"] = _CosmoBolognaLib.STR_SSM_mass_set
    __swig_getmethods__["mass"] = _CosmoBolognaLib.STR_SSM_mass_get
    if _newclass:
        mass = _swig_property(_CosmoBolognaLib.STR_SSM_mass_get, _CosmoBolognaLib.STR_SSM_mass_set)
    __swig_setmethods__["rho"] = _CosmoBolognaLib.STR_SSM_rho_set
    __swig_getmethods__["rho"] = _CosmoBolognaLib.STR_SSM_rho_get
    if _newclass:
        rho = _swig_property(_CosmoBolognaLib.STR_SSM_rho_get, _CosmoBolognaLib.STR_SSM_rho_set)
    __swig_setmethods__["n_spec"] = _CosmoBolognaLib.STR_SSM_n_spec_set
    __swig_getmethods__["n_spec"] = _CosmoBolognaLib.STR_SSM_n_spec_get
    if _newclass:
        n_spec = _swig_property(_CosmoBolognaLib.STR_SSM_n_spec_get, _CosmoBolognaLib.STR_SSM_n_spec_set)
    __swig_setmethods__["lgkk"] = _CosmoBolognaLib.STR_SSM_lgkk_set
    __swig_getmethods__["lgkk"] = _CosmoBolognaLib.STR_SSM_lgkk_get
    if _newclass:
        lgkk = _swig_property(_CosmoBolognaLib.STR_SSM_lgkk_get, _CosmoBolognaLib.STR_SSM_lgkk_set)
    __swig_setmethods__["lgPk"] = _CosmoBolognaLib.STR_SSM_lgPk_set
    __swig_getmethods__["lgPk"] = _CosmoBolognaLib.STR_SSM_lgPk_get
    if _newclass:
        lgPk = _swig_property(_CosmoBolognaLib.STR_SSM_lgPk_get, _CosmoBolognaLib.STR_SSM_lgPk_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_SSM()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_SSM
    __del__ = lambda self: None
STR_SSM_swigregister = _CosmoBolognaLib.STR_SSM_swigregister
STR_SSM_swigregister(STR_SSM)

class STR_jl_distance_average(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_jl_distance_average, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_jl_distance_average, name)
    __repr__ = _swig_repr
    __swig_setmethods__["order"] = _CosmoBolognaLib.STR_jl_distance_average_order_set
    __swig_getmethods__["order"] = _CosmoBolognaLib.STR_jl_distance_average_order_get
    if _newclass:
        order = _swig_property(_CosmoBolognaLib.STR_jl_distance_average_order_get, _CosmoBolognaLib.STR_jl_distance_average_order_set)
    __swig_setmethods__["k"] = _CosmoBolognaLib.STR_jl_distance_average_k_set
    __swig_getmethods__["k"] = _CosmoBolognaLib.STR_jl_distance_average_k_get
    if _newclass:
        k = _swig_property(_CosmoBolognaLib.STR_jl_distance_average_k_get, _CosmoBolognaLib.STR_jl_distance_average_k_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_jl_distance_average()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_jl_distance_average
    __del__ = lambda self: None
STR_jl_distance_average_swigregister = _CosmoBolognaLib.STR_jl_distance_average_swigregister
STR_jl_distance_average_swigregister(STR_jl_distance_average)

class STR_Pl_mu_integral(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_Pl_mu_integral, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_Pl_mu_integral, name)
    __repr__ = _swig_repr
    __swig_setmethods__["order"] = _CosmoBolognaLib.STR_Pl_mu_integral_order_set
    __swig_getmethods__["order"] = _CosmoBolognaLib.STR_Pl_mu_integral_order_get
    if _newclass:
        order = _swig_property(_CosmoBolognaLib.STR_Pl_mu_integral_order_get, _CosmoBolognaLib.STR_Pl_mu_integral_order_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_Pl_mu_integral()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_Pl_mu_integral
    __del__ = lambda self: None
STR_Pl_mu_integral_swigregister = _CosmoBolognaLib.STR_Pl_mu_integral_swigregister
STR_Pl_mu_integral_swigregister(STR_Pl_mu_integral)

class STR_Pkl_Kaiser_integrand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_Pkl_Kaiser_integrand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_Pkl_Kaiser_integrand, name)
    __repr__ = _swig_repr
    __swig_setmethods__["l"] = _CosmoBolognaLib.STR_Pkl_Kaiser_integrand_l_set
    __swig_getmethods__["l"] = _CosmoBolognaLib.STR_Pkl_Kaiser_integrand_l_get
    if _newclass:
        l = _swig_property(_CosmoBolognaLib.STR_Pkl_Kaiser_integrand_l_get, _CosmoBolognaLib.STR_Pkl_Kaiser_integrand_l_set)
    __swig_setmethods__["Pk"] = _CosmoBolognaLib.STR_Pkl_Kaiser_integrand_Pk_set
    __swig_getmethods__["Pk"] = _CosmoBolognaLib.STR_Pkl_Kaiser_integrand_Pk_get
    if _newclass:
        Pk = _swig_property(_CosmoBolognaLib.STR_Pkl_Kaiser_integrand_Pk_get, _CosmoBolognaLib.STR_Pkl_Kaiser_integrand_Pk_set)
    __swig_setmethods__["bias"] = _CosmoBolognaLib.STR_Pkl_Kaiser_integrand_bias_set
    __swig_getmethods__["bias"] = _CosmoBolognaLib.STR_Pkl_Kaiser_integrand_bias_get
    if _newclass:
        bias = _swig_property(_CosmoBolognaLib.STR_Pkl_Kaiser_integrand_bias_get, _CosmoBolognaLib.STR_Pkl_Kaiser_integrand_bias_set)
    __swig_setmethods__["f"] = _CosmoBolognaLib.STR_Pkl_Kaiser_integrand_f_set
    __swig_getmethods__["f"] = _CosmoBolognaLib.STR_Pkl_Kaiser_integrand_f_get
    if _newclass:
        f = _swig_property(_CosmoBolognaLib.STR_Pkl_Kaiser_integrand_f_get, _CosmoBolognaLib.STR_Pkl_Kaiser_integrand_f_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_Pkl_Kaiser_integrand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_Pkl_Kaiser_integrand
    __del__ = lambda self: None
STR_Pkl_Kaiser_integrand_swigregister = _CosmoBolognaLib.STR_Pkl_Kaiser_integrand_swigregister
STR_Pkl_Kaiser_integrand_swigregister(STR_Pkl_Kaiser_integrand)

class STR_closest_probability(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_closest_probability, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_closest_probability, name)
    __repr__ = _swig_repr
    __swig_setmethods__["values"] = _CosmoBolognaLib.STR_closest_probability_values_set
    __swig_getmethods__["values"] = _CosmoBolognaLib.STR_closest_probability_values_get
    if _newclass:
        values = _swig_property(_CosmoBolognaLib.STR_closest_probability_values_get, _CosmoBolognaLib.STR_closest_probability_values_set)
    __swig_setmethods__["weights"] = _CosmoBolognaLib.STR_closest_probability_weights_set
    __swig_getmethods__["weights"] = _CosmoBolognaLib.STR_closest_probability_weights_get
    if _newclass:
        weights = _swig_property(_CosmoBolognaLib.STR_closest_probability_weights_get, _CosmoBolognaLib.STR_closest_probability_weights_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_closest_probability()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_closest_probability
    __del__ = lambda self: None
STR_closest_probability_swigregister = _CosmoBolognaLib.STR_closest_probability_swigregister
STR_closest_probability_swigregister(STR_closest_probability)

class STR_distribution_probability(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_distribution_probability, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_distribution_probability, name)
    __repr__ = _swig_repr
    __swig_setmethods__["func"] = _CosmoBolognaLib.STR_distribution_probability_func_set
    __swig_getmethods__["func"] = _CosmoBolognaLib.STR_distribution_probability_func_get
    if _newclass:
        func = _swig_property(_CosmoBolognaLib.STR_distribution_probability_func_get, _CosmoBolognaLib.STR_distribution_probability_func_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_distribution_probability()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_distribution_probability
    __del__ = lambda self: None
STR_distribution_probability_swigregister = _CosmoBolognaLib.STR_distribution_probability_swigregister
STR_distribution_probability_swigregister(STR_distribution_probability)

class STR_sigma2_integrand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_sigma2_integrand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_sigma2_integrand, name)
    __repr__ = _swig_repr
    __swig_setmethods__["l1"] = _CosmoBolognaLib.STR_sigma2_integrand_l1_set
    __swig_getmethods__["l1"] = _CosmoBolognaLib.STR_sigma2_integrand_l1_get
    if _newclass:
        l1 = _swig_property(_CosmoBolognaLib.STR_sigma2_integrand_l1_get, _CosmoBolognaLib.STR_sigma2_integrand_l1_set)
    __swig_setmethods__["l2"] = _CosmoBolognaLib.STR_sigma2_integrand_l2_set
    __swig_getmethods__["l2"] = _CosmoBolognaLib.STR_sigma2_integrand_l2_get
    if _newclass:
        l2 = _swig_property(_CosmoBolognaLib.STR_sigma2_integrand_l2_get, _CosmoBolognaLib.STR_sigma2_integrand_l2_set)
    __swig_setmethods__["density_inv"] = _CosmoBolognaLib.STR_sigma2_integrand_density_inv_set
    __swig_getmethods__["density_inv"] = _CosmoBolognaLib.STR_sigma2_integrand_density_inv_get
    if _newclass:
        density_inv = _swig_property(_CosmoBolognaLib.STR_sigma2_integrand_density_inv_get, _CosmoBolognaLib.STR_sigma2_integrand_density_inv_set)
    __swig_setmethods__["kk"] = _CosmoBolognaLib.STR_sigma2_integrand_kk_set
    __swig_getmethods__["kk"] = _CosmoBolognaLib.STR_sigma2_integrand_kk_get
    if _newclass:
        kk = _swig_property(_CosmoBolognaLib.STR_sigma2_integrand_kk_get, _CosmoBolognaLib.STR_sigma2_integrand_kk_set)
    __swig_setmethods__["orders"] = _CosmoBolognaLib.STR_sigma2_integrand_orders_set
    __swig_getmethods__["orders"] = _CosmoBolognaLib.STR_sigma2_integrand_orders_get
    if _newclass:
        orders = _swig_property(_CosmoBolognaLib.STR_sigma2_integrand_orders_get, _CosmoBolognaLib.STR_sigma2_integrand_orders_set)
    __swig_setmethods__["Pk_multipoles_interp"] = _CosmoBolognaLib.STR_sigma2_integrand_Pk_multipoles_interp_set
    __swig_getmethods__["Pk_multipoles_interp"] = _CosmoBolognaLib.STR_sigma2_integrand_Pk_multipoles_interp_get
    if _newclass:
        Pk_multipoles_interp = _swig_property(_CosmoBolognaLib.STR_sigma2_integrand_Pk_multipoles_interp_get, _CosmoBolognaLib.STR_sigma2_integrand_Pk_multipoles_interp_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_sigma2_integrand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_sigma2_integrand
    __del__ = lambda self: None
STR_sigma2_integrand_swigregister = _CosmoBolognaLib.STR_sigma2_integrand_swigregister
STR_sigma2_integrand_swigregister(STR_sigma2_integrand)

class STR_XiMultipoles_integrand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_XiMultipoles_integrand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_XiMultipoles_integrand, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _CosmoBolognaLib.STR_XiMultipoles_integrand_r_set
    __swig_getmethods__["r"] = _CosmoBolognaLib.STR_XiMultipoles_integrand_r_get
    if _newclass:
        r = _swig_property(_CosmoBolognaLib.STR_XiMultipoles_integrand_r_get, _CosmoBolognaLib.STR_XiMultipoles_integrand_r_set)
    __swig_setmethods__["l"] = _CosmoBolognaLib.STR_XiMultipoles_integrand_l_set
    __swig_getmethods__["l"] = _CosmoBolognaLib.STR_XiMultipoles_integrand_l_get
    if _newclass:
        l = _swig_property(_CosmoBolognaLib.STR_XiMultipoles_integrand_l_get, _CosmoBolognaLib.STR_XiMultipoles_integrand_l_set)
    __swig_setmethods__["Pkl"] = _CosmoBolognaLib.STR_XiMultipoles_integrand_Pkl_set
    __swig_getmethods__["Pkl"] = _CosmoBolognaLib.STR_XiMultipoles_integrand_Pkl_get
    if _newclass:
        Pkl = _swig_property(_CosmoBolognaLib.STR_XiMultipoles_integrand_Pkl_get, _CosmoBolognaLib.STR_XiMultipoles_integrand_Pkl_set)
    __swig_setmethods__["k_cut"] = _CosmoBolognaLib.STR_XiMultipoles_integrand_k_cut_set
    __swig_getmethods__["k_cut"] = _CosmoBolognaLib.STR_XiMultipoles_integrand_k_cut_get
    if _newclass:
        k_cut = _swig_property(_CosmoBolognaLib.STR_XiMultipoles_integrand_k_cut_get, _CosmoBolognaLib.STR_XiMultipoles_integrand_k_cut_set)
    __swig_setmethods__["cut_pow"] = _CosmoBolognaLib.STR_XiMultipoles_integrand_cut_pow_set
    __swig_getmethods__["cut_pow"] = _CosmoBolognaLib.STR_XiMultipoles_integrand_cut_pow_get
    if _newclass:
        cut_pow = _swig_property(_CosmoBolognaLib.STR_XiMultipoles_integrand_cut_pow_get, _CosmoBolognaLib.STR_XiMultipoles_integrand_cut_pow_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_XiMultipoles_integrand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_XiMultipoles_integrand
    __del__ = lambda self: None
STR_XiMultipoles_integrand_swigregister = _CosmoBolognaLib.STR_XiMultipoles_integrand_swigregister
STR_XiMultipoles_integrand_swigregister(STR_XiMultipoles_integrand)

class STR_xi2D_smu_integrand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_xi2D_smu_integrand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_xi2D_smu_integrand, name)
    __repr__ = _swig_repr
    __swig_setmethods__["func"] = _CosmoBolognaLib.STR_xi2D_smu_integrand_func_set
    __swig_getmethods__["func"] = _CosmoBolognaLib.STR_xi2D_smu_integrand_func_get
    if _newclass:
        func = _swig_property(_CosmoBolognaLib.STR_xi2D_smu_integrand_func_get, _CosmoBolognaLib.STR_xi2D_smu_integrand_func_set)
    __swig_setmethods__["order"] = _CosmoBolognaLib.STR_xi2D_smu_integrand_order_set
    __swig_getmethods__["order"] = _CosmoBolognaLib.STR_xi2D_smu_integrand_order_get
    if _newclass:
        order = _swig_property(_CosmoBolognaLib.STR_xi2D_smu_integrand_order_get, _CosmoBolognaLib.STR_xi2D_smu_integrand_order_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_xi2D_smu_integrand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_xi2D_smu_integrand
    __del__ = lambda self: None
STR_xi2D_smu_integrand_swigregister = _CosmoBolognaLib.STR_xi2D_smu_integrand_swigregister
STR_xi2D_smu_integrand_swigregister(STR_xi2D_smu_integrand)

class STR_covariance_XiMultipoles_integrand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_covariance_XiMultipoles_integrand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_covariance_XiMultipoles_integrand, name)
    __repr__ = _swig_repr
    __swig_setmethods__["s2"] = _CosmoBolognaLib.STR_covariance_XiMultipoles_integrand_s2_set
    __swig_getmethods__["s2"] = _CosmoBolognaLib.STR_covariance_XiMultipoles_integrand_s2_get
    if _newclass:
        s2 = _swig_property(_CosmoBolognaLib.STR_covariance_XiMultipoles_integrand_s2_get, _CosmoBolognaLib.STR_covariance_XiMultipoles_integrand_s2_set)
    __swig_setmethods__["jl1r1"] = _CosmoBolognaLib.STR_covariance_XiMultipoles_integrand_jl1r1_set
    __swig_getmethods__["jl1r1"] = _CosmoBolognaLib.STR_covariance_XiMultipoles_integrand_jl1r1_get
    if _newclass:
        jl1r1 = _swig_property(_CosmoBolognaLib.STR_covariance_XiMultipoles_integrand_jl1r1_get, _CosmoBolognaLib.STR_covariance_XiMultipoles_integrand_jl1r1_set)
    __swig_setmethods__["jl2r2"] = _CosmoBolognaLib.STR_covariance_XiMultipoles_integrand_jl2r2_set
    __swig_getmethods__["jl2r2"] = _CosmoBolognaLib.STR_covariance_XiMultipoles_integrand_jl2r2_get
    if _newclass:
        jl2r2 = _swig_property(_CosmoBolognaLib.STR_covariance_XiMultipoles_integrand_jl2r2_get, _CosmoBolognaLib.STR_covariance_XiMultipoles_integrand_jl2r2_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_covariance_XiMultipoles_integrand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_covariance_XiMultipoles_integrand
    __del__ = lambda self: None
STR_covariance_XiMultipoles_integrand_swigregister = _CosmoBolognaLib.STR_covariance_XiMultipoles_integrand_swigregister
STR_covariance_XiMultipoles_integrand_swigregister(STR_covariance_XiMultipoles_integrand)


def Xi02_AP(*args):
    return _CosmoBolognaLib.Xi02_AP(*args)
Xi02_AP = _CosmoBolognaLib.Xi02_AP

def Xi024_AP(*args):
    return _CosmoBolognaLib.Xi024_AP(*args)
Xi024_AP = _CosmoBolognaLib.Xi024_AP

def XiWedges_AP(*args):
    return _CosmoBolognaLib.XiWedges_AP(*args)
XiWedges_AP = _CosmoBolognaLib.XiWedges_AP
DataType__1D_ = _CosmoBolognaLib.DataType__1D_
DataType__2D_ = _CosmoBolognaLib.DataType__2D_
DataType__1D_collection_ = _CosmoBolognaLib.DataType__1D_collection_
DataType__1D_extra_ = _CosmoBolognaLib.DataType__1D_extra_
DataType__2D_extra_ = _CosmoBolognaLib.DataType__2D_extra_

def DataTypeNames():
    return _CosmoBolognaLib.DataTypeNames()
DataTypeNames = _CosmoBolognaLib.DataTypeNames
class Data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Data, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_CosmoBolognaLib.Data_Create)
    else:
        Create = _CosmoBolognaLib.Data_Create

    def as_factory(self):
        return _CosmoBolognaLib.Data_as_factory(self)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Data(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Data
    __del__ = lambda self: None

    def correlation(self, *args):
        return _CosmoBolognaLib.Data_correlation(self, *args)

    def inverse_covariance(self, *args):
        return _CosmoBolognaLib.Data_inverse_covariance(self, *args)

    def reset(self, ndata):
        return _CosmoBolognaLib.Data_reset(self, ndata)

    def invert_covariance(self):
        return _CosmoBolognaLib.Data_invert_covariance(self)

    def xx(self, *args):
        return _CosmoBolognaLib.Data_xx(self, *args)

    def yy(self, *args):
        return _CosmoBolognaLib.Data_yy(self, *args)

    def IndipendentVariable(self, i=-1, j=-1):
        return _CosmoBolognaLib.Data_IndipendentVariable(self, i, j)

    def dataType(self):
        return _CosmoBolognaLib.Data_dataType(self)

    def data(self, *args):
        return _CosmoBolognaLib.Data_data(self, *args)

    def covariance(self, *args):
        return _CosmoBolognaLib.Data_covariance(self, *args)

    def get_data(self, *args):
        return _CosmoBolognaLib.Data_get_data(self, *args)

    def error(self, *args):
        return _CosmoBolognaLib.Data_error(self, *args)

    def get_error(self, *args):
        return _CosmoBolognaLib.Data_get_error(self, *args)

    def extra_info(self, *args):
        return _CosmoBolognaLib.Data_extra_info(self, *args)

    def set_yy(self, y):
        return _CosmoBolognaLib.Data_set_yy(self, y)

    def set_xx(self, *args):
        return _CosmoBolognaLib.Data_set_xx(self, *args)

    def set_extra_info(self, extra_info):
        return _CosmoBolognaLib.Data_set_extra_info(self, extra_info)

    def set_data(self, *args):
        return _CosmoBolognaLib.Data_set_data(self, *args)

    def set_error(self, *args):
        return _CosmoBolognaLib.Data_set_error(self, *args)

    def set_covariance(self, *args):
        return _CosmoBolognaLib.Data_set_covariance(self, *args)

    def ndata(self, *args):
        return _CosmoBolognaLib.Data_ndata(self, *args)

    def ndataset(self):
        return _CosmoBolognaLib.Data_ndataset(self)

    def xsize(self, *args):
        return _CosmoBolognaLib.Data_xsize(self, *args)

    def ysize(self):
        return _CosmoBolognaLib.Data_ysize(self)

    def read(self, *args):
        return _CosmoBolognaLib.Data_read(self, *args)

    def write(self, *args):
        return _CosmoBolognaLib.Data_write(self, *args)

    def write_covariance(self, dir, file, precision=10):
        return _CosmoBolognaLib.Data_write_covariance(self, dir, file, precision)

    def cut(self, *args):
        return _CosmoBolognaLib.Data_cut(self, *args)
Data_swigregister = _CosmoBolognaLib.Data_swigregister
Data_swigregister(Data)

def Data_Create(dataType):
    return _CosmoBolognaLib.Data_Create(dataType)
Data_Create = _CosmoBolognaLib.Data_Create


def join_dataset(dataset):
    return _CosmoBolognaLib.join_dataset(dataset)
join_dataset = _CosmoBolognaLib.join_dataset

def join_dataset_1D(dataset):
    return _CosmoBolognaLib.join_dataset_1D(dataset)
join_dataset_1D = _CosmoBolognaLib.join_dataset_1D

def join_dataset_1D_extra(dataset):
    return _CosmoBolognaLib.join_dataset_1D_extra(dataset)
join_dataset_1D_extra = _CosmoBolognaLib.join_dataset_1D_extra
class Data1D(Data):
    __swig_setmethods__ = {}
    for _s in [Data]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Data1D, name, value)
    __swig_getmethods__ = {}
    for _s in [Data]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Data1D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Data1D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Data1D
    __del__ = lambda self: None

    def as_factory(self):
        return _CosmoBolognaLib.Data1D_as_factory(self)

    def xsize(self):
        return _CosmoBolognaLib.Data1D_xsize(self)

    def xx(self, *args):
        return _CosmoBolognaLib.Data1D_xx(self, *args)

    def IndipendentVariable(self, i=-1, j=-1):
        return _CosmoBolognaLib.Data1D_IndipendentVariable(self, i, j)

    def get_data(self, data):
        return _CosmoBolognaLib.Data1D_get_data(self, data)

    def get_error(self, error):
        return _CosmoBolognaLib.Data1D_get_error(self, error)

    def set_xx(self, x):
        return _CosmoBolognaLib.Data1D_set_xx(self, x)

    def read(self, input_file, skip_nlines=0):
        return _CosmoBolognaLib.Data1D_read(self, input_file, skip_nlines)

    def write(self, dir, file, header, precision=10, rank=0):
        return _CosmoBolognaLib.Data1D_write(self, dir, file, header, precision, rank)

    def write_covariance(self, dir, file, precision=10):
        return _CosmoBolognaLib.Data1D_write_covariance(self, dir, file, precision)

    def cut(self, *args):
        return _CosmoBolognaLib.Data1D_cut(self, *args)
Data1D_swigregister = _CosmoBolognaLib.Data1D_swigregister
Data1D_swigregister(Data1D)

class Data2D(Data):
    __swig_setmethods__ = {}
    for _s in [Data]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Data2D, name, value)
    __swig_getmethods__ = {}
    for _s in [Data]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Data2D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Data2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Data2D
    __del__ = lambda self: None

    def as_factory(self):
        return _CosmoBolognaLib.Data2D_as_factory(self)

    def xsize(self):
        return _CosmoBolognaLib.Data2D_xsize(self)

    def ysize(self):
        return _CosmoBolognaLib.Data2D_ysize(self)

    def xx(self, *args):
        return _CosmoBolognaLib.Data2D_xx(self, *args)

    def yy(self, *args):
        return _CosmoBolognaLib.Data2D_yy(self, *args)

    def IndipendentVariable(self, i=-1, j=-1):
        return _CosmoBolognaLib.Data2D_IndipendentVariable(self, i, j)

    def data(self, i, j):
        return _CosmoBolognaLib.Data2D_data(self, i, j)

    def get_data(self, data):
        return _CosmoBolognaLib.Data2D_get_data(self, data)

    def error(self, i, j):
        return _CosmoBolognaLib.Data2D_error(self, i, j)

    def get_error(self, error):
        return _CosmoBolognaLib.Data2D_get_error(self, error)

    def set_xx(self, x):
        return _CosmoBolognaLib.Data2D_set_xx(self, x)

    def set_yy(self, y):
        return _CosmoBolognaLib.Data2D_set_yy(self, y)

    def read(self, input_file, skip_nlines=0):
        return _CosmoBolognaLib.Data2D_read(self, input_file, skip_nlines)

    def write(self, dir, file, header, full, precision=4, rank=0):
        return _CosmoBolognaLib.Data2D_write(self, dir, file, header, full, precision, rank)

    def write_covariance(self, dir, file, precision=10):
        return _CosmoBolognaLib.Data2D_write_covariance(self, dir, file, precision)

    def cut(self, xmin, xmax, ymin, ymax):
        return _CosmoBolognaLib.Data2D_cut(self, xmin, xmax, ymin, ymax)
Data2D_swigregister = _CosmoBolognaLib.Data2D_swigregister
Data2D_swigregister(Data2D)

class Data1D_extra(Data1D):
    __swig_setmethods__ = {}
    for _s in [Data1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Data1D_extra, name, value)
    __swig_getmethods__ = {}
    for _s in [Data1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Data1D_extra, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Data1D_extra(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Data1D_extra
    __del__ = lambda self: None

    def as_factory(self):
        return _CosmoBolognaLib.Data1D_extra_as_factory(self)

    def extra_info(self, *args):
        return _CosmoBolognaLib.Data1D_extra_extra_info(self, *args)

    def IndipendentVariable(self, i=-1, j=-1):
        return _CosmoBolognaLib.Data1D_extra_IndipendentVariable(self, i, j)

    def set_extra_info(self, extra_info):
        return _CosmoBolognaLib.Data1D_extra_set_extra_info(self, extra_info)

    def read(self, input_file, skip_nlines=0):
        return _CosmoBolognaLib.Data1D_extra_read(self, input_file, skip_nlines)

    def write(self, dir, file, header, precision=4, rank=0):
        return _CosmoBolognaLib.Data1D_extra_write(self, dir, file, header, precision, rank)
Data1D_extra_swigregister = _CosmoBolognaLib.Data1D_extra_swigregister
Data1D_extra_swigregister(Data1D_extra)

class Data2D_extra(Data2D):
    __swig_setmethods__ = {}
    for _s in [Data2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Data2D_extra, name, value)
    __swig_getmethods__ = {}
    for _s in [Data2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Data2D_extra, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Data2D_extra(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Data2D_extra
    __del__ = lambda self: None

    def as_factory(self):
        return _CosmoBolognaLib.Data2D_extra_as_factory(self)

    def extra_info(self, *args):
        return _CosmoBolognaLib.Data2D_extra_extra_info(self, *args)

    def IndipendentVariable(self, i=-1, j=-1):
        return _CosmoBolognaLib.Data2D_extra_IndipendentVariable(self, i, j)

    def set_extra_info(self, extra_info):
        return _CosmoBolognaLib.Data2D_extra_set_extra_info(self, extra_info)

    def read(self, input_file, skip_nlines=0):
        return _CosmoBolognaLib.Data2D_extra_read(self, input_file, skip_nlines)

    def write(self, dir, file, header, full, precision=4, rank=0):
        return _CosmoBolognaLib.Data2D_extra_write(self, dir, file, header, full, precision, rank)
Data2D_extra_swigregister = _CosmoBolognaLib.Data2D_extra_swigregister
Data2D_extra_swigregister(Data2D_extra)

class Data1D_collection(Data):
    __swig_setmethods__ = {}
    for _s in [Data]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Data1D_collection, name, value)
    __swig_getmethods__ = {}
    for _s in [Data]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Data1D_collection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Data1D_collection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Data1D_collection
    __del__ = lambda self: None

    def as_factory(self):
        return _CosmoBolognaLib.Data1D_collection_as_factory(self)

    def xsize(self, i):
        return _CosmoBolognaLib.Data1D_collection_xsize(self, i)

    def xx(self, *args):
        return _CosmoBolognaLib.Data1D_collection_xx(self, *args)

    def IndipendentVariable(self, i=-1, j=-1):
        return _CosmoBolognaLib.Data1D_collection_IndipendentVariable(self, i, j)

    def data(self, *args):
        return _CosmoBolognaLib.Data1D_collection_data(self, *args)

    def error(self, *args):
        return _CosmoBolognaLib.Data1D_collection_error(self, *args)

    def set_xx(self, i, x):
        return _CosmoBolognaLib.Data1D_collection_set_xx(self, i, x)

    def ndataset(self):
        return _CosmoBolognaLib.Data1D_collection_ndataset(self)

    def read(self, *args):
        return _CosmoBolognaLib.Data1D_collection_read(self, *args)

    def write(self, *args):
        return _CosmoBolognaLib.Data1D_collection_write(self, *args)

    def write_covariance(self, dir, file, precision=10):
        return _CosmoBolognaLib.Data1D_collection_write_covariance(self, dir, file, precision)

    def cut(self, *args):
        return _CosmoBolognaLib.Data1D_collection_cut(self, *args)
Data1D_collection_swigregister = _CosmoBolognaLib.Data1D_collection_swigregister
Data1D_collection_swigregister(Data1D_collection)

class Field3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Field3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Field3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Field3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Field3D
    __del__ = lambda self: None

    def set_parameters(self, *args):
        return _CosmoBolognaLib.Field3D_set_parameters(self, *args)

    def nx(self):
        return _CosmoBolognaLib.Field3D_nx(self)

    def ny(self):
        return _CosmoBolognaLib.Field3D_ny(self)

    def nz(self):
        return _CosmoBolognaLib.Field3D_nz(self)

    def nzFourier(self):
        return _CosmoBolognaLib.Field3D_nzFourier(self)

    def nCells(self):
        return _CosmoBolognaLib.Field3D_nCells(self)

    def nCellsFourier(self):
        return _CosmoBolognaLib.Field3D_nCellsFourier(self)

    def MinX(self):
        return _CosmoBolognaLib.Field3D_MinX(self)

    def MinY(self):
        return _CosmoBolognaLib.Field3D_MinY(self)

    def MinZ(self):
        return _CosmoBolognaLib.Field3D_MinZ(self)

    def MaxX(self):
        return _CosmoBolognaLib.Field3D_MaxX(self)

    def MaxY(self):
        return _CosmoBolognaLib.Field3D_MaxY(self)

    def MaxZ(self):
        return _CosmoBolognaLib.Field3D_MaxZ(self)

    def deltaX(self):
        return _CosmoBolognaLib.Field3D_deltaX(self)

    def deltaY(self):
        return _CosmoBolognaLib.Field3D_deltaY(self)

    def deltaZ(self):
        return _CosmoBolognaLib.Field3D_deltaZ(self)

    def Volume(self):
        return _CosmoBolognaLib.Field3D_Volume(self)

    def XX(self, i):
        return _CosmoBolognaLib.Field3D_XX(self, i)

    def YY(self, i):
        return _CosmoBolognaLib.Field3D_YY(self, i)

    def ZZ(self, i):
        return _CosmoBolognaLib.Field3D_ZZ(self, i)

    def kX(self, i):
        return _CosmoBolognaLib.Field3D_kX(self, i)

    def kY(self, i):
        return _CosmoBolognaLib.Field3D_kY(self, i)

    def kZ(self, i):
        return _CosmoBolognaLib.Field3D_kZ(self, i)

    def ScalarField(self, *args):
        return _CosmoBolognaLib.Field3D_ScalarField(self, *args)

    def VectorField(self, *args):
        return _CosmoBolognaLib.Field3D_VectorField(self, *args)

    def ScalarField_FourierSpace_real(self, *args):
        return _CosmoBolognaLib.Field3D_ScalarField_FourierSpace_real(self, *args)

    def ScalarField_FourierSpace_complex(self, *args):
        return _CosmoBolognaLib.Field3D_ScalarField_FourierSpace_complex(self, *args)

    def VectorField_FourierSpace_real(self, i, j, k):
        return _CosmoBolognaLib.Field3D_VectorField_FourierSpace_real(self, i, j, k)

    def VectorField_FourierSpace_complex(self, i, j, k):
        return _CosmoBolognaLib.Field3D_VectorField_FourierSpace_complex(self, i, j, k)

    def FourierTransformField(self):
        return _CosmoBolognaLib.Field3D_FourierTransformField(self)

    def FourierAntiTransformField(self):
        return _CosmoBolognaLib.Field3D_FourierAntiTransformField(self)

    def GaussianConvolutionField(self, kernel_size):
        return _CosmoBolognaLib.Field3D_GaussianConvolutionField(self, kernel_size)

    def set_ScalarField(self, value, i, j, k, add=0):
        return _CosmoBolognaLib.Field3D_set_ScalarField(self, value, i, j, k, add)

    def set_VectorField(self, value, i, j, k, add=0):
        return _CosmoBolognaLib.Field3D_set_VectorField(self, value, i, j, k, add)

    def set_ScalarField_FourierSpace_real(self, value, i, j, k, add=0):
        return _CosmoBolognaLib.Field3D_set_ScalarField_FourierSpace_real(self, value, i, j, k, add)

    def set_ScalarField_FourierSpace_complex(self, value, i, j, k, add=0):
        return _CosmoBolognaLib.Field3D_set_ScalarField_FourierSpace_complex(self, value, i, j, k, add)

    def set_VectorField_FourierSpace_real(self, value, i, j, k, add=0):
        return _CosmoBolognaLib.Field3D_set_VectorField_FourierSpace_real(self, value, i, j, k, add)

    def set_VectorField_FourierSpace_complex(self, value, i, j, k, add=0):
        return _CosmoBolognaLib.Field3D_set_VectorField_FourierSpace_complex(self, value, i, j, k, add)

    def reset(self):
        return _CosmoBolognaLib.Field3D_reset(self)
Field3D_swigregister = _CosmoBolognaLib.Field3D_swigregister
Field3D_swigregister(Field3D)

class ScalarField3D(Field3D):
    __swig_setmethods__ = {}
    for _s in [Field3D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarField3D, name, value)
    __swig_getmethods__ = {}
    for _s in [Field3D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarField3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_ScalarField3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_ScalarField3D
    __del__ = lambda self: None

    def set_ScalarField(self, value, i, j, k, add=0):
        return _CosmoBolognaLib.ScalarField3D_set_ScalarField(self, value, i, j, k, add)

    def set_ScalarField_FourierSpace_real(self, value, i, j, k, add=0):
        return _CosmoBolognaLib.ScalarField3D_set_ScalarField_FourierSpace_real(self, value, i, j, k, add)

    def set_ScalarField_FourierSpace_complex(self, value, i, j, k, add=0):
        return _CosmoBolognaLib.ScalarField3D_set_ScalarField_FourierSpace_complex(self, value, i, j, k, add)

    def ScalarField(self, *args):
        return _CosmoBolognaLib.ScalarField3D_ScalarField(self, *args)

    def ScalarField_FourierSpace_real(self, i, j, k):
        return _CosmoBolognaLib.ScalarField3D_ScalarField_FourierSpace_real(self, i, j, k)

    def ScalarField_FourierSpace_complex(self, i, j, k):
        return _CosmoBolognaLib.ScalarField3D_ScalarField_FourierSpace_complex(self, i, j, k)

    def FourierTransformField(self):
        return _CosmoBolognaLib.ScalarField3D_FourierTransformField(self)

    def FourierAntiTransformField(self):
        return _CosmoBolognaLib.ScalarField3D_FourierAntiTransformField(self)

    def GaussianConvolutionField(self, kernel_size):
        return _CosmoBolognaLib.ScalarField3D_GaussianConvolutionField(self, kernel_size)

    def reset(self):
        return _CosmoBolognaLib.ScalarField3D_reset(self)
ScalarField3D_swigregister = _CosmoBolognaLib.ScalarField3D_swigregister
ScalarField3D_swigregister(ScalarField3D)

class VectorField3D(Field3D):
    __swig_setmethods__ = {}
    for _s in [Field3D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorField3D, name, value)
    __swig_getmethods__ = {}
    for _s in [Field3D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorField3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_VectorField3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_VectorField3D
    __del__ = lambda self: None

    def set_VectorField(self, value, i, j, k, add=0):
        return _CosmoBolognaLib.VectorField3D_set_VectorField(self, value, i, j, k, add)

    def set_VectorField_FourierSpace_real(self, value, i, j, k, add=0):
        return _CosmoBolognaLib.VectorField3D_set_VectorField_FourierSpace_real(self, value, i, j, k, add)

    def set_VectorField_FourierSpace_complex(self, value, i, j, k, add=0):
        return _CosmoBolognaLib.VectorField3D_set_VectorField_FourierSpace_complex(self, value, i, j, k, add)

    def VectorField(self, *args):
        return _CosmoBolognaLib.VectorField3D_VectorField(self, *args)

    def VectorField_FourierSpace_real(self, i, j, k):
        return _CosmoBolognaLib.VectorField3D_VectorField_FourierSpace_real(self, i, j, k)

    def VectorField_FourierSpace_complex(self, i, j, k):
        return _CosmoBolognaLib.VectorField3D_VectorField_FourierSpace_complex(self, i, j, k)

    def FourierTransformField(self):
        return _CosmoBolognaLib.VectorField3D_FourierTransformField(self)

    def FourierAntiTransformField(self):
        return _CosmoBolognaLib.VectorField3D_FourierAntiTransformField(self)

    def reset(self):
        return _CosmoBolognaLib.VectorField3D_reset(self)
VectorField3D_swigregister = _CosmoBolognaLib.VectorField3D_swigregister
VectorField3D_swigregister(VectorField3D)

HistogramType__N_V_ = _CosmoBolognaLib.HistogramType__N_V_
HistogramType__n_V_ = _CosmoBolognaLib.HistogramType__n_V_
HistogramType__dn_dV_ = _CosmoBolognaLib.HistogramType__dn_dV_
HistogramType__dn_dlogV_ = _CosmoBolognaLib.HistogramType__dn_dlogV_

def HistogramTypeNames():
    return _CosmoBolognaLib.HistogramTypeNames()
HistogramTypeNames = _CosmoBolognaLib.HistogramTypeNames

def HistogramTypeCast(*args):
    return _CosmoBolognaLib.HistogramTypeCast(*args)
HistogramTypeCast = _CosmoBolognaLib.HistogramTypeCast
class Histogram(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Histogram, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Histogram, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CosmoBolognaLib.new_Histogram()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Histogram
    __del__ = lambda self: None

    def set(self, *args):
        return _CosmoBolognaLib.Histogram_set(self, *args)

    def digitize(self, *args):
        return _CosmoBolognaLib.Histogram_digitize(self, *args)

    def put(self, *args):
        return _CosmoBolognaLib.Histogram_put(self, *args)

    def nbins(self):
        return _CosmoBolognaLib.Histogram_nbins(self)

    def binSize(self):
        return _CosmoBolognaLib.Histogram_binSize(self)

    def minVar(self):
        return _CosmoBolognaLib.Histogram_minVar(self)

    def maxVar(self):
        return _CosmoBolognaLib.Histogram_maxVar(self)

    def shift(self):
        return _CosmoBolognaLib.Histogram_shift(self)

    def bin_type(self):
        return _CosmoBolognaLib.Histogram_bin_type(self)

    def bin(self, i):
        return _CosmoBolognaLib.Histogram_bin(self, i)

    def bins(self):
        return _CosmoBolognaLib.Histogram_bins(self)

    def edge(self, i):
        return _CosmoBolognaLib.Histogram_edge(self, i)

    def edges(self):
        return _CosmoBolognaLib.Histogram_edges(self)

    def nbins1(self):
        return _CosmoBolognaLib.Histogram_nbins1(self)

    def binSize1(self):
        return _CosmoBolognaLib.Histogram_binSize1(self)

    def minVar1(self):
        return _CosmoBolognaLib.Histogram_minVar1(self)

    def maxVar1(self):
        return _CosmoBolognaLib.Histogram_maxVar1(self)

    def shift1(self):
        return _CosmoBolognaLib.Histogram_shift1(self)

    def bin_type1(self):
        return _CosmoBolognaLib.Histogram_bin_type1(self)

    def nbins2(self):
        return _CosmoBolognaLib.Histogram_nbins2(self)

    def binSize2(self):
        return _CosmoBolognaLib.Histogram_binSize2(self)

    def minVar2(self):
        return _CosmoBolognaLib.Histogram_minVar2(self)

    def maxVar2(self):
        return _CosmoBolognaLib.Histogram_maxVar2(self)

    def shift2(self):
        return _CosmoBolognaLib.Histogram_shift2(self)

    def bin_type2(self):
        return _CosmoBolognaLib.Histogram_bin_type2(self)

    def bin1(self, i):
        return _CosmoBolognaLib.Histogram_bin1(self, i)

    def bins1(self):
        return _CosmoBolognaLib.Histogram_bins1(self)

    def edge1(self, i):
        return _CosmoBolognaLib.Histogram_edge1(self, i)

    def edges1(self):
        return _CosmoBolognaLib.Histogram_edges1(self)

    def bin2(self, i):
        return _CosmoBolognaLib.Histogram_bin2(self, i)

    def bins2(self):
        return _CosmoBolognaLib.Histogram_bins2(self)

    def edge2(self, i):
        return _CosmoBolognaLib.Histogram_edge2(self, i)

    def edges2(self):
        return _CosmoBolognaLib.Histogram_edges2(self)

    def __call__(self, *args):
        return _CosmoBolognaLib.Histogram___call__(self, *args)

    def normalization(self, *args):
        return _CosmoBolognaLib.Histogram_normalization(self, *args)

    def weights(self):
        return _CosmoBolognaLib.Histogram_weights(self)

    def weight(self, *args):
        return _CosmoBolognaLib.Histogram_weight(self, *args)

    def poisson_error(self, *args):
        return _CosmoBolognaLib.Histogram_poisson_error(self, *args)

    def write(self, dir, file, hist_type, fact=1.):
        return _CosmoBolognaLib.Histogram_write(self, dir, file, hist_type, fact)
Histogram_swigregister = _CosmoBolognaLib.Histogram_swigregister
Histogram_swigregister(Histogram)

class Histogram1D(Histogram):
    __swig_setmethods__ = {}
    for _s in [Histogram]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Histogram1D, name, value)
    __swig_getmethods__ = {}
    for _s in [Histogram]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Histogram1D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Histogram1D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Histogram1D
    __del__ = lambda self: None

    def set(self, *args):
        return _CosmoBolognaLib.Histogram1D_set(self, *args)

    def digitize(self, *args):
        return _CosmoBolognaLib.Histogram1D_digitize(self, *args)

    def put(self, *args):
        return _CosmoBolognaLib.Histogram1D_put(self, *args)

    def nbins(self):
        return _CosmoBolognaLib.Histogram1D_nbins(self)

    def binSize(self):
        return _CosmoBolognaLib.Histogram1D_binSize(self)

    def minVar(self):
        return _CosmoBolognaLib.Histogram1D_minVar(self)

    def maxVar(self):
        return _CosmoBolognaLib.Histogram1D_maxVar(self)

    def shift(self):
        return _CosmoBolognaLib.Histogram1D_shift(self)

    def bin_type(self):
        return _CosmoBolognaLib.Histogram1D_bin_type(self)

    def bin(self, i):
        return _CosmoBolognaLib.Histogram1D_bin(self, i)

    def bins(self):
        return _CosmoBolognaLib.Histogram1D_bins(self)

    def edge(self, i):
        return _CosmoBolognaLib.Histogram1D_edge(self, i)

    def edges(self):
        return _CosmoBolognaLib.Histogram1D_edges(self)

    def normalization(self, i, hist_type, fact=1.):
        return _CosmoBolognaLib.Histogram1D_normalization(self, i, hist_type, fact)

    def weight(self, i):
        return _CosmoBolognaLib.Histogram1D_weight(self, i)

    def weights(self):
        return _CosmoBolognaLib.Histogram1D_weights(self)

    def __call__(self, *args):
        return _CosmoBolognaLib.Histogram1D___call__(self, *args)

    def poisson_error(self, *args):
        return _CosmoBolognaLib.Histogram1D_poisson_error(self, *args)

    def write(self, dir, file, hist_type, fact=1.):
        return _CosmoBolognaLib.Histogram1D_write(self, dir, file, hist_type, fact)
Histogram1D_swigregister = _CosmoBolognaLib.Histogram1D_swigregister
Histogram1D_swigregister(Histogram1D)

class Histogram2D(Histogram):
    __swig_setmethods__ = {}
    for _s in [Histogram]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Histogram2D, name, value)
    __swig_getmethods__ = {}
    for _s in [Histogram]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Histogram2D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Histogram2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Histogram2D
    __del__ = lambda self: None

    def set(self, *args):
        return _CosmoBolognaLib.Histogram2D_set(self, *args)

    def digitize(self, *args):
        return _CosmoBolognaLib.Histogram2D_digitize(self, *args)

    def put(self, *args):
        return _CosmoBolognaLib.Histogram2D_put(self, *args)

    def nbins1(self):
        return _CosmoBolognaLib.Histogram2D_nbins1(self)

    def binSize1(self):
        return _CosmoBolognaLib.Histogram2D_binSize1(self)

    def minVar1(self):
        return _CosmoBolognaLib.Histogram2D_minVar1(self)

    def maxVar1(self):
        return _CosmoBolognaLib.Histogram2D_maxVar1(self)

    def shift1(self):
        return _CosmoBolognaLib.Histogram2D_shift1(self)

    def bin_type1(self):
        return _CosmoBolognaLib.Histogram2D_bin_type1(self)

    def nbins2(self):
        return _CosmoBolognaLib.Histogram2D_nbins2(self)

    def binSize2(self):
        return _CosmoBolognaLib.Histogram2D_binSize2(self)

    def minVar2(self):
        return _CosmoBolognaLib.Histogram2D_minVar2(self)

    def maxVar2(self):
        return _CosmoBolognaLib.Histogram2D_maxVar2(self)

    def shift2(self):
        return _CosmoBolognaLib.Histogram2D_shift2(self)

    def bin_type2(self):
        return _CosmoBolognaLib.Histogram2D_bin_type2(self)

    def bin1(self, i):
        return _CosmoBolognaLib.Histogram2D_bin1(self, i)

    def bins1(self):
        return _CosmoBolognaLib.Histogram2D_bins1(self)

    def edge1(self, i):
        return _CosmoBolognaLib.Histogram2D_edge1(self, i)

    def edges1(self):
        return _CosmoBolognaLib.Histogram2D_edges1(self)

    def bin2(self, i):
        return _CosmoBolognaLib.Histogram2D_bin2(self, i)

    def bins2(self):
        return _CosmoBolognaLib.Histogram2D_bins2(self)

    def edge2(self, i):
        return _CosmoBolognaLib.Histogram2D_edge2(self, i)

    def edges2(self):
        return _CosmoBolognaLib.Histogram2D_edges2(self)

    def normalization(self, i, j, hist_type, fact=1.):
        return _CosmoBolognaLib.Histogram2D_normalization(self, i, j, hist_type, fact)

    def weight(self, i, j):
        return _CosmoBolognaLib.Histogram2D_weight(self, i, j)

    def __call__(self, i, j, hist_type, fact=1.):
        return _CosmoBolognaLib.Histogram2D___call__(self, i, j, hist_type, fact)

    def poisson_error(self, i, j, hist_type, fact=1.):
        return _CosmoBolognaLib.Histogram2D_poisson_error(self, i, j, hist_type, fact)

    def write(self, dir, file, hist_type, fact=1.):
        return _CosmoBolognaLib.Histogram2D_write(self, dir, file, hist_type, fact)
Histogram2D_swigregister = _CosmoBolognaLib.Histogram2D_swigregister
Histogram2D_swigregister(Histogram2D)

DistributionType__Constant_ = _CosmoBolognaLib.DistributionType__Constant_
DistributionType__Uniform_ = _CosmoBolognaLib.DistributionType__Uniform_
DistributionType__Gaussian_ = _CosmoBolognaLib.DistributionType__Gaussian_
DistributionType__Poisson_ = _CosmoBolognaLib.DistributionType__Poisson_
DistributionType__Custom_ = _CosmoBolognaLib.DistributionType__Custom_
DistributionType__Interpolated_ = _CosmoBolognaLib.DistributionType__Interpolated_
DistributionType__Discrete_ = _CosmoBolognaLib.DistributionType__Discrete_

def DistributionTypeNames():
    return _CosmoBolognaLib.DistributionTypeNames()
DistributionTypeNames = _CosmoBolognaLib.DistributionTypeNames

def DistributionTypeCast(*args):
    return _CosmoBolognaLib.DistributionTypeCast(*args)
DistributionTypeCast = _CosmoBolognaLib.DistributionTypeCast
class Distribution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Distribution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Distribution, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Distribution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Distribution
    __del__ = lambda self: None

    def distributionType(self):
        return _CosmoBolognaLib.Distribution_distributionType(self)

    def __call__(self, xx):
        return _CosmoBolognaLib.Distribution___call__(self, xx)

    def log_distribution(self, xx):
        return _CosmoBolognaLib.Distribution_log_distribution(self, xx)

    def set_seed(self, seed):
        return _CosmoBolognaLib.Distribution_set_seed(self, seed)

    def set_limits(self, xmin, xmax):
        return _CosmoBolognaLib.Distribution_set_limits(self, xmin, xmax)

    def set_constant_distribution(self, value):
        return _CosmoBolognaLib.Distribution_set_constant_distribution(self, value)

    def set_uniform_distribution(self, xmin, xmax, seed=1):
        return _CosmoBolognaLib.Distribution_set_uniform_distribution(self, xmin, xmax, seed)

    def set_gaussian_distribution(self, mean, sigma, seed=1):
        return _CosmoBolognaLib.Distribution_set_gaussian_distribution(self, mean, sigma, seed)

    def set_poisson_distribution(self, mean, seed=1):
        return _CosmoBolognaLib.Distribution_set_poisson_distribution(self, mean, seed)

    def set_custom_distribution(self, func, distribution_fixed_pars, distribution_pars, seed=1):
        return _CosmoBolognaLib.Distribution_set_custom_distribution(self, func, distribution_fixed_pars, distribution_pars, seed)

    def set_discrete_values(self, discrete_values, weights, seed=1):
        return _CosmoBolognaLib.Distribution_set_discrete_values(self, discrete_values, weights, seed)

    def set_binned_distribution(self, *args):
        return _CosmoBolognaLib.Distribution_set_binned_distribution(self, *args)

    def xmin(self):
        return _CosmoBolognaLib.Distribution_xmin(self)

    def xmax(self):
        return _CosmoBolognaLib.Distribution_xmax(self)

    def distribution_range(self):
        return _CosmoBolognaLib.Distribution_distribution_range(self)

    def isIncluded(self, value):
        return _CosmoBolognaLib.Distribution_isIncluded(self, value)

    def sample(self, *args):
        return _CosmoBolognaLib.Distribution_sample(self, *args)

    def sample_vector(self, nvalues):
        return _CosmoBolognaLib.Distribution_sample_vector(self, nvalues)

    def mean(self):
        return _CosmoBolognaLib.Distribution_mean(self)

    def variance(self):
        return _CosmoBolognaLib.Distribution_variance(self)

    def std(self):
        return _CosmoBolognaLib.Distribution_std(self)

    def skewness(self):
        return _CosmoBolognaLib.Distribution_skewness(self)

    def kurtosis(self):
        return _CosmoBolognaLib.Distribution_kurtosis(self)

    def moments(self):
        return _CosmoBolognaLib.Distribution_moments(self)

    def median(self):
        return _CosmoBolognaLib.Distribution_median(self)

    def percentile(self, i):
        return _CosmoBolognaLib.Distribution_percentile(self, i)

    def mode(self):
        return _CosmoBolognaLib.Distribution_mode(self)

    def get_distribution(self, *args):
        return _CosmoBolognaLib.Distribution_get_distribution(self, *args)
Distribution_swigregister = _CosmoBolognaLib.Distribution_swigregister
Distribution_swigregister(Distribution)

class PriorDistribution(Distribution):
    __swig_setmethods__ = {}
    for _s in [Distribution]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PriorDistribution, name, value)
    __swig_getmethods__ = {}
    for _s in [Distribution]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PriorDistribution, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_PriorDistribution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_PriorDistribution
    __del__ = lambda self: None
PriorDistribution_swigregister = _CosmoBolognaLib.PriorDistribution_swigregister
PriorDistribution_swigregister(PriorDistribution)

class PosteriorDistribution(Distribution):
    __swig_setmethods__ = {}
    for _s in [Distribution]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosteriorDistribution, name, value)
    __swig_getmethods__ = {}
    for _s in [Distribution]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PosteriorDistribution, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_PosteriorDistribution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_PosteriorDistribution
    __del__ = lambda self: None
PosteriorDistribution_swigregister = _CosmoBolognaLib.PosteriorDistribution_swigregister
PosteriorDistribution_swigregister(PosteriorDistribution)

class Prior(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Prior, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Prior, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Prior(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Prior
    __del__ = lambda self: None

    def __call__(self, parameters):
        return _CosmoBolognaLib.Prior___call__(self, parameters)

    def log(self, parameters):
        return _CosmoBolognaLib.Prior_log(self, parameters)
Prior_swigregister = _CosmoBolognaLib.Prior_swigregister
Prior_swigregister(Prior)

ParameterType__Base_ = _CosmoBolognaLib.ParameterType__Base_
ParameterType__Derived_ = _CosmoBolognaLib.ParameterType__Derived_

def ParameterTypeNames():
    return _CosmoBolognaLib.ParameterTypeNames()
ParameterTypeNames = _CosmoBolognaLib.ParameterTypeNames

def ParameterTypeCast(*args):
    return _CosmoBolognaLib.ParameterTypeCast(*args)
ParameterTypeCast = _CosmoBolognaLib.ParameterTypeCast
class ModelParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_ModelParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_ModelParameters
    __del__ = lambda self: None

    def reset(self):
        return _CosmoBolognaLib.ModelParameters_reset(self)

    def nparameters(self):
        return _CosmoBolognaLib.ModelParameters_nparameters(self)

    def nparameters_base(self):
        return _CosmoBolognaLib.ModelParameters_nparameters_base(self)

    def base_parameters(self):
        return _CosmoBolognaLib.ModelParameters_base_parameters(self)

    def nparameters_derived(self):
        return _CosmoBolognaLib.ModelParameters_nparameters_derived(self)

    def derived_parameters(self):
        return _CosmoBolognaLib.ModelParameters_derived_parameters(self)

    def type(self, *args):
        return _CosmoBolognaLib.ModelParameters_type(self, *args)

    def name(self, *args):
        return _CosmoBolognaLib.ModelParameters_name(self, *args)

    def status(self, *args):
        return _CosmoBolognaLib.ModelParameters_status(self, *args)

    def full_parameters(self, parameter_values):
        return _CosmoBolognaLib.ModelParameters_full_parameters(self, parameter_values)

    def set_parameters(self, *args):
        return _CosmoBolognaLib.ModelParameters_set_parameters(self, *args)

    def nparameters_free(self):
        return _CosmoBolognaLib.ModelParameters_nparameters_free(self)

    def free_parameters(self):
        return _CosmoBolognaLib.ModelParameters_free_parameters(self)

    def nparameters_fixed(self):
        return _CosmoBolognaLib.ModelParameters_nparameters_fixed(self)

    def fixed_parameters(self):
        return _CosmoBolognaLib.ModelParameters_fixed_parameters(self)

    def free(self, p):
        return _CosmoBolognaLib.ModelParameters_free(self, p)

    def fix(self, p, value):
        return _CosmoBolognaLib.ModelParameters_fix(self, p, value)

    def fix_at_bestfit(self, p):
        return _CosmoBolognaLib.ModelParameters_fix_at_bestfit(self, p)

    def bestfit_value(self, p):
        return _CosmoBolognaLib.ModelParameters_bestfit_value(self, p)

    def bestfit_values(self):
        return _CosmoBolognaLib.ModelParameters_bestfit_values(self)

    def set_bestfit_values(self, *args):
        return _CosmoBolognaLib.ModelParameters_set_bestfit_values(self, *args)

    def write_bestfit_info(self):
        return _CosmoBolognaLib.ModelParameters_write_bestfit_info(self)

    def set_prior_distribution(self, *args):
        return _CosmoBolognaLib.ModelParameters_set_prior_distribution(self, *args)

    def set_prior_distribution_seed(self, ran_generator):
        return _CosmoBolognaLib.ModelParameters_set_prior_distribution_seed(self, ran_generator)

    def prior_distribution(self, *args):
        return _CosmoBolognaLib.ModelParameters_prior_distribution(self, *args)

    def prior(self):
        return _CosmoBolognaLib.ModelParameters_prior(self)

    def set_parameter_covariance(self, start=0, thin=1):
        return _CosmoBolognaLib.ModelParameters_set_parameter_covariance(self, start, thin)

    def parameter_covariance(self, *args):
        return _CosmoBolognaLib.ModelParameters_parameter_covariance(self, *args)

    def set_posterior_distribution(self, start, thin, nbins, seed=34121):
        return _CosmoBolognaLib.ModelParameters_set_posterior_distribution(self, start, thin, nbins, seed)

    def posterior_distribution(self, par):
        return _CosmoBolognaLib.ModelParameters_posterior_distribution(self, par)

    def show_results(self, start, thin, nbins, seed=34121, show_mode=False):
        return _CosmoBolognaLib.ModelParameters_show_results(self, start, thin, nbins, seed, show_mode)

    def write_results(self, dir, file, start, thin, nbins, seed=34121, compute_mode=False):
        return _CosmoBolognaLib.ModelParameters_write_results(self, dir, file, start, thin, nbins, seed, compute_mode)

    def chain_size(self):
        return _CosmoBolognaLib.ModelParameters_chain_size(self)

    def chain_nwalkers(self):
        return _CosmoBolognaLib.ModelParameters_chain_nwalkers(self)

    def set_chain(self, size, nwalkers):
        return _CosmoBolognaLib.ModelParameters_set_chain(self, size, nwalkers)

    def reset_chain(self):
        return _CosmoBolognaLib.ModelParameters_reset_chain(self)

    def expand_chain(self, append):
        return _CosmoBolognaLib.ModelParameters_expand_chain(self, append)

    def chain_value(self, param, pos, ww):
        return _CosmoBolognaLib.ModelParameters_chain_value(self, param, pos, ww)

    def chain_value_parameters(self, pos, ww):
        return _CosmoBolognaLib.ModelParameters_chain_value_parameters(self, pos, ww)

    def parameter_chain_values(self, par, start=0, thin=1):
        return _CosmoBolognaLib.ModelParameters_parameter_chain_values(self, par, start, thin)

    def set_chain_value(self, param, pos, ww, value):
        return _CosmoBolognaLib.ModelParameters_set_chain_value(self, param, pos, ww, value)

    def set_chain_values(self, *args):
        return _CosmoBolognaLib.ModelParameters_set_chain_values(self, *args)

    def initialize_chain(self, values):
        return _CosmoBolognaLib.ModelParameters_initialize_chain(self, values)

    def initialize_chain_from_prior(self):
        return _CosmoBolognaLib.ModelParameters_initialize_chain_from_prior(self)

    def initialize_chain_ball(self, center, radius, seed):
        return _CosmoBolognaLib.ModelParameters_initialize_chain_ball(self, center, radius, seed)

    def initialize_chain_ball_bestfit(self, radius, seed):
        return _CosmoBolognaLib.ModelParameters_initialize_chain_ball_bestfit(self, radius, seed)
ModelParameters_swigregister = _CosmoBolognaLib.ModelParameters_swigregister
ModelParameters_swigregister(ModelParameters)

class LikelihoodParameters(ModelParameters):
    __swig_setmethods__ = {}
    for _s in [ModelParameters]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LikelihoodParameters, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelParameters]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LikelihoodParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_LikelihoodParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_LikelihoodParameters
    __del__ = lambda self: None

    def reset(self):
        return _CosmoBolognaLib.LikelihoodParameters_reset(self)

    def status(self, *args):
        return _CosmoBolognaLib.LikelihoodParameters_status(self, *args)

    def nparameters_free(self):
        return _CosmoBolognaLib.LikelihoodParameters_nparameters_free(self)

    def free_parameters(self):
        return _CosmoBolognaLib.LikelihoodParameters_free_parameters(self)

    def nparameters_fixed(self):
        return _CosmoBolognaLib.LikelihoodParameters_nparameters_fixed(self)

    def fixed_parameters(self):
        return _CosmoBolognaLib.LikelihoodParameters_fixed_parameters(self)

    def full_parameters(self, parameter_values):
        return _CosmoBolognaLib.LikelihoodParameters_full_parameters(self, parameter_values)

    def set_parameters(self, nparameters, parameterTypes, parameterNames):
        return _CosmoBolognaLib.LikelihoodParameters_set_parameters(self, nparameters, parameterTypes, parameterNames)

    def free(self, p):
        return _CosmoBolognaLib.LikelihoodParameters_free(self, p)

    def fix(self, p, value):
        return _CosmoBolognaLib.LikelihoodParameters_fix(self, p, value)

    def fix_at_bestfit(self, p):
        return _CosmoBolognaLib.LikelihoodParameters_fix_at_bestfit(self, p)

    def bestfit_value(self, p):
        return _CosmoBolognaLib.LikelihoodParameters_bestfit_value(self, p)

    def bestfit_values(self):
        return _CosmoBolognaLib.LikelihoodParameters_bestfit_values(self)

    def set_bestfit_values(self, bestfit_value):
        return _CosmoBolognaLib.LikelihoodParameters_set_bestfit_values(self, bestfit_value)

    def write_bestfit_info(self):
        return _CosmoBolognaLib.LikelihoodParameters_write_bestfit_info(self)
LikelihoodParameters_swigregister = _CosmoBolognaLib.LikelihoodParameters_swigregister
LikelihoodParameters_swigregister(LikelihoodParameters)

class PosteriorParameters(ModelParameters):
    __swig_setmethods__ = {}
    for _s in [ModelParameters]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosteriorParameters, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelParameters]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PosteriorParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_PosteriorParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_PosteriorParameters
    __del__ = lambda self: None

    def nparameters_free(self):
        return _CosmoBolognaLib.PosteriorParameters_nparameters_free(self)

    def status(self, *args):
        return _CosmoBolognaLib.PosteriorParameters_status(self, *args)

    def free_parameters(self):
        return _CosmoBolognaLib.PosteriorParameters_free_parameters(self)

    def nparameters_fixed(self):
        return _CosmoBolognaLib.PosteriorParameters_nparameters_fixed(self)

    def fixed_parameters(self):
        return _CosmoBolognaLib.PosteriorParameters_fixed_parameters(self)

    def full_parameters(self, parameter_values):
        return _CosmoBolognaLib.PosteriorParameters_full_parameters(self, parameter_values)

    def set_parameters(self, nparameters, priorDistributions, parameterTypes, parameterNames):
        return _CosmoBolognaLib.PosteriorParameters_set_parameters(self, nparameters, priorDistributions, parameterTypes, parameterNames)

    def set_parameter_covariance(self, start=0, thin=1):
        return _CosmoBolognaLib.PosteriorParameters_set_parameter_covariance(self, start, thin)

    def parameter_covariance(self, *args):
        return _CosmoBolognaLib.PosteriorParameters_parameter_covariance(self, *args)

    def set_prior_distribution(self, *args):
        return _CosmoBolognaLib.PosteriorParameters_set_prior_distribution(self, *args)

    def set_prior_distribution_seed(self, ran_generator):
        return _CosmoBolognaLib.PosteriorParameters_set_prior_distribution_seed(self, ran_generator)

    def prior_distribution(self, *args):
        return _CosmoBolognaLib.PosteriorParameters_prior_distribution(self, *args)

    def prior(self):
        return _CosmoBolognaLib.PosteriorParameters_prior(self)

    def bestfit_value(self, p):
        return _CosmoBolognaLib.PosteriorParameters_bestfit_value(self, p)

    def bestfit_values(self):
        return _CosmoBolognaLib.PosteriorParameters_bestfit_values(self)

    def set_bestfit_values(self, *args):
        return _CosmoBolognaLib.PosteriorParameters_set_bestfit_values(self, *args)

    def write_bestfit_info(self):
        return _CosmoBolognaLib.PosteriorParameters_write_bestfit_info(self)

    def set_posterior_distribution(self, start, thin, nbins, seed=34121):
        return _CosmoBolognaLib.PosteriorParameters_set_posterior_distribution(self, start, thin, nbins, seed)

    def posterior_distribution(self, par):
        return _CosmoBolognaLib.PosteriorParameters_posterior_distribution(self, par)

    def show_results(self, start, thin, nbins, seed=34121, show_mode=False):
        return _CosmoBolognaLib.PosteriorParameters_show_results(self, start, thin, nbins, seed, show_mode)

    def write_results(self, dir, file, start, thin, nbins, seed=34121, compute_mode=False):
        return _CosmoBolognaLib.PosteriorParameters_write_results(self, dir, file, start, thin, nbins, seed, compute_mode)

    def chain_size(self):
        return _CosmoBolognaLib.PosteriorParameters_chain_size(self)

    def chain_nwalkers(self):
        return _CosmoBolognaLib.PosteriorParameters_chain_nwalkers(self)

    def set_chain(self, size, nwalkers):
        return _CosmoBolognaLib.PosteriorParameters_set_chain(self, size, nwalkers)

    def reset_chain(self):
        return _CosmoBolognaLib.PosteriorParameters_reset_chain(self)

    def expand_chain(self, append):
        return _CosmoBolognaLib.PosteriorParameters_expand_chain(self, append)

    def chain_value(self, param, pos, ww):
        return _CosmoBolognaLib.PosteriorParameters_chain_value(self, param, pos, ww)

    def chain_value_parameters(self, pos, ww):
        return _CosmoBolognaLib.PosteriorParameters_chain_value_parameters(self, pos, ww)

    def parameter_chain_values(self, param, start=0, thin=1):
        return _CosmoBolognaLib.PosteriorParameters_parameter_chain_values(self, param, start, thin)

    def set_chain_value(self, param, pos, ww, value):
        return _CosmoBolognaLib.PosteriorParameters_set_chain_value(self, param, pos, ww, value)

    def set_chain_values(self, *args):
        return _CosmoBolognaLib.PosteriorParameters_set_chain_values(self, *args)

    def initialize_chain(self, values):
        return _CosmoBolognaLib.PosteriorParameters_initialize_chain(self, values)

    def initialize_chain_from_prior(self):
        return _CosmoBolognaLib.PosteriorParameters_initialize_chain_from_prior(self)

    def initialize_chain_ball(self, center, radius, seed):
        return _CosmoBolognaLib.PosteriorParameters_initialize_chain_ball(self, center, radius, seed)

    def initialize_chain_ball_bestfit(self, radius, seed):
        return _CosmoBolognaLib.PosteriorParameters_initialize_chain_ball_bestfit(self, radius, seed)
PosteriorParameters_swigregister = _CosmoBolognaLib.PosteriorParameters_swigregister
PosteriorParameters_swigregister(PosteriorParameters)

class Model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Model(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Model
    __del__ = lambda self: None

    def dimension(self):
        return _CosmoBolognaLib.Model_dimension(self)

    def set_function(self, *args):
        return _CosmoBolognaLib.Model_set_function(self, *args)

    def set_inputs(self, inputs):
        return _CosmoBolognaLib.Model_set_inputs(self, inputs)

    def set_parameters(self, *args):
        return _CosmoBolognaLib.Model_set_parameters(self, *args)

    def inputs(self):
        return _CosmoBolognaLib.Model_inputs(self)

    def parameters(self):
        return _CosmoBolognaLib.Model_parameters(self)

    def __call__(self, *args):
        return _CosmoBolognaLib.Model___call__(self, *args)

    def stats_from_chains(self, *args):
        return _CosmoBolognaLib.Model_stats_from_chains(self, *args)

    def write(self, *args):
        return _CosmoBolognaLib.Model_write(self, *args)

    def write_at_bestfit(self, *args):
        return _CosmoBolognaLib.Model_write_at_bestfit(self, *args)

    def write_from_chains(self, *args):
        return _CosmoBolognaLib.Model_write_from_chains(self, *args)
Model_swigregister = _CosmoBolognaLib.Model_swigregister
Model_swigregister(Model)

class Model1D(Model):
    __swig_setmethods__ = {}
    for _s in [Model]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model1D, name, value)
    __swig_getmethods__ = {}
    for _s in [Model]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Model1D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Model1D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Model1D
    __del__ = lambda self: None

    def set_function(self, function):
        return _CosmoBolognaLib.Model1D_set_function(self, function)

    def __call__(self, *args):
        return _CosmoBolognaLib.Model1D___call__(self, *args)

    def stats_from_chains(self, xx, median_model, low_model, up_model, start=0, thin=1):
        return _CosmoBolognaLib.Model1D_stats_from_chains(self, xx, median_model, low_model, up_model, start, thin)

    def write(self, output_dir, output_file, xx, parameters):
        return _CosmoBolognaLib.Model1D_write(self, output_dir, output_file, xx, parameters)

    def write_at_bestfit(self, output_dir, output_file, xx):
        return _CosmoBolognaLib.Model1D_write_at_bestfit(self, output_dir, output_file, xx)

    def write_from_chains(self, output_dir, output_file, xx, start=0, thin=1):
        return _CosmoBolognaLib.Model1D_write_from_chains(self, output_dir, output_file, xx, start, thin)
Model1D_swigregister = _CosmoBolognaLib.Model1D_swigregister
Model1D_swigregister(Model1D)

class Model2D(Model):
    __swig_setmethods__ = {}
    for _s in [Model]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model2D, name, value)
    __swig_getmethods__ = {}
    for _s in [Model]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Model2D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Model2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Model2D
    __del__ = lambda self: None

    def set_function(self, function):
        return _CosmoBolognaLib.Model2D_set_function(self, function)

    def __call__(self, *args):
        return _CosmoBolognaLib.Model2D___call__(self, *args)

    def stats_from_chains(self, xx, yy, median_model, low_model, up_model, start=0, thin=1):
        return _CosmoBolognaLib.Model2D_stats_from_chains(self, xx, yy, median_model, low_model, up_model, start, thin)

    def write(self, output_dir, output_file, xx, yy, parameters):
        return _CosmoBolognaLib.Model2D_write(self, output_dir, output_file, xx, yy, parameters)

    def write_at_bestfit(self, output_dir, output_file, xx, yy):
        return _CosmoBolognaLib.Model2D_write_at_bestfit(self, output_dir, output_file, xx, yy)

    def write_from_chains(self, output_dir, output_file, xx, yy, start=0, thin=1):
        return _CosmoBolognaLib.Model2D_write_from_chains(self, output_dir, output_file, xx, yy, start, thin)
Model2D_swigregister = _CosmoBolognaLib.Model2D_swigregister
Model2D_swigregister(Model2D)

LikelihoodType__NotSet_ = _CosmoBolognaLib.LikelihoodType__NotSet_
LikelihoodType__Gaussian_Error_ = _CosmoBolognaLib.LikelihoodType__Gaussian_Error_
LikelihoodType__Gaussian_Covariance_ = _CosmoBolognaLib.LikelihoodType__Gaussian_Covariance_
LikelihoodType__Poissonian_ = _CosmoBolognaLib.LikelihoodType__Poissonian_
LikelihoodType__UserDefined_ = _CosmoBolognaLib.LikelihoodType__UserDefined_

def LikelihoodTypeNames():
    return _CosmoBolognaLib.LikelihoodTypeNames()
LikelihoodTypeNames = _CosmoBolognaLib.LikelihoodTypeNames

def LikelihoodTypeCast(*args):
    return _CosmoBolognaLib.LikelihoodTypeCast(*args)
LikelihoodTypeCast = _CosmoBolognaLib.LikelihoodTypeCast
class STR_likelihood_inputs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_likelihood_inputs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_likelihood_inputs, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _CosmoBolognaLib.STR_likelihood_inputs_data_set
    __swig_getmethods__["data"] = _CosmoBolognaLib.STR_likelihood_inputs_data_get
    if _newclass:
        data = _swig_property(_CosmoBolognaLib.STR_likelihood_inputs_data_get, _CosmoBolognaLib.STR_likelihood_inputs_data_set)
    __swig_setmethods__["model"] = _CosmoBolognaLib.STR_likelihood_inputs_model_set
    __swig_getmethods__["model"] = _CosmoBolognaLib.STR_likelihood_inputs_model_get
    if _newclass:
        model = _swig_property(_CosmoBolognaLib.STR_likelihood_inputs_model_get, _CosmoBolognaLib.STR_likelihood_inputs_model_set)
    __swig_setmethods__["xx"] = _CosmoBolognaLib.STR_likelihood_inputs_xx_set
    __swig_getmethods__["xx"] = _CosmoBolognaLib.STR_likelihood_inputs_xx_get
    if _newclass:
        xx = _swig_property(_CosmoBolognaLib.STR_likelihood_inputs_xx_get, _CosmoBolognaLib.STR_likelihood_inputs_xx_set)
    __swig_setmethods__["yy"] = _CosmoBolognaLib.STR_likelihood_inputs_yy_set
    __swig_getmethods__["yy"] = _CosmoBolognaLib.STR_likelihood_inputs_yy_get
    if _newclass:
        yy = _swig_property(_CosmoBolognaLib.STR_likelihood_inputs_yy_get, _CosmoBolognaLib.STR_likelihood_inputs_yy_set)
    __swig_setmethods__["weights1D"] = _CosmoBolognaLib.STR_likelihood_inputs_weights1D_set
    __swig_getmethods__["weights1D"] = _CosmoBolognaLib.STR_likelihood_inputs_weights1D_get
    if _newclass:
        weights1D = _swig_property(_CosmoBolognaLib.STR_likelihood_inputs_weights1D_get, _CosmoBolognaLib.STR_likelihood_inputs_weights1D_set)
    __swig_setmethods__["weights2D"] = _CosmoBolognaLib.STR_likelihood_inputs_weights2D_set
    __swig_getmethods__["weights2D"] = _CosmoBolognaLib.STR_likelihood_inputs_weights2D_get
    if _newclass:
        weights2D = _swig_property(_CosmoBolognaLib.STR_likelihood_inputs_weights2D_get, _CosmoBolognaLib.STR_likelihood_inputs_weights2D_set)
    __swig_setmethods__["interp_function1D"] = _CosmoBolognaLib.STR_likelihood_inputs_interp_function1D_set
    __swig_getmethods__["interp_function1D"] = _CosmoBolognaLib.STR_likelihood_inputs_interp_function1D_get
    if _newclass:
        interp_function1D = _swig_property(_CosmoBolognaLib.STR_likelihood_inputs_interp_function1D_get, _CosmoBolognaLib.STR_likelihood_inputs_interp_function1D_set)
    __swig_setmethods__["interp_function2D"] = _CosmoBolognaLib.STR_likelihood_inputs_interp_function2D_set
    __swig_getmethods__["interp_function2D"] = _CosmoBolognaLib.STR_likelihood_inputs_interp_function2D_get
    if _newclass:
        interp_function2D = _swig_property(_CosmoBolognaLib.STR_likelihood_inputs_interp_function2D_get, _CosmoBolognaLib.STR_likelihood_inputs_interp_function2D_set)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_STR_likelihood_inputs(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_likelihood_inputs
    __del__ = lambda self: None
STR_likelihood_inputs_swigregister = _CosmoBolognaLib.STR_likelihood_inputs_swigregister
STR_likelihood_inputs_swigregister(STR_likelihood_inputs)


def LogLikelihood_1D_interpolated(likelihood_parameters, inputs):
    return _CosmoBolognaLib.LogLikelihood_1D_interpolated(likelihood_parameters, inputs)
LogLikelihood_1D_interpolated = _CosmoBolognaLib.LogLikelihood_1D_interpolated

def LogLikelihood_2D_interpolated(likelihood_parameters, inputs):
    return _CosmoBolognaLib.LogLikelihood_2D_interpolated(likelihood_parameters, inputs)
LogLikelihood_2D_interpolated = _CosmoBolognaLib.LogLikelihood_2D_interpolated

def LogLikelihood_Gaussian_1D_error(likelihood_parameters, inputs):
    return _CosmoBolognaLib.LogLikelihood_Gaussian_1D_error(likelihood_parameters, inputs)
LogLikelihood_Gaussian_1D_error = _CosmoBolognaLib.LogLikelihood_Gaussian_1D_error

def LogLikelihood_Gaussian_1D_covariance(likelihood_parameters, inputs):
    return _CosmoBolognaLib.LogLikelihood_Gaussian_1D_covariance(likelihood_parameters, inputs)
LogLikelihood_Gaussian_1D_covariance = _CosmoBolognaLib.LogLikelihood_Gaussian_1D_covariance

def LogLikelihood_Gaussian_2D_error(likelihood_parameters, inputs):
    return _CosmoBolognaLib.LogLikelihood_Gaussian_2D_error(likelihood_parameters, inputs)
LogLikelihood_Gaussian_2D_error = _CosmoBolognaLib.LogLikelihood_Gaussian_2D_error

def LogLikelihood_Poissonian_1D_(likelihood_parameters, inputs):
    return _CosmoBolognaLib.LogLikelihood_Poissonian_1D_(likelihood_parameters, inputs)
LogLikelihood_Poissonian_1D_ = _CosmoBolognaLib.LogLikelihood_Poissonian_1D_

def LogLikelihood_Poissonian_2D_(likelihood_parameters, inputs):
    return _CosmoBolognaLib.LogLikelihood_Poissonian_2D_(likelihood_parameters, inputs)
LogLikelihood_Poissonian_2D_ = _CosmoBolognaLib.LogLikelihood_Poissonian_2D_
class Likelihood(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Likelihood, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Likelihood, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Likelihood(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Likelihood
    __del__ = lambda self: None

    def parameters(self):
        return _CosmoBolognaLib.Likelihood_parameters(self)

    def __call__(self, pp):
        return _CosmoBolognaLib.Likelihood___call__(self, pp)

    def log(self, pp):
        return _CosmoBolognaLib.Likelihood_log(self, pp)

    def set_data(self, data):
        return _CosmoBolognaLib.Likelihood_set_data(self, data)

    def set_model(self, model=0, model_parameters=0):
        return _CosmoBolognaLib.Likelihood_set_model(self, model, model_parameters)

    def unset_grid(self):
        return _CosmoBolognaLib.Likelihood_unset_grid(self)

    def set_grid(self, npoints, parameter_limits, file, read=False):
        return _CosmoBolognaLib.Likelihood_set_grid(self, npoints, parameter_limits, file, read)

    def set_function(self, *args):
        return _CosmoBolognaLib.Likelihood_set_function(self, *args)

    def write_results(self, dir_output, file):
        return _CosmoBolognaLib.Likelihood_write_results(self, dir_output, file)

    def maximize(self, start, parameter_limits, max_iter=10000, tol=1.e-6, epsilon=1.e-3):
        return _CosmoBolognaLib.Likelihood_maximize(self, start, parameter_limits, max_iter, tol, epsilon)

    def write_model(self, *args):
        return _CosmoBolognaLib.Likelihood_write_model(self, *args)

    def write_model_at_bestfit(self, *args):
        return _CosmoBolognaLib.Likelihood_write_model_at_bestfit(self, *args)
Likelihood_swigregister = _CosmoBolognaLib.Likelihood_swigregister
Likelihood_swigregister(Likelihood)

class Chi2(Likelihood):
    __swig_setmethods__ = {}
    for _s in [Likelihood]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Chi2, name, value)
    __swig_getmethods__ = {}
    for _s in [Likelihood]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Chi2, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Chi2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Chi2
    __del__ = lambda self: None

    def __call__(self, pp):
        return _CosmoBolognaLib.Chi2___call__(self, pp)

    def minimize(self, start, parameter_limits, max_iter=10000, tol=1.e-6, epsilon=1.e-3):
        return _CosmoBolognaLib.Chi2_minimize(self, start, parameter_limits, max_iter, tol, epsilon)
Chi2_swigregister = _CosmoBolognaLib.Chi2_swigregister
Chi2_swigregister(Chi2)

SamplerType__MetropolisHastings_ = _CosmoBolognaLib.SamplerType__MetropolisHastings_
SamplerType__StretchMove_ = _CosmoBolognaLib.SamplerType__StretchMove_

def SamplerTypeNames():
    return _CosmoBolognaLib.SamplerTypeNames()
SamplerTypeNames = _CosmoBolognaLib.SamplerTypeNames

def SamplerTypeCast(*args):
    return _CosmoBolognaLib.SamplerTypeCast(*args)
SamplerTypeCast = _CosmoBolognaLib.SamplerTypeCast
class Sampler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sampler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Sampler, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Sampler(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Sampler
    __del__ = lambda self: None

    def __call__(self, pp):
        return _CosmoBolognaLib.Sampler___call__(self, pp)

    def get_chain(self, *args):
        return _CosmoBolognaLib.Sampler_get_chain(self, *args)

    def get_function(self, chain, step):
        return _CosmoBolognaLib.Sampler_get_function(self, chain, step)

    def get_chain_function_acceptance(self, chains, function, acceptance, start=0, thin=1):
        return _CosmoBolognaLib.Sampler_get_chain_function_acceptance(self, chains, function, acceptance, start, thin)

    def set_chain(self, npar, npar_free, chain_size, nwalkers):
        return _CosmoBolognaLib.Sampler_set_chain(self, npar, npar_free, chain_size, nwalkers)

    def set_function(self, function):
        return _CosmoBolognaLib.Sampler_set_function(self, function)

    def sample_stretch_move(self, *args):
        return _CosmoBolognaLib.Sampler_sample_stretch_move(self, *args)

    def sample_stretch_move_parallel(self, chain_size, nwalkers, start, seed=4241, aa=2):
        return _CosmoBolognaLib.Sampler_sample_stretch_move_parallel(self, chain_size, nwalkers, start, seed, aa)

    def write_chain(self, dir_output, file, start, thin):
        return _CosmoBolognaLib.Sampler_write_chain(self, dir_output, file, start, thin)
Sampler_swigregister = _CosmoBolognaLib.Sampler_swigregister
Sampler_swigregister(Sampler)

class Posterior(Likelihood):
    __swig_setmethods__ = {}
    for _s in [Likelihood]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Posterior, name, value)
    __swig_getmethods__ = {}
    for _s in [Likelihood]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Posterior, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Posterior(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Posterior
    __del__ = lambda self: None

    def parameters(self):
        return _CosmoBolognaLib.Posterior_parameters(self)

    def __call__(self, pp):
        return _CosmoBolognaLib.Posterior___call__(self, pp)

    def log(self, pp):
        return _CosmoBolognaLib.Posterior_log(self, pp)

    def set_model(self, model=0, model_parameters=0):
        return _CosmoBolognaLib.Posterior_set_model(self, model, model_parameters)

    def set(self, prior_distributions, data, model, likelihood_type, x_index, w_index, seed):
        return _CosmoBolognaLib.Posterior_set(self, prior_distributions, data, model, likelihood_type, x_index, w_index, seed)

    def maximize(self, *args):
        return _CosmoBolognaLib.Posterior_maximize(self, *args)

    def initialize_chains(self, *args):
        return _CosmoBolognaLib.Posterior_initialize_chains(self, *args)

    def sample_stretch_move(self, *args):
        return _CosmoBolognaLib.Posterior_sample_stretch_move(self, *args)

    def write_chain_ascii(self, output_dir, output_file, start=0, thin=1):
        return _CosmoBolognaLib.Posterior_write_chain_ascii(self, output_dir, output_file, start, thin)

    def write_chain_fits(self, output_dir, output_file, start=0, thin=1):
        return _CosmoBolognaLib.Posterior_write_chain_fits(self, output_dir, output_file, start, thin)

    def write_chain(self, output_dir, output_file, start=0, thin=1, fits=False):
        return _CosmoBolognaLib.Posterior_write_chain(self, output_dir, output_file, start, thin, fits)

    def read_chain_ascii(self, input_dir, input_file, nwalkers, skip_header=1):
        return _CosmoBolognaLib.Posterior_read_chain_ascii(self, input_dir, input_file, nwalkers, skip_header)

    def read_chain_fits(self, input_dir, input_file, nwalkers):
        return _CosmoBolognaLib.Posterior_read_chain_fits(self, input_dir, input_file, nwalkers)

    def read_chain(self, input_dir, input_file, nwalkers, skip_header=1, fits=False):
        return _CosmoBolognaLib.Posterior_read_chain(self, input_dir, input_file, nwalkers, skip_header, fits)

    def write_maximization_results(self, output_dir, root_file):
        return _CosmoBolognaLib.Posterior_write_maximization_results(self, output_dir, root_file)

    def show_results(self, start, thin, nbins=50, show_mode=False):
        return _CosmoBolognaLib.Posterior_show_results(self, start, thin, nbins, show_mode)

    def write_results(self, output_dir, root_file, start=0, thin=1, nbins=50, fits=False, compute_mode=False):
        return _CosmoBolognaLib.Posterior_write_results(self, output_dir, root_file, start, thin, nbins, fits, compute_mode)

    def write_model_from_chain(self, *args):
        return _CosmoBolognaLib.Posterior_write_model_from_chain(self, *args)
Posterior_swigregister = _CosmoBolognaLib.Posterior_swigregister
Posterior_swigregister(Posterior)

class ParameterTypeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterTypeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterTypeVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CosmoBolognaLib.ParameterTypeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CosmoBolognaLib.ParameterTypeVector___nonzero__(self)

    def __bool__(self):
        return _CosmoBolognaLib.ParameterTypeVector___bool__(self)

    def __len__(self):
        return _CosmoBolognaLib.ParameterTypeVector___len__(self)

    def __getslice__(self, i, j):
        return _CosmoBolognaLib.ParameterTypeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CosmoBolognaLib.ParameterTypeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CosmoBolognaLib.ParameterTypeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CosmoBolognaLib.ParameterTypeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CosmoBolognaLib.ParameterTypeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CosmoBolognaLib.ParameterTypeVector___setitem__(self, *args)

    def pop(self):
        return _CosmoBolognaLib.ParameterTypeVector_pop(self)

    def append(self, x):
        return _CosmoBolognaLib.ParameterTypeVector_append(self, x)

    def empty(self):
        return _CosmoBolognaLib.ParameterTypeVector_empty(self)

    def size(self):
        return _CosmoBolognaLib.ParameterTypeVector_size(self)

    def swap(self, v):
        return _CosmoBolognaLib.ParameterTypeVector_swap(self, v)

    def begin(self):
        return _CosmoBolognaLib.ParameterTypeVector_begin(self)

    def end(self):
        return _CosmoBolognaLib.ParameterTypeVector_end(self)

    def rbegin(self):
        return _CosmoBolognaLib.ParameterTypeVector_rbegin(self)

    def rend(self):
        return _CosmoBolognaLib.ParameterTypeVector_rend(self)

    def clear(self):
        return _CosmoBolognaLib.ParameterTypeVector_clear(self)

    def get_allocator(self):
        return _CosmoBolognaLib.ParameterTypeVector_get_allocator(self)

    def pop_back(self):
        return _CosmoBolognaLib.ParameterTypeVector_pop_back(self)

    def erase(self, *args):
        return _CosmoBolognaLib.ParameterTypeVector_erase(self, *args)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_ParameterTypeVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _CosmoBolognaLib.ParameterTypeVector_push_back(self, x)

    def front(self):
        return _CosmoBolognaLib.ParameterTypeVector_front(self)

    def back(self):
        return _CosmoBolognaLib.ParameterTypeVector_back(self)

    def assign(self, n, x):
        return _CosmoBolognaLib.ParameterTypeVector_assign(self, n, x)

    def resize(self, *args):
        return _CosmoBolognaLib.ParameterTypeVector_resize(self, *args)

    def insert(self, *args):
        return _CosmoBolognaLib.ParameterTypeVector_insert(self, *args)

    def reserve(self, n):
        return _CosmoBolognaLib.ParameterTypeVector_reserve(self, n)

    def capacity(self):
        return _CosmoBolognaLib.ParameterTypeVector_capacity(self)
    __swig_destroy__ = _CosmoBolognaLib.delete_ParameterTypeVector
    __del__ = lambda self: None
ParameterTypeVector_swigregister = _CosmoBolognaLib.ParameterTypeVector_swigregister
ParameterTypeVector_swigregister(ParameterTypeVector)

class PriorDistributionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PriorDistributionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PriorDistributionVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CosmoBolognaLib.PriorDistributionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CosmoBolognaLib.PriorDistributionVector___nonzero__(self)

    def __bool__(self):
        return _CosmoBolognaLib.PriorDistributionVector___bool__(self)

    def __len__(self):
        return _CosmoBolognaLib.PriorDistributionVector___len__(self)

    def __getslice__(self, i, j):
        return _CosmoBolognaLib.PriorDistributionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CosmoBolognaLib.PriorDistributionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CosmoBolognaLib.PriorDistributionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CosmoBolognaLib.PriorDistributionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CosmoBolognaLib.PriorDistributionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CosmoBolognaLib.PriorDistributionVector___setitem__(self, *args)

    def pop(self):
        return _CosmoBolognaLib.PriorDistributionVector_pop(self)

    def append(self, x):
        return _CosmoBolognaLib.PriorDistributionVector_append(self, x)

    def empty(self):
        return _CosmoBolognaLib.PriorDistributionVector_empty(self)

    def size(self):
        return _CosmoBolognaLib.PriorDistributionVector_size(self)

    def swap(self, v):
        return _CosmoBolognaLib.PriorDistributionVector_swap(self, v)

    def begin(self):
        return _CosmoBolognaLib.PriorDistributionVector_begin(self)

    def end(self):
        return _CosmoBolognaLib.PriorDistributionVector_end(self)

    def rbegin(self):
        return _CosmoBolognaLib.PriorDistributionVector_rbegin(self)

    def rend(self):
        return _CosmoBolognaLib.PriorDistributionVector_rend(self)

    def clear(self):
        return _CosmoBolognaLib.PriorDistributionVector_clear(self)

    def get_allocator(self):
        return _CosmoBolognaLib.PriorDistributionVector_get_allocator(self)

    def pop_back(self):
        return _CosmoBolognaLib.PriorDistributionVector_pop_back(self)

    def erase(self, *args):
        return _CosmoBolognaLib.PriorDistributionVector_erase(self, *args)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_PriorDistributionVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _CosmoBolognaLib.PriorDistributionVector_push_back(self, x)

    def front(self):
        return _CosmoBolognaLib.PriorDistributionVector_front(self)

    def back(self):
        return _CosmoBolognaLib.PriorDistributionVector_back(self)

    def assign(self, n, x):
        return _CosmoBolognaLib.PriorDistributionVector_assign(self, n, x)

    def resize(self, *args):
        return _CosmoBolognaLib.PriorDistributionVector_resize(self, *args)

    def insert(self, *args):
        return _CosmoBolognaLib.PriorDistributionVector_insert(self, *args)

    def reserve(self, n):
        return _CosmoBolognaLib.PriorDistributionVector_reserve(self, n)

    def capacity(self):
        return _CosmoBolognaLib.PriorDistributionVector_capacity(self)
    __swig_destroy__ = _CosmoBolognaLib.delete_PriorDistributionVector
    __del__ = lambda self: None
PriorDistributionVector_swigregister = _CosmoBolognaLib.PriorDistributionVector_swigregister
PriorDistributionVector_swigregister(PriorDistributionVector)

class PosteriorDistributionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosteriorDistributionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PosteriorDistributionVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CosmoBolognaLib.PosteriorDistributionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CosmoBolognaLib.PosteriorDistributionVector___nonzero__(self)

    def __bool__(self):
        return _CosmoBolognaLib.PosteriorDistributionVector___bool__(self)

    def __len__(self):
        return _CosmoBolognaLib.PosteriorDistributionVector___len__(self)

    def __getslice__(self, i, j):
        return _CosmoBolognaLib.PosteriorDistributionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CosmoBolognaLib.PosteriorDistributionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CosmoBolognaLib.PosteriorDistributionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CosmoBolognaLib.PosteriorDistributionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CosmoBolognaLib.PosteriorDistributionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CosmoBolognaLib.PosteriorDistributionVector___setitem__(self, *args)

    def pop(self):
        return _CosmoBolognaLib.PosteriorDistributionVector_pop(self)

    def append(self, x):
        return _CosmoBolognaLib.PosteriorDistributionVector_append(self, x)

    def empty(self):
        return _CosmoBolognaLib.PosteriorDistributionVector_empty(self)

    def size(self):
        return _CosmoBolognaLib.PosteriorDistributionVector_size(self)

    def swap(self, v):
        return _CosmoBolognaLib.PosteriorDistributionVector_swap(self, v)

    def begin(self):
        return _CosmoBolognaLib.PosteriorDistributionVector_begin(self)

    def end(self):
        return _CosmoBolognaLib.PosteriorDistributionVector_end(self)

    def rbegin(self):
        return _CosmoBolognaLib.PosteriorDistributionVector_rbegin(self)

    def rend(self):
        return _CosmoBolognaLib.PosteriorDistributionVector_rend(self)

    def clear(self):
        return _CosmoBolognaLib.PosteriorDistributionVector_clear(self)

    def get_allocator(self):
        return _CosmoBolognaLib.PosteriorDistributionVector_get_allocator(self)

    def pop_back(self):
        return _CosmoBolognaLib.PosteriorDistributionVector_pop_back(self)

    def erase(self, *args):
        return _CosmoBolognaLib.PosteriorDistributionVector_erase(self, *args)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_PosteriorDistributionVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _CosmoBolognaLib.PosteriorDistributionVector_push_back(self, x)

    def front(self):
        return _CosmoBolognaLib.PosteriorDistributionVector_front(self)

    def back(self):
        return _CosmoBolognaLib.PosteriorDistributionVector_back(self)

    def assign(self, n, x):
        return _CosmoBolognaLib.PosteriorDistributionVector_assign(self, n, x)

    def resize(self, *args):
        return _CosmoBolognaLib.PosteriorDistributionVector_resize(self, *args)

    def insert(self, *args):
        return _CosmoBolognaLib.PosteriorDistributionVector_insert(self, *args)

    def reserve(self, n):
        return _CosmoBolognaLib.PosteriorDistributionVector_reserve(self, n)

    def capacity(self):
        return _CosmoBolognaLib.PosteriorDistributionVector_capacity(self)
    __swig_destroy__ = _CosmoBolognaLib.delete_PosteriorDistributionVector
    __del__ = lambda self: None
PosteriorDistributionVector_swigregister = _CosmoBolognaLib.PosteriorDistributionVector_swigregister
PosteriorDistributionVector_swigregister(PosteriorDistributionVector)

CosmologicalModel__WMAP5_ = _CosmoBolognaLib.CosmologicalModel__WMAP5_
CosmologicalModel__WMAP7_ = _CosmoBolognaLib.CosmologicalModel__WMAP7_
CosmologicalModel__WMAP9_ = _CosmoBolognaLib.CosmologicalModel__WMAP9_
CosmologicalModel__Planck13_ = _CosmoBolognaLib.CosmologicalModel__Planck13_
CosmologicalModel__Planck15_ = _CosmoBolognaLib.CosmologicalModel__Planck15_
CosmologicalModel__Planck15_TT_ = _CosmoBolognaLib.CosmologicalModel__Planck15_TT_
CosmologicalModel__Planck18_ = _CosmoBolognaLib.CosmologicalModel__Planck18_

def CosmologicalModelNames():
    return _CosmoBolognaLib.CosmologicalModelNames()
CosmologicalModelNames = _CosmoBolognaLib.CosmologicalModelNames

def CosmologicalModelCast(*args):
    return _CosmoBolognaLib.CosmologicalModelCast(*args)
CosmologicalModelCast = _CosmoBolognaLib.CosmologicalModelCast
CosmologicalParameter__Omega_matter_LCDM_ = _CosmoBolognaLib.CosmologicalParameter__Omega_matter_LCDM_
CosmologicalParameter__Omega_matter_ = _CosmoBolognaLib.CosmologicalParameter__Omega_matter_
CosmologicalParameter__Omega_baryon_ = _CosmoBolognaLib.CosmologicalParameter__Omega_baryon_
CosmologicalParameter__Omega_baryon_h2_ = _CosmoBolognaLib.CosmologicalParameter__Omega_baryon_h2_
CosmologicalParameter__Omega_neutrinos_ = _CosmoBolognaLib.CosmologicalParameter__Omega_neutrinos_
CosmologicalParameter__massless_neutrinos_ = _CosmoBolognaLib.CosmologicalParameter__massless_neutrinos_
CosmologicalParameter__massive_neutrinos_ = _CosmoBolognaLib.CosmologicalParameter__massive_neutrinos_
CosmologicalParameter__neutrino_mass_ = _CosmoBolognaLib.CosmologicalParameter__neutrino_mass_
CosmologicalParameter__Omega_DE_ = _CosmoBolognaLib.CosmologicalParameter__Omega_DE_
CosmologicalParameter__Omega_radiation_ = _CosmoBolognaLib.CosmologicalParameter__Omega_radiation_
CosmologicalParameter__H0_ = _CosmoBolognaLib.CosmologicalParameter__H0_
CosmologicalParameter__hh_ = _CosmoBolognaLib.CosmologicalParameter__hh_
CosmologicalParameter__scalar_amp_ = _CosmoBolognaLib.CosmologicalParameter__scalar_amp_
CosmologicalParameter__ln_scalar_amp_ = _CosmoBolognaLib.CosmologicalParameter__ln_scalar_amp_
CosmologicalParameter__scalar_pivot_ = _CosmoBolognaLib.CosmologicalParameter__scalar_pivot_
CosmologicalParameter__n_spec_ = _CosmoBolognaLib.CosmologicalParameter__n_spec_
CosmologicalParameter__w0_ = _CosmoBolognaLib.CosmologicalParameter__w0_
CosmologicalParameter__wa_ = _CosmoBolognaLib.CosmologicalParameter__wa_
CosmologicalParameter__fNL_ = _CosmoBolognaLib.CosmologicalParameter__fNL_
CosmologicalParameter__sigma8_ = _CosmoBolognaLib.CosmologicalParameter__sigma8_
CosmologicalParameter__tau_ = _CosmoBolognaLib.CosmologicalParameter__tau_
CosmologicalParameter__rs_ = _CosmoBolognaLib.CosmologicalParameter__rs_

def CosmologicalParameterNames():
    return _CosmoBolognaLib.CosmologicalParameterNames()
CosmologicalParameterNames = _CosmoBolognaLib.CosmologicalParameterNames

def CosmologicalParameterCast(*args):
    return _CosmoBolognaLib.CosmologicalParameterCast(*args)
CosmologicalParameterCast = _CosmoBolognaLib.CosmologicalParameterCast

def CosmologicalParameter_name(parameter):
    return _CosmoBolognaLib.CosmologicalParameter_name(parameter)
CosmologicalParameter_name = _CosmoBolognaLib.CosmologicalParameter_name
class Cosmology(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cosmology, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cosmology, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Cosmology(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Cosmology
    __del__ = lambda self: None

    def value(self, parameter):
        return _CosmoBolognaLib.Cosmology_value(self, parameter)

    def Omega_matter(self):
        return _CosmoBolognaLib.Cosmology_Omega_matter(self)

    def Omega_baryon(self):
        return _CosmoBolognaLib.Cosmology_Omega_baryon(self)

    def massless_neutrinos(self):
        return _CosmoBolognaLib.Cosmology_massless_neutrinos(self)

    def massive_neutrinos(self):
        return _CosmoBolognaLib.Cosmology_massive_neutrinos(self)

    def Omega_DE(self):
        return _CosmoBolognaLib.Cosmology_Omega_DE(self)

    def Omega_radiation(self):
        return _CosmoBolognaLib.Cosmology_Omega_radiation(self)

    def Omega_k(self):
        return _CosmoBolognaLib.Cosmology_Omega_k(self)

    def Omega_CDM(self):
        return _CosmoBolognaLib.Cosmology_Omega_CDM(self)

    def H0(self):
        return _CosmoBolognaLib.Cosmology_H0(self)

    def hh(self):
        return _CosmoBolognaLib.Cosmology_hh(self)

    def t_H(self):
        return _CosmoBolognaLib.Cosmology_t_H(self)

    def D_H(self):
        return _CosmoBolognaLib.Cosmology_D_H(self)

    def scalar_amp(self):
        return _CosmoBolognaLib.Cosmology_scalar_amp(self)

    def scalar_pivot(self):
        return _CosmoBolognaLib.Cosmology_scalar_pivot(self)

    def n_spec(self):
        return _CosmoBolognaLib.Cosmology_n_spec(self)

    def w0(self):
        return _CosmoBolognaLib.Cosmology_w0(self)

    def wa(self):
        return _CosmoBolognaLib.Cosmology_wa(self)

    def RhoZero(self):
        return _CosmoBolognaLib.Cosmology_RhoZero(self)

    def fNL(self):
        return _CosmoBolognaLib.Cosmology_fNL(self)

    def type_NG(self):
        return _CosmoBolognaLib.Cosmology_type_NG(self)

    def tau(self):
        return _CosmoBolognaLib.Cosmology_tau(self)

    def Pk0_EH(self):
        return _CosmoBolognaLib.Cosmology_Pk0_EH(self)

    def Pk0_CAMB(self):
        return _CosmoBolognaLib.Cosmology_Pk0_CAMB(self)

    def Pk0_MPTbreeze(self):
        return _CosmoBolognaLib.Cosmology_Pk0_MPTbreeze(self)

    def Pk0_CLASS(self):
        return _CosmoBolognaLib.Cosmology_Pk0_CLASS(self)

    def model(self):
        return _CosmoBolognaLib.Cosmology_model(self)

    def unit(self):
        return _CosmoBolognaLib.Cosmology_unit(self)

    def print_parameters(self):
        return _CosmoBolognaLib.Cosmology_print_parameters(self)

    def set_parameter(self, parameter, value):
        return _CosmoBolognaLib.Cosmology_set_parameter(self, parameter, value)

    def set_parameters(self, parameter, value):
        return _CosmoBolognaLib.Cosmology_set_parameters(self, parameter, value)

    def set_Omega(self, Omega_matter=0.27):
        return _CosmoBolognaLib.Cosmology_set_Omega(self, Omega_matter)

    def set_OmegaB(self, Omega_baryon=0.046):
        return _CosmoBolognaLib.Cosmology_set_OmegaB(self, Omega_baryon)

    def set_OmegaB_h2(self, Omega_baryonh2=0.0222):
        return _CosmoBolognaLib.Cosmology_set_OmegaB_h2(self, Omega_baryonh2)

    def set_OmegaM(self, Omega_matter=0.27):
        return _CosmoBolognaLib.Cosmology_set_OmegaM(self, Omega_matter)

    def set_OmegaDE(self, Omega_DE=0.73):
        return _CosmoBolognaLib.Cosmology_set_OmegaDE(self, Omega_DE)

    def set_OmegaNu(self, Omega_neutrinos=0., massless_neutrinos=3.04, massive_neutrinos=0):
        return _CosmoBolognaLib.Cosmology_set_OmegaNu(self, Omega_neutrinos, massless_neutrinos, massive_neutrinos)

    def set_Omega_radiation(self, Omega_radiation):
        return _CosmoBolognaLib.Cosmology_set_Omega_radiation(self, Omega_radiation)

    def set_hh(self, hh=0.7, warn=True):
        return _CosmoBolognaLib.Cosmology_set_hh(self, hh, warn)

    def set_H0(self, H0=70., warn=True):
        return _CosmoBolognaLib.Cosmology_set_H0(self, H0, warn)

    def set_sigma8(self, sigma8=-1.):
        return _CosmoBolognaLib.Cosmology_set_sigma8(self, sigma8)

    def set_scalar_amp(self, scalar_amp=2.46e-9):
        return _CosmoBolognaLib.Cosmology_set_scalar_amp(self, scalar_amp)

    def set_scalar_pivot(self, scalar_pivot=0.05):
        return _CosmoBolognaLib.Cosmology_set_scalar_pivot(self, scalar_pivot)

    def set_n_spec(self, n_spec):
        return _CosmoBolognaLib.Cosmology_set_n_spec(self, n_spec)

    def set_w0(self, w0=-1.):
        return _CosmoBolognaLib.Cosmology_set_w0(self, w0)

    def set_wa(self, wa=0.):
        return _CosmoBolognaLib.Cosmology_set_wa(self, wa)

    def set_RhoZero(self, RhoZero=7.5e10):
        return _CosmoBolognaLib.Cosmology_set_RhoZero(self, RhoZero)

    def set_fNL(self, fNL=0.):
        return _CosmoBolognaLib.Cosmology_set_fNL(self, fNL)

    def set_type_NG(self, type_NG=1):
        return _CosmoBolognaLib.Cosmology_set_type_NG(self, type_NG)

    def set_tau(self, tau=0.09):
        return _CosmoBolognaLib.Cosmology_set_tau(self, tau)

    def set_rs(self, rs=-1):
        return _CosmoBolognaLib.Cosmology_set_rs(self, rs)

    def set_model(self, *args):
        return _CosmoBolognaLib.Cosmology_set_model(self, *args)

    def set_unit(self, unit=True):
        return _CosmoBolognaLib.Cosmology_set_unit(self, unit)

    def OmegaM(self, redshift=0.):
        return _CosmoBolognaLib.Cosmology_OmegaM(self, redshift)

    def OmegaDE(self, redshift=0.):
        return _CosmoBolognaLib.Cosmology_OmegaDE(self, redshift)

    def OmegaR(self, redshift=0.):
        return _CosmoBolognaLib.Cosmology_OmegaR(self, redshift)

    def OmegaR_zeq(self, z_eq=3395.):
        return _CosmoBolognaLib.Cosmology_OmegaR_zeq(self, z_eq)

    def OmegaNu(self, redshift=0.):
        return _CosmoBolognaLib.Cosmology_OmegaNu(self, redshift)

    def OmegaK(self, redshift=0.):
        return _CosmoBolognaLib.Cosmology_OmegaK(self, redshift)

    def Omega(self, redshift=0.):
        return _CosmoBolognaLib.Cosmology_Omega(self, redshift)

    def Omega_neutrinos(self, *args):
        return _CosmoBolognaLib.Cosmology_Omega_neutrinos(self, *args)

    def neutrino_mass(self):
        return _CosmoBolognaLib.Cosmology_neutrino_mass(self)

    def rho_crit(self, redshift, unit1=False):
        return _CosmoBolognaLib.Cosmology_rho_crit(self, redshift, unit1)

    def rho_m(self, redshift=0., unit1=False, nu=False):
        return _CosmoBolognaLib.Cosmology_rho_m(self, redshift, unit1, nu)

    def Delta_c(self, *args):
        return _CosmoBolognaLib.Cosmology_Delta_c(self, *args)

    def Delta_vir(self, *args):
        return _CosmoBolognaLib.Cosmology_Delta_vir(self, *args)

    def M_vir(self, *args):
        return _CosmoBolognaLib.Cosmology_M_vir(self, *args)

    def r_vir(self, *args):
        return _CosmoBolognaLib.Cosmology_r_vir(self, *args)

    def w_CPL(self, redshift=0.):
        return _CosmoBolognaLib.Cosmology_w_CPL(self, redshift)

    def f_DE(self, redshift=0.):
        return _CosmoBolognaLib.Cosmology_f_DE(self, redshift)

    def EE(self, redshift=0.):
        return _CosmoBolognaLib.Cosmology_EE(self, redshift)

    def EE_inv(self, redshift=0.):
        return _CosmoBolognaLib.Cosmology_EE_inv(self, redshift)

    def EE_inv2(self, redshift=0.):
        return _CosmoBolognaLib.Cosmology_EE_inv2(self, redshift)

    def EE_inv3(self, aa):
        return _CosmoBolognaLib.Cosmology_EE_inv3(self, aa)

    def HH(self, redshift=0.):
        return _CosmoBolognaLib.Cosmology_HH(self, redshift)

    def gg(self, redshift=0.):
        return _CosmoBolognaLib.Cosmology_gg(self, redshift)

    def DD(self, redshift=0.):
        return _CosmoBolognaLib.Cosmology_DD(self, redshift)

    def sigma8(self, *args):
        return _CosmoBolognaLib.Cosmology_sigma8(self, *args)

    def lookback_time(self, redshift=0.):
        return _CosmoBolognaLib.Cosmology_lookback_time(self, redshift)

    def cosmic_time(self, redshift=0.):
        return _CosmoBolognaLib.Cosmology_cosmic_time(self, redshift)

    def EE2(self, redshift=0.):
        return _CosmoBolognaLib.Cosmology_EE2(self, redshift)

    def qq(self, redshift=0.):
        return _CosmoBolognaLib.Cosmology_qq(self, redshift)

    def Hdot(self, redshift=0.):
        return _CosmoBolognaLib.Cosmology_Hdot(self, redshift)

    def z_decoupling(self):
        return _CosmoBolognaLib.Cosmology_z_decoupling(self)

    def z_drag(self):
        return _CosmoBolognaLib.Cosmology_z_drag(self)

    def z_acc(self):
        return _CosmoBolognaLib.Cosmology_z_acc(self)

    def z_eq(self):
        return _CosmoBolognaLib.Cosmology_z_eq(self)

    def sound_speed(self, redshift, T_CMB=2.7255):
        return _CosmoBolognaLib.Cosmology_sound_speed(self, redshift, T_CMB)

    def rs_integrand(self, redshift, T_CMB=2.7255):
        return _CosmoBolognaLib.Cosmology_rs_integrand(self, redshift, T_CMB)

    def Mag_Volume_limited(self, z_max=1., mag_lim=-20.):
        return _CosmoBolognaLib.Cosmology_Mag_Volume_limited(self, z_max, mag_lim)

    def Lum_bol(self, redshift=0., flux=1.):
        return _CosmoBolognaLib.Cosmology_Lum_bol(self, redshift, flux)

    def Redshift_LCDM(self, d_c=1., z1_guess=0., z2_guess=10., go_fast=1, prec=0.0001):
        return _CosmoBolognaLib.Cosmology_Redshift_LCDM(self, d_c, z1_guess, z2_guess, go_fast, prec)

    def Redshift(self, *args):
        return _CosmoBolognaLib.Cosmology_Redshift(self, *args)

    def Redshift_time(self, time, z1_guess, z2_guess):
        return _CosmoBolognaLib.Cosmology_Redshift_time(self, time, z1_guess, z2_guess)

    def deltac(self, redshift):
        return _CosmoBolognaLib.Cosmology_deltac(self, redshift)

    def deltav_L(self, deltav_NL, b_eff, slope=0.854, offset=0.420):
        return _CosmoBolognaLib.Cosmology_deltav_L(self, deltav_NL, b_eff, slope, offset)

    def deltav_NL(self, deltav=-2.71):
        return _CosmoBolognaLib.Cosmology_deltav_NL(self, deltav)

    def r_rL(self, deltav=-2.71):
        return _CosmoBolognaLib.Cosmology_r_rL(self, deltav)

    def D_C(self, redshift):
        return _CosmoBolognaLib.Cosmology_D_C(self, redshift)

    def D_C_LCDM(self, redshift):
        return _CosmoBolognaLib.Cosmology_D_C_LCDM(self, redshift)

    def D_C_table(self, file_table, z_min, z_max, step, Redshift, dc):
        return _CosmoBolognaLib.Cosmology_D_C_table(self, file_table, z_min, z_max, step, Redshift, dc)

    def D_M(self, redshift):
        return _CosmoBolognaLib.Cosmology_D_M(self, redshift)

    def D_A(self, *args):
        return _CosmoBolognaLib.Cosmology_D_A(self, *args)

    def D_L(self, redshift):
        return _CosmoBolognaLib.Cosmology_D_L(self, redshift)

    def D_V(self, redshift):
        return _CosmoBolognaLib.Cosmology_D_V(self, redshift)

    def F_AP(self, redshift):
        return _CosmoBolognaLib.Cosmology_F_AP(self, redshift)

    def Distance(self, redshift, distance_type):
        return _CosmoBolognaLib.Cosmology_Distance(self, redshift, distance_type)

    def Volume(self, *args):
        return _CosmoBolognaLib.Cosmology_Volume(self, *args)

    def max_redshift(self, Volume, Area, z_min):
        return _CosmoBolognaLib.Cosmology_max_redshift(self, Volume, Area, z_min)

    def dV_dZdOmega(self, redshift, angle_rad):
        return _CosmoBolognaLib.Cosmology_dV_dZdOmega(self, redshift, angle_rad)

    def create_grid_sigmaM(self, *args):
        return _CosmoBolognaLib.Cosmology_create_grid_sigmaM(self, *args)

    def mass_function_fast(self, *args):
        return _CosmoBolognaLib.Cosmology_mass_function_fast(self, *args)

    def n_haloes(self, *args):
        return _CosmoBolognaLib.Cosmology_n_haloes(self, *args)

    def n_haloes_selection_function(self, *args):
        return _CosmoBolognaLib.Cosmology_n_haloes_selection_function(self, *args)

    def mass_function(self, *args):
        return _CosmoBolognaLib.Cosmology_mass_function(self, *args)

    def mass_function_selection_function_vector(self, *args):
        return _CosmoBolognaLib.Cosmology_mass_function_selection_function_vector(self, *args)

    def redshift_distribution_haloes(self, *args):
        return _CosmoBolognaLib.Cosmology_redshift_distribution_haloes(self, *args)

    def redshift_distribution_haloes_selection_function(self, *args):
        return _CosmoBolognaLib.Cosmology_redshift_distribution_haloes_selection_function(self, *args)

    def mean_redshift_haloes_selection_function(self, *args):
        return _CosmoBolognaLib.Cosmology_mean_redshift_haloes_selection_function(self, *args)

    def MhaloMin(self, *args):
        return _CosmoBolognaLib.Cosmology_MhaloMin(self, *args)

    def converted_mass(self, mass, cosmology, redshift, redshift_source=-1.):
        return _CosmoBolognaLib.Cosmology_converted_mass(self, mass, cosmology, redshift, redshift_source)

    def pw(self, ww, ff, author):
        return _CosmoBolognaLib.Cosmology_pw(self, ww, ff, author)

    def pz(self, *args):
        return _CosmoBolognaLib.Cosmology_pz(self, *args)

    def cumPw(self, ww, ff, author):
        return _CosmoBolognaLib.Cosmology_cumPw(self, ww, ff, author)

    def medianwf(self, ff, model_model, wf):
        return _CosmoBolognaLib.Cosmology_medianwf(self, ff, model_model, wf)

    def medianzf(self, *args):
        return _CosmoBolognaLib.Cosmology_medianzf(self, *args)

    def wf(self, *args):
        return _CosmoBolognaLib.Cosmology_wf(self, *args)

    def unevolved_mass_function(self, mass_accr):
        return _CosmoBolognaLib.Cosmology_unevolved_mass_function(self, mass_accr)

    def As(self, sigma8):
        return _CosmoBolognaLib.Cosmology_As(self, sigma8)

    def sigma8_interpolated(self, redshift):
        return _CosmoBolognaLib.Cosmology_sigma8_interpolated(self, redshift)

    def Pk_output_file(self, *args):
        return _CosmoBolognaLib.Cosmology_Pk_output_file(self, *args)

    def run_CAMB(self, *args):
        return _CosmoBolognaLib.Cosmology_run_CAMB(self, *args)

    def Table_PkCodes(self, *args):
        return _CosmoBolognaLib.Cosmology_Table_PkCodes(self, *args)

    def Table_XiCodes(self, code, NL, rr, xi, redshift, output_root, k_max, file_par):
        return _CosmoBolognaLib.Cosmology_Table_XiCodes(self, code, NL, rr, xi, redshift, output_root, k_max, file_par)

    def Pk_0(self, *args):
        return _CosmoBolognaLib.Cosmology_Pk_0(self, *args)

    def Pk(self, *args):
        return _CosmoBolognaLib.Cosmology_Pk(self, *args)

    def Pk_Kaiser_multipoles(self, *args):
        return _CosmoBolognaLib.Cosmology_Pk_Kaiser_multipoles(self, *args)

    def Pk_DeWiggle(self, *args):
        return _CosmoBolognaLib.Cosmology_Pk_DeWiggle(self, *args)

    def sigma2R(self, *args):
        return _CosmoBolognaLib.Cosmology_sigma2R(self, *args)

    def sigma2M(self, *args):
        return _CosmoBolognaLib.Cosmology_sigma2M(self, *args)

    def dnsigma2R(self, *args):
        return _CosmoBolognaLib.Cosmology_dnsigma2R(self, *args)

    def dnsigma2M(self, *args):
        return _CosmoBolognaLib.Cosmology_dnsigma2M(self, *args)

    def concentration(self, *args):
        return _CosmoBolognaLib.Cosmology_concentration(self, *args)

    def concentration2(self, Vmax, Rmax):
        return _CosmoBolognaLib.Cosmology_concentration2(self, Vmax, Rmax)

    def c_vir(self, *args):
        return _CosmoBolognaLib.Cosmology_c_vir(self, *args)

    def density_profile(self, *args):
        return _CosmoBolognaLib.Cosmology_density_profile(self, *args)

    def density_profile_FourierSpace(self, *args):
        return _CosmoBolognaLib.Cosmology_density_profile_FourierSpace(self, *args)

    def Mass_Delta(self, Mass, Delta_in, Delta_out, conc, is_input_conc, rRmin_guess=1.e-3, rRmax_guess=10.):
        return _CosmoBolognaLib.Cosmology_Mass_Delta(self, Mass, Delta_in, Delta_out, conc, is_input_conc, rRmin_guess, rRmax_guess)

    def xi_DM(self, *args):
        return _CosmoBolognaLib.Cosmology_xi_DM(self, *args)

    def wtheta_DM(self, *args):
        return _CosmoBolognaLib.Cosmology_wtheta_DM(self, *args)

    def C_l_DM(self, *args):
        return _CosmoBolognaLib.Cosmology_C_l_DM(self, *args)

    def xi_DM_DeWiggle(self, *args):
        return _CosmoBolognaLib.Cosmology_xi_DM_DeWiggle(self, *args)

    def get_xi(self, *args):
        return _CosmoBolognaLib.Cosmology_get_xi(self, *args)

    def get_barred_xi(self, *args):
        return _CosmoBolognaLib.Cosmology_get_barred_xi(self, *args)

    def wp_DM(self, *args):
        return _CosmoBolognaLib.Cosmology_wp_DM(self, *args)

    def k_star(self, *args):
        return _CosmoBolognaLib.Cosmology_k_star(self, *args)

    def sigmaR_DM(self, *args):
        return _CosmoBolognaLib.Cosmology_sigmaR_DM(self, *args)

    def sigma8_Pk(self, *args):
        return _CosmoBolognaLib.Cosmology_sigma8_Pk(self, *args)

    def bias_halo(self, *args):
        return _CosmoBolognaLib.Cosmology_bias_halo(self, *args)

    def bias_eff(self, *args):
        return _CosmoBolognaLib.Cosmology_bias_eff(self, *args)

    def bias_eff_mass_grid(self, *args):
        return _CosmoBolognaLib.Cosmology_bias_eff_mass_grid(self, *args)

    def bias_eff_mass(self, *args):
        return _CosmoBolognaLib.Cosmology_bias_eff_mass(self, *args)

    def generate_bias_eff_grid_one_cosmopar(self, *args):
        return _CosmoBolognaLib.Cosmology_generate_bias_eff_grid_one_cosmopar(self, *args)

    def generate_bias_eff_grid_two_cosmopars(self, *args):
        return _CosmoBolognaLib.Cosmology_generate_bias_eff_grid_two_cosmopars(self, *args)

    def bias_eff_selection_function(self, *args):
        return _CosmoBolognaLib.Cosmology_bias_eff_selection_function(self, *args)

    def linear_growth_rate(self, redshift, kk=-1.):
        return _CosmoBolognaLib.Cosmology_linear_growth_rate(self, redshift, kk)

    def fsigma8(self, *args):
        return _CosmoBolognaLib.Cosmology_fsigma8(self, *args)

    def beta(self, *args):
        return _CosmoBolognaLib.Cosmology_beta(self, *args)

    def error_beta(self, *args):
        return _CosmoBolognaLib.Cosmology_error_beta(self, *args)

    def error_beta_measured(self, *args):
        return _CosmoBolognaLib.Cosmology_error_beta_measured(self, *args)

    def quadrupole(self, *args):
        return _CosmoBolognaLib.Cosmology_quadrupole(self, *args)

    def square_bulk_flow(self, *args):
        return _CosmoBolognaLib.Cosmology_square_bulk_flow(self, *args)

    def square_bulk_flow_Table(self, rr, k_int_min, lgkk, lgPk, redshift):
        return _CosmoBolognaLib.Cosmology_square_bulk_flow_Table(self, rr, k_int_min, lgkk, lgPk, redshift)

    def square_velocity_dispersion(self, *args):
        return _CosmoBolognaLib.Cosmology_square_velocity_dispersion(self, *args)

    def CMN(self, *args):
        return _CosmoBolognaLib.Cosmology_CMN(self, *args)

    def Sn_PT(self, *args):
        return _CosmoBolognaLib.Cosmology_Sn_PT(self, *args)

    def Sigman_PT(self, *args):
        return _CosmoBolognaLib.Cosmology_Sigman_PT(self, *args)

    def xi0_Kaiser(self, *args):
        return _CosmoBolognaLib.Cosmology_xi0_Kaiser(self, *args)

    def xi2D_DispersionModel(self, *args):
        return _CosmoBolognaLib.Cosmology_xi2D_DispersionModel(self, *args)

    def xi_star(self, *args):
        return _CosmoBolognaLib.Cosmology_xi_star(self, *args)

    def xisnl_gnw(self, *args):
        return _CosmoBolognaLib.Cosmology_xisnl_gnw(self, *args)

    def xis_gBAO(self, *args):
        return _CosmoBolognaLib.Cosmology_xis_gBAO(self, *args)

    def xi2D_CW(self, *args):
        return _CosmoBolognaLib.Cosmology_xi2D_CW(self, *args)

    def rs(self, *args):
        return _CosmoBolognaLib.Cosmology_rs(self, *args)

    def rs_EH(self, *args):
        return _CosmoBolognaLib.Cosmology_rs_EH(self, *args)

    def rs_CAMB(self):
        return _CosmoBolognaLib.Cosmology_rs_CAMB(self)

    def ys(self, *args):
        return _CosmoBolognaLib.Cosmology_ys(self, *args)

    def Az(self, redshift):
        return _CosmoBolognaLib.Cosmology_Az(self, redshift)

    def linear_point(self, *args):
        return _CosmoBolognaLib.Cosmology_linear_point(self, *args)

    def Am(self, *args):
        return _CosmoBolognaLib.Cosmology_Am(self, *args)

    def potential_spectral_amplitude(self, *args):
        return _CosmoBolognaLib.Cosmology_potential_spectral_amplitude(self, *args)

    def bispectrum(self, *args):
        return _CosmoBolognaLib.Cosmology_bispectrum(self, *args)

    def mrk(self, *args):
        return _CosmoBolognaLib.Cosmology_mrk(self, *args)

    def frk(self, *args):
        return _CosmoBolognaLib.Cosmology_frk(self, *args)

    def bias_kernel(self, arg2, arg3):
        return _CosmoBolognaLib.Cosmology_bias_kernel(self, arg2, arg3)

    def frk_test(self, *args):
        return _CosmoBolognaLib.Cosmology_frk_test(self, *args)

    def bias_correction(self, *args):
        return _CosmoBolognaLib.Cosmology_bias_correction(self, *args)

    def skewness(self, *args):
        return _CosmoBolognaLib.Cosmology_skewness(self, *args)

    def dskewnessdM(self, *args):
        return _CosmoBolognaLib.Cosmology_dskewnessdM(self, *args)

    def MF_correction(self, *args):
        return _CosmoBolognaLib.Cosmology_MF_correction(self, *args)

    def f_nu(self, SS, del_v, del_c):
        return _CosmoBolognaLib.Cosmology_f_nu(self, SS, del_v, del_c)

    def size_function(self, *args):
        return _CosmoBolognaLib.Cosmology_size_function(self, *args)

    def XiMultipoles(self, nbins, rMin, rMax, kk, Pk0, Pk2, Pk4, IntegrationMethod=1):
        return _CosmoBolognaLib.Cosmology_XiMultipoles(self, nbins, rMin, rMax, kk, Pk0, Pk2, Pk4, IntegrationMethod)

    def XiMonopole_covariance(self, nbins, rMin, rMax, nn, Volume, kk, Pk0, IntegrationMethod=1):
        return _CosmoBolognaLib.Cosmology_XiMonopole_covariance(self, nbins, rMin, rMax, nn, Volume, kk, Pk0, IntegrationMethod)

    def XiMultipoles_covariance(self, nbins, rMin, rMax, nn, Volume, kk, Pk0, Pk2, Pk4, IntegrationMethod=1):
        return _CosmoBolognaLib.Cosmology_XiMultipoles_covariance(self, nbins, rMin, rMax, nn, Volume, kk, Pk0, Pk2, Pk4, IntegrationMethod)

    def F2(self, k, q, kq):
        return _CosmoBolognaLib.Cosmology_F2(self, k, q, kq)

    def G2(self, k, q, kq):
        return _CosmoBolognaLib.Cosmology_G2(self, k, q, kq)

    def f_k(self, k, PkLin, qmin, qmax, prec=1.e-3):
        return _CosmoBolognaLib.Cosmology_f_k(self, k, PkLin, qmin, qmax, prec)

    def g_k(self, k, PkLin, qmin, qmax, prec=1.e-3):
        return _CosmoBolognaLib.Cosmology_g_k(self, k, PkLin, qmin, qmax, prec)

    def Pk_1loop(self, kk, PkLin, corrtype, qmin, qmax, prec=1.e-3):
        return _CosmoBolognaLib.Cosmology_Pk_1loop(self, kk, PkLin, corrtype, qmin, qmax, prec)

    def Pk_DeltaDelta(self, *args):
        return _CosmoBolognaLib.Cosmology_Pk_DeltaDelta(self, *args)

    def Pk_DeltaTheta(self, *args):
        return _CosmoBolognaLib.Cosmology_Pk_DeltaTheta(self, *args)

    def Pk_ThetaTheta(self, *args):
        return _CosmoBolognaLib.Cosmology_Pk_ThetaTheta(self, *args)

    def denominator_Q(self, r1, r2, theta, rr, xi_DM):
        return _CosmoBolognaLib.Cosmology_denominator_Q(self, r1, r2, theta, rr, xi_DM)

    def integrals_Q_nonLocal(self, xi_DM, Phi, rr, kk, Pk_DM, prec):
        return _CosmoBolognaLib.Cosmology_integrals_Q_nonLocal(self, xi_DM, Phi, rr, kk, Pk_DM, prec)

    def Gamma_3PCF(self, r1, r2, theta, xi, dPhi):
        return _CosmoBolognaLib.Cosmology_Gamma_3PCF(self, r1, r2, theta, xi, dPhi)

    def Q_nonLocal(self, *args):
        return _CosmoBolognaLib.Cosmology_Q_nonLocal(self, *args)

    def integrals_zeta_Slepian(self, xi_DM, xi_DM_m1, xi_DM_p1, xi_DM_2, rr, kk, Pk_DM):
        return _CosmoBolognaLib.Cosmology_integrals_zeta_Slepian(self, xi_DM, xi_DM_m1, xi_DM_p1, xi_DM_2, rr, kk, Pk_DM)

    def zeta_precyclic_Slepian(self, *args):
        return _CosmoBolognaLib.Cosmology_zeta_precyclic_Slepian(self, *args)

    def zeta_expansion_Slepian(self, r1, r2, b1, b2, rr, xi_DM, xi_DM_m1, xi_DM_p1, xi_DM_2, norders=9, prec=1.e-3):
        return _CosmoBolognaLib.Cosmology_zeta_expansion_Slepian(self, r1, r2, b1, b2, rr, xi_DM, xi_DM_m1, xi_DM_p1, xi_DM_2, norders, prec)

    def zeta_DM_Slepian(self, r1, r2, theta, rr, xi_DM, xi_DM_m1, xi_DM_p1, xi_DM_2, kk, Pk_DM, norders=9, prec=1.e-3):
        return _CosmoBolognaLib.Cosmology_zeta_DM_Slepian(self, r1, r2, theta, rr, xi_DM, xi_DM_m1, xi_DM_p1, xi_DM_2, kk, Pk_DM, norders, prec)

    def Q_DM_Slepian(self, r1, r2, theta, rr, xi_DM, xi_DM_m1, xi_DM_p1, xi_DM_2, kk, Pk_DM, norders=9, prec=1.e-3):
        return _CosmoBolognaLib.Cosmology_Q_DM_Slepian(self, r1, r2, theta, rr, xi_DM, xi_DM_m1, xi_DM_p1, xi_DM_2, kk, Pk_DM, norders, prec)

    def integrals_zeta_BarrigaGatzanaga(self, xi_DM, Phi, rr, kk, Pk_DM):
        return _CosmoBolognaLib.Cosmology_integrals_zeta_BarrigaGatzanaga(self, xi_DM, Phi, rr, kk, Pk_DM)

    def zeta_single_BarrigaGatzanaga(self, r1, r2, theta, xi, dxi, dPhi):
        return _CosmoBolognaLib.Cosmology_zeta_single_BarrigaGatzanaga(self, r1, r2, theta, xi, dxi, dPhi)

    def zeta_DM_BarrigaGatzanaga(self, r1, r2, theta, rr, xi_DM, Phi, kk, Pk_DM):
        return _CosmoBolognaLib.Cosmology_zeta_DM_BarrigaGatzanaga(self, r1, r2, theta, rr, xi_DM, Phi, kk, Pk_DM)

    def Q_DM_BarrigaGatzanaga(self, r1, r2, theta, rr, xi_DM, Phi, kk, Pk_DM):
        return _CosmoBolognaLib.Cosmology_Q_DM_BarrigaGatzanaga(self, r1, r2, theta, rr, xi_DM, Phi, kk, Pk_DM)

    def zeta_DM(self, r1, r2, theta, model, kk, Pk_DM):
        return _CosmoBolognaLib.Cosmology_zeta_DM(self, r1, r2, theta, model, kk, Pk_DM)

    def Q_DM(self, r1, r2, theta, model, kk, Pk_DM):
        return _CosmoBolognaLib.Cosmology_Q_DM(self, r1, r2, theta, model, kk, Pk_DM)

    def zeta_halo(self, r1, r2, theta, b1, b2, model, kk, Pk_DM):
        return _CosmoBolognaLib.Cosmology_zeta_halo(self, r1, r2, theta, b1, b2, model, kk, Pk_DM)

    def Q_halo(self, *args):
        return _CosmoBolognaLib.Cosmology_Q_halo(self, *args)

    def zeta_DM_eq(self, rr, model, kk, Pk_DM):
        return _CosmoBolognaLib.Cosmology_zeta_DM_eq(self, rr, model, kk, Pk_DM)

    def Q_DM_eq(self, rr, model, kk, Pk_DM):
        return _CosmoBolognaLib.Cosmology_Q_DM_eq(self, rr, model, kk, Pk_DM)

    def zeta_multipoles_covariance(self, Volume, nObjects, l, l_prime, r1, r2, r1_prime, r2_prime, deltaR, kk, Pk, rr, Xi, prec=1.e-3):
        return _CosmoBolognaLib.Cosmology_zeta_multipoles_covariance(self, Volume, nObjects, l, l_prime, r1, r2, r1_prime, r2_prime, deltaR, kk, Pk, rr, Xi, prec)

    def zeta_covariance(self, *args):
        return _CosmoBolognaLib.Cosmology_zeta_covariance(self, *args)

    def xi_r_n(self, xi_n, rr, nn, kk, Pk):
        return _CosmoBolognaLib.Cosmology_xi_r_n(self, xi_n, rr, nn, kk, Pk)

    def xi_r_n_pm(self, xi_n_p, xi_n_m, rr, nn, kk, Pk):
        return _CosmoBolognaLib.Cosmology_xi_r_n_pm(self, xi_n_p, xi_n_m, rr, nn, kk, Pk)

    def eff_l_l1(self, eff, rr, l, l1, kk, Pk):
        return _CosmoBolognaLib.Cosmology_eff_l_l1(self, eff, rr, l, l1, kk, Pk)

    def I_ELL_ell(self, II, rr, ll, LL, kk, Pk):
        return _CosmoBolognaLib.Cosmology_I_ELL_ell(self, II, rr, ll, LL, kk, Pk)

    def k_ell(self, KK, rr, ll, kk, Pk):
        return _CosmoBolognaLib.Cosmology_k_ell(self, KK, rr, ll, kk, Pk)

    def zeta_ell_0_factor(self, b1, gamma, beta):
        return _CosmoBolognaLib.Cosmology_zeta_ell_0_factor(self, b1, gamma, beta)

    def zeta_ell_1_factor(self, b1, beta):
        return _CosmoBolognaLib.Cosmology_zeta_ell_1_factor(self, b1, beta)

    def zeta_ell_2_factor(self, b1, gamma, beta):
        return _CosmoBolognaLib.Cosmology_zeta_ell_2_factor(self, b1, gamma, beta)

    def zeta_ell_3_factor(self, b1, beta):
        return _CosmoBolognaLib.Cosmology_zeta_ell_3_factor(self, b1, beta)

    def zeta_ell_4_factor(self, b1, beta):
        return _CosmoBolognaLib.Cosmology_zeta_ell_4_factor(self, b1, beta)

    def zeta_ell_k_factor(self, b1, beta):
        return _CosmoBolognaLib.Cosmology_zeta_ell_k_factor(self, b1, beta)

    def zeta_ell_0_factor_tidal(self, gamma_t, beta):
        return _CosmoBolognaLib.Cosmology_zeta_ell_0_factor_tidal(self, gamma_t, beta)

    def zeta_ell_2_factor_tidal(self, gamma_t, beta):
        return _CosmoBolognaLib.Cosmology_zeta_ell_2_factor_tidal(self, gamma_t, beta)

    def zeta_ell_4_factor_tidal(self, gamma_t, beta):
        return _CosmoBolognaLib.Cosmology_zeta_ell_4_factor_tidal(self, gamma_t, beta)

    def zeta_ell_precyclic(self, r1, r2, ell, b1, b2, bt, beta, interp_xi_ell, use_k, interp_k_ell):
        return _CosmoBolognaLib.Cosmology_zeta_ell_precyclic(self, r1, r2, ell, b1, b2, bt, beta, interp_xi_ell, use_k, interp_k_ell)

    def zeta_RSD(self, *args):
        return _CosmoBolognaLib.Cosmology_zeta_RSD(self, *args)
Cosmology_swigregister = _CosmoBolognaLib.Cosmology_swigregister
Cosmology_swigregister(Cosmology)


def GSL_bias_kernel_wrapper(arg1, arg2):
    return _CosmoBolognaLib.GSL_bias_kernel_wrapper(arg1, arg2)
GSL_bias_kernel_wrapper = _CosmoBolognaLib.GSL_bias_kernel_wrapper

def func_xi_EH_GSL(arg1, arg2):
    return _CosmoBolognaLib.func_xi_EH_GSL(arg1, arg2)
func_xi_EH_GSL = _CosmoBolognaLib.func_xi_EH_GSL

def func_sigma2M_EH_GSL(arg1, arg2):
    return _CosmoBolognaLib.func_sigma2M_EH_GSL(arg1, arg2)
func_sigma2M_EH_GSL = _CosmoBolognaLib.func_sigma2M_EH_GSL

def bias_kernel2(arg1, arg2):
    return _CosmoBolognaLib.bias_kernel2(arg1, arg2)
bias_kernel2 = _CosmoBolognaLib.bias_kernel2

def skewness_kernel(arg1, arg2, arg3):
    return _CosmoBolognaLib.skewness_kernel(arg1, arg2, arg3)
skewness_kernel = _CosmoBolognaLib.skewness_kernel
class GSL_f_pars(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GSL_f_pars, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GSL_f_pars, name)
    __repr__ = _swig_repr
    __swig_setmethods__["kt"] = _CosmoBolognaLib.GSL_f_pars_kt_set
    __swig_getmethods__["kt"] = _CosmoBolognaLib.GSL_f_pars_kt_get
    if _newclass:
        kt = _swig_property(_CosmoBolognaLib.GSL_f_pars_kt_get, _CosmoBolognaLib.GSL_f_pars_kt_set)
    __swig_setmethods__["mass"] = _CosmoBolognaLib.GSL_f_pars_mass_set
    __swig_getmethods__["mass"] = _CosmoBolognaLib.GSL_f_pars_mass_get
    if _newclass:
        mass = _swig_property(_CosmoBolognaLib.GSL_f_pars_mass_get, _CosmoBolognaLib.GSL_f_pars_mass_set)
    __swig_setmethods__["method_Pk"] = _CosmoBolognaLib.GSL_f_pars_method_Pk_set
    __swig_getmethods__["method_Pk"] = _CosmoBolognaLib.GSL_f_pars_method_Pk_get
    if _newclass:
        method_Pk = _swig_property(_CosmoBolognaLib.GSL_f_pars_method_Pk_get, _CosmoBolognaLib.GSL_f_pars_method_Pk_set)
    __swig_setmethods__["output_root"] = _CosmoBolognaLib.GSL_f_pars_output_root_set
    __swig_getmethods__["output_root"] = _CosmoBolognaLib.GSL_f_pars_output_root_get
    if _newclass:
        output_root = _swig_property(_CosmoBolognaLib.GSL_f_pars_output_root_get, _CosmoBolognaLib.GSL_f_pars_output_root_set)
    __swig_setmethods__["norm"] = _CosmoBolognaLib.GSL_f_pars_norm_set
    __swig_getmethods__["norm"] = _CosmoBolognaLib.GSL_f_pars_norm_get
    if _newclass:
        norm = _swig_property(_CosmoBolognaLib.GSL_f_pars_norm_get, _CosmoBolognaLib.GSL_f_pars_norm_set)
    __swig_setmethods__["k_min"] = _CosmoBolognaLib.GSL_f_pars_k_min_set
    __swig_getmethods__["k_min"] = _CosmoBolognaLib.GSL_f_pars_k_min_get
    if _newclass:
        k_min = _swig_property(_CosmoBolognaLib.GSL_f_pars_k_min_get, _CosmoBolognaLib.GSL_f_pars_k_min_set)
    __swig_setmethods__["k_max"] = _CosmoBolognaLib.GSL_f_pars_k_max_set
    __swig_getmethods__["k_max"] = _CosmoBolognaLib.GSL_f_pars_k_max_get
    if _newclass:
        k_max = _swig_property(_CosmoBolognaLib.GSL_f_pars_k_max_get, _CosmoBolognaLib.GSL_f_pars_k_max_set)
    __swig_setmethods__["GSL"] = _CosmoBolognaLib.GSL_f_pars_GSL_set
    __swig_getmethods__["GSL"] = _CosmoBolognaLib.GSL_f_pars_GSL_get
    if _newclass:
        GSL = _swig_property(_CosmoBolognaLib.GSL_f_pars_GSL_get, _CosmoBolognaLib.GSL_f_pars_GSL_set)
    __swig_setmethods__["prec"] = _CosmoBolognaLib.GSL_f_pars_prec_set
    __swig_getmethods__["prec"] = _CosmoBolognaLib.GSL_f_pars_prec_get
    if _newclass:
        prec = _swig_property(_CosmoBolognaLib.GSL_f_pars_prec_get, _CosmoBolognaLib.GSL_f_pars_prec_set)
    __swig_setmethods__["file_par"] = _CosmoBolognaLib.GSL_f_pars_file_par_set
    __swig_getmethods__["file_par"] = _CosmoBolognaLib.GSL_f_pars_file_par_get
    if _newclass:
        file_par = _swig_property(_CosmoBolognaLib.GSL_f_pars_file_par_get, _CosmoBolognaLib.GSL_f_pars_file_par_set)
    __swig_setmethods__["pt_Cosmology"] = _CosmoBolognaLib.GSL_f_pars_pt_Cosmology_set
    __swig_getmethods__["pt_Cosmology"] = _CosmoBolognaLib.GSL_f_pars_pt_Cosmology_get
    if _newclass:
        pt_Cosmology = _swig_property(_CosmoBolognaLib.GSL_f_pars_pt_Cosmology_get, _CosmoBolognaLib.GSL_f_pars_pt_Cosmology_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_GSL_f_pars()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_GSL_f_pars
    __del__ = lambda self: None
GSL_f_pars_swigregister = _CosmoBolognaLib.GSL_f_pars_swigregister
GSL_f_pars_swigregister(GSL_f_pars)

class STR_xi_EH(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_xi_EH, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_xi_EH, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Omega_matter"] = _CosmoBolognaLib.STR_xi_EH_Omega_matter_set
    __swig_getmethods__["Omega_matter"] = _CosmoBolognaLib.STR_xi_EH_Omega_matter_get
    if _newclass:
        Omega_matter = _swig_property(_CosmoBolognaLib.STR_xi_EH_Omega_matter_get, _CosmoBolognaLib.STR_xi_EH_Omega_matter_set)
    __swig_setmethods__["Omega_baryon"] = _CosmoBolognaLib.STR_xi_EH_Omega_baryon_set
    __swig_getmethods__["Omega_baryon"] = _CosmoBolognaLib.STR_xi_EH_Omega_baryon_get
    if _newclass:
        Omega_baryon = _swig_property(_CosmoBolognaLib.STR_xi_EH_Omega_baryon_get, _CosmoBolognaLib.STR_xi_EH_Omega_baryon_set)
    __swig_setmethods__["Omega_neutrinos"] = _CosmoBolognaLib.STR_xi_EH_Omega_neutrinos_set
    __swig_getmethods__["Omega_neutrinos"] = _CosmoBolognaLib.STR_xi_EH_Omega_neutrinos_get
    if _newclass:
        Omega_neutrinos = _swig_property(_CosmoBolognaLib.STR_xi_EH_Omega_neutrinos_get, _CosmoBolognaLib.STR_xi_EH_Omega_neutrinos_set)
    __swig_setmethods__["massless_neutrinos"] = _CosmoBolognaLib.STR_xi_EH_massless_neutrinos_set
    __swig_getmethods__["massless_neutrinos"] = _CosmoBolognaLib.STR_xi_EH_massless_neutrinos_get
    if _newclass:
        massless_neutrinos = _swig_property(_CosmoBolognaLib.STR_xi_EH_massless_neutrinos_get, _CosmoBolognaLib.STR_xi_EH_massless_neutrinos_set)
    __swig_setmethods__["massive_neutrinos"] = _CosmoBolognaLib.STR_xi_EH_massive_neutrinos_set
    __swig_getmethods__["massive_neutrinos"] = _CosmoBolognaLib.STR_xi_EH_massive_neutrinos_get
    if _newclass:
        massive_neutrinos = _swig_property(_CosmoBolognaLib.STR_xi_EH_massive_neutrinos_get, _CosmoBolognaLib.STR_xi_EH_massive_neutrinos_set)
    __swig_setmethods__["Omega_DE"] = _CosmoBolognaLib.STR_xi_EH_Omega_DE_set
    __swig_getmethods__["Omega_DE"] = _CosmoBolognaLib.STR_xi_EH_Omega_DE_get
    if _newclass:
        Omega_DE = _swig_property(_CosmoBolognaLib.STR_xi_EH_Omega_DE_get, _CosmoBolognaLib.STR_xi_EH_Omega_DE_set)
    __swig_setmethods__["Omega_radiation"] = _CosmoBolognaLib.STR_xi_EH_Omega_radiation_set
    __swig_getmethods__["Omega_radiation"] = _CosmoBolognaLib.STR_xi_EH_Omega_radiation_get
    if _newclass:
        Omega_radiation = _swig_property(_CosmoBolognaLib.STR_xi_EH_Omega_radiation_get, _CosmoBolognaLib.STR_xi_EH_Omega_radiation_set)
    __swig_setmethods__["hh"] = _CosmoBolognaLib.STR_xi_EH_hh_set
    __swig_getmethods__["hh"] = _CosmoBolognaLib.STR_xi_EH_hh_get
    if _newclass:
        hh = _swig_property(_CosmoBolognaLib.STR_xi_EH_hh_get, _CosmoBolognaLib.STR_xi_EH_hh_set)
    __swig_setmethods__["scalar_amp"] = _CosmoBolognaLib.STR_xi_EH_scalar_amp_set
    __swig_getmethods__["scalar_amp"] = _CosmoBolognaLib.STR_xi_EH_scalar_amp_get
    if _newclass:
        scalar_amp = _swig_property(_CosmoBolognaLib.STR_xi_EH_scalar_amp_get, _CosmoBolognaLib.STR_xi_EH_scalar_amp_set)
    __swig_setmethods__["scalar_pivot"] = _CosmoBolognaLib.STR_xi_EH_scalar_pivot_set
    __swig_getmethods__["scalar_pivot"] = _CosmoBolognaLib.STR_xi_EH_scalar_pivot_get
    if _newclass:
        scalar_pivot = _swig_property(_CosmoBolognaLib.STR_xi_EH_scalar_pivot_get, _CosmoBolognaLib.STR_xi_EH_scalar_pivot_set)
    __swig_setmethods__["n_spec"] = _CosmoBolognaLib.STR_xi_EH_n_spec_set
    __swig_getmethods__["n_spec"] = _CosmoBolognaLib.STR_xi_EH_n_spec_get
    if _newclass:
        n_spec = _swig_property(_CosmoBolognaLib.STR_xi_EH_n_spec_get, _CosmoBolognaLib.STR_xi_EH_n_spec_set)
    __swig_setmethods__["w0"] = _CosmoBolognaLib.STR_xi_EH_w0_set
    __swig_getmethods__["w0"] = _CosmoBolognaLib.STR_xi_EH_w0_get
    if _newclass:
        w0 = _swig_property(_CosmoBolognaLib.STR_xi_EH_w0_get, _CosmoBolognaLib.STR_xi_EH_w0_set)
    __swig_setmethods__["wa"] = _CosmoBolognaLib.STR_xi_EH_wa_set
    __swig_getmethods__["wa"] = _CosmoBolognaLib.STR_xi_EH_wa_get
    if _newclass:
        wa = _swig_property(_CosmoBolognaLib.STR_xi_EH_wa_get, _CosmoBolognaLib.STR_xi_EH_wa_set)
    __swig_setmethods__["fNL"] = _CosmoBolognaLib.STR_xi_EH_fNL_set
    __swig_getmethods__["fNL"] = _CosmoBolognaLib.STR_xi_EH_fNL_get
    if _newclass:
        fNL = _swig_property(_CosmoBolognaLib.STR_xi_EH_fNL_get, _CosmoBolognaLib.STR_xi_EH_fNL_set)
    __swig_setmethods__["type_NG"] = _CosmoBolognaLib.STR_xi_EH_type_NG_set
    __swig_getmethods__["type_NG"] = _CosmoBolognaLib.STR_xi_EH_type_NG_get
    if _newclass:
        type_NG = _swig_property(_CosmoBolognaLib.STR_xi_EH_type_NG_get, _CosmoBolognaLib.STR_xi_EH_type_NG_set)
    __swig_setmethods__["tau"] = _CosmoBolognaLib.STR_xi_EH_tau_set
    __swig_getmethods__["tau"] = _CosmoBolognaLib.STR_xi_EH_tau_get
    if _newclass:
        tau = _swig_property(_CosmoBolognaLib.STR_xi_EH_tau_get, _CosmoBolognaLib.STR_xi_EH_tau_set)
    __swig_setmethods__["model"] = _CosmoBolognaLib.STR_xi_EH_model_set
    __swig_getmethods__["model"] = _CosmoBolognaLib.STR_xi_EH_model_get
    if _newclass:
        model = _swig_property(_CosmoBolognaLib.STR_xi_EH_model_get, _CosmoBolognaLib.STR_xi_EH_model_set)
    __swig_setmethods__["unit"] = _CosmoBolognaLib.STR_xi_EH_unit_set
    __swig_getmethods__["unit"] = _CosmoBolognaLib.STR_xi_EH_unit_get
    if _newclass:
        unit = _swig_property(_CosmoBolognaLib.STR_xi_EH_unit_get, _CosmoBolognaLib.STR_xi_EH_unit_set)
    __swig_setmethods__["method_Pk"] = _CosmoBolognaLib.STR_xi_EH_method_Pk_set
    __swig_getmethods__["method_Pk"] = _CosmoBolognaLib.STR_xi_EH_method_Pk_get
    if _newclass:
        method_Pk = _swig_property(_CosmoBolognaLib.STR_xi_EH_method_Pk_get, _CosmoBolognaLib.STR_xi_EH_method_Pk_set)
    __swig_setmethods__["rr"] = _CosmoBolognaLib.STR_xi_EH_rr_set
    __swig_getmethods__["rr"] = _CosmoBolognaLib.STR_xi_EH_rr_get
    if _newclass:
        rr = _swig_property(_CosmoBolognaLib.STR_xi_EH_rr_get, _CosmoBolognaLib.STR_xi_EH_rr_set)
    __swig_setmethods__["redshift"] = _CosmoBolognaLib.STR_xi_EH_redshift_set
    __swig_getmethods__["redshift"] = _CosmoBolognaLib.STR_xi_EH_redshift_get
    if _newclass:
        redshift = _swig_property(_CosmoBolognaLib.STR_xi_EH_redshift_get, _CosmoBolognaLib.STR_xi_EH_redshift_set)
    __swig_setmethods__["aa"] = _CosmoBolognaLib.STR_xi_EH_aa_set
    __swig_getmethods__["aa"] = _CosmoBolognaLib.STR_xi_EH_aa_get
    if _newclass:
        aa = _swig_property(_CosmoBolognaLib.STR_xi_EH_aa_get, _CosmoBolognaLib.STR_xi_EH_aa_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_xi_EH()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_xi_EH
    __del__ = lambda self: None
STR_xi_EH_swigregister = _CosmoBolognaLib.STR_xi_EH_swigregister
STR_xi_EH_swigregister(STR_xi_EH)

class STR_sigma2M_EH(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_sigma2M_EH, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_sigma2M_EH, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Omega_matter"] = _CosmoBolognaLib.STR_sigma2M_EH_Omega_matter_set
    __swig_getmethods__["Omega_matter"] = _CosmoBolognaLib.STR_sigma2M_EH_Omega_matter_get
    if _newclass:
        Omega_matter = _swig_property(_CosmoBolognaLib.STR_sigma2M_EH_Omega_matter_get, _CosmoBolognaLib.STR_sigma2M_EH_Omega_matter_set)
    __swig_setmethods__["Omega_baryon"] = _CosmoBolognaLib.STR_sigma2M_EH_Omega_baryon_set
    __swig_getmethods__["Omega_baryon"] = _CosmoBolognaLib.STR_sigma2M_EH_Omega_baryon_get
    if _newclass:
        Omega_baryon = _swig_property(_CosmoBolognaLib.STR_sigma2M_EH_Omega_baryon_get, _CosmoBolognaLib.STR_sigma2M_EH_Omega_baryon_set)
    __swig_setmethods__["Omega_neutrinos"] = _CosmoBolognaLib.STR_sigma2M_EH_Omega_neutrinos_set
    __swig_getmethods__["Omega_neutrinos"] = _CosmoBolognaLib.STR_sigma2M_EH_Omega_neutrinos_get
    if _newclass:
        Omega_neutrinos = _swig_property(_CosmoBolognaLib.STR_sigma2M_EH_Omega_neutrinos_get, _CosmoBolognaLib.STR_sigma2M_EH_Omega_neutrinos_set)
    __swig_setmethods__["massless_neutrinos"] = _CosmoBolognaLib.STR_sigma2M_EH_massless_neutrinos_set
    __swig_getmethods__["massless_neutrinos"] = _CosmoBolognaLib.STR_sigma2M_EH_massless_neutrinos_get
    if _newclass:
        massless_neutrinos = _swig_property(_CosmoBolognaLib.STR_sigma2M_EH_massless_neutrinos_get, _CosmoBolognaLib.STR_sigma2M_EH_massless_neutrinos_set)
    __swig_setmethods__["massive_neutrinos"] = _CosmoBolognaLib.STR_sigma2M_EH_massive_neutrinos_set
    __swig_getmethods__["massive_neutrinos"] = _CosmoBolognaLib.STR_sigma2M_EH_massive_neutrinos_get
    if _newclass:
        massive_neutrinos = _swig_property(_CosmoBolognaLib.STR_sigma2M_EH_massive_neutrinos_get, _CosmoBolognaLib.STR_sigma2M_EH_massive_neutrinos_set)
    __swig_setmethods__["Omega_DE"] = _CosmoBolognaLib.STR_sigma2M_EH_Omega_DE_set
    __swig_getmethods__["Omega_DE"] = _CosmoBolognaLib.STR_sigma2M_EH_Omega_DE_get
    if _newclass:
        Omega_DE = _swig_property(_CosmoBolognaLib.STR_sigma2M_EH_Omega_DE_get, _CosmoBolognaLib.STR_sigma2M_EH_Omega_DE_set)
    __swig_setmethods__["Omega_radiation"] = _CosmoBolognaLib.STR_sigma2M_EH_Omega_radiation_set
    __swig_getmethods__["Omega_radiation"] = _CosmoBolognaLib.STR_sigma2M_EH_Omega_radiation_get
    if _newclass:
        Omega_radiation = _swig_property(_CosmoBolognaLib.STR_sigma2M_EH_Omega_radiation_get, _CosmoBolognaLib.STR_sigma2M_EH_Omega_radiation_set)
    __swig_setmethods__["hh"] = _CosmoBolognaLib.STR_sigma2M_EH_hh_set
    __swig_getmethods__["hh"] = _CosmoBolognaLib.STR_sigma2M_EH_hh_get
    if _newclass:
        hh = _swig_property(_CosmoBolognaLib.STR_sigma2M_EH_hh_get, _CosmoBolognaLib.STR_sigma2M_EH_hh_set)
    __swig_setmethods__["scalar_amp"] = _CosmoBolognaLib.STR_sigma2M_EH_scalar_amp_set
    __swig_getmethods__["scalar_amp"] = _CosmoBolognaLib.STR_sigma2M_EH_scalar_amp_get
    if _newclass:
        scalar_amp = _swig_property(_CosmoBolognaLib.STR_sigma2M_EH_scalar_amp_get, _CosmoBolognaLib.STR_sigma2M_EH_scalar_amp_set)
    __swig_setmethods__["scalar_pivot"] = _CosmoBolognaLib.STR_sigma2M_EH_scalar_pivot_set
    __swig_getmethods__["scalar_pivot"] = _CosmoBolognaLib.STR_sigma2M_EH_scalar_pivot_get
    if _newclass:
        scalar_pivot = _swig_property(_CosmoBolognaLib.STR_sigma2M_EH_scalar_pivot_get, _CosmoBolognaLib.STR_sigma2M_EH_scalar_pivot_set)
    __swig_setmethods__["n_spec"] = _CosmoBolognaLib.STR_sigma2M_EH_n_spec_set
    __swig_getmethods__["n_spec"] = _CosmoBolognaLib.STR_sigma2M_EH_n_spec_get
    if _newclass:
        n_spec = _swig_property(_CosmoBolognaLib.STR_sigma2M_EH_n_spec_get, _CosmoBolognaLib.STR_sigma2M_EH_n_spec_set)
    __swig_setmethods__["w0"] = _CosmoBolognaLib.STR_sigma2M_EH_w0_set
    __swig_getmethods__["w0"] = _CosmoBolognaLib.STR_sigma2M_EH_w0_get
    if _newclass:
        w0 = _swig_property(_CosmoBolognaLib.STR_sigma2M_EH_w0_get, _CosmoBolognaLib.STR_sigma2M_EH_w0_set)
    __swig_setmethods__["wa"] = _CosmoBolognaLib.STR_sigma2M_EH_wa_set
    __swig_getmethods__["wa"] = _CosmoBolognaLib.STR_sigma2M_EH_wa_get
    if _newclass:
        wa = _swig_property(_CosmoBolognaLib.STR_sigma2M_EH_wa_get, _CosmoBolognaLib.STR_sigma2M_EH_wa_set)
    __swig_setmethods__["fNL"] = _CosmoBolognaLib.STR_sigma2M_EH_fNL_set
    __swig_getmethods__["fNL"] = _CosmoBolognaLib.STR_sigma2M_EH_fNL_get
    if _newclass:
        fNL = _swig_property(_CosmoBolognaLib.STR_sigma2M_EH_fNL_get, _CosmoBolognaLib.STR_sigma2M_EH_fNL_set)
    __swig_setmethods__["type_NG"] = _CosmoBolognaLib.STR_sigma2M_EH_type_NG_set
    __swig_getmethods__["type_NG"] = _CosmoBolognaLib.STR_sigma2M_EH_type_NG_get
    if _newclass:
        type_NG = _swig_property(_CosmoBolognaLib.STR_sigma2M_EH_type_NG_get, _CosmoBolognaLib.STR_sigma2M_EH_type_NG_set)
    __swig_setmethods__["tau"] = _CosmoBolognaLib.STR_sigma2M_EH_tau_set
    __swig_getmethods__["tau"] = _CosmoBolognaLib.STR_sigma2M_EH_tau_get
    if _newclass:
        tau = _swig_property(_CosmoBolognaLib.STR_sigma2M_EH_tau_get, _CosmoBolognaLib.STR_sigma2M_EH_tau_set)
    __swig_setmethods__["model"] = _CosmoBolognaLib.STR_sigma2M_EH_model_set
    __swig_getmethods__["model"] = _CosmoBolognaLib.STR_sigma2M_EH_model_get
    if _newclass:
        model = _swig_property(_CosmoBolognaLib.STR_sigma2M_EH_model_get, _CosmoBolognaLib.STR_sigma2M_EH_model_set)
    __swig_setmethods__["unit"] = _CosmoBolognaLib.STR_sigma2M_EH_unit_set
    __swig_getmethods__["unit"] = _CosmoBolognaLib.STR_sigma2M_EH_unit_get
    if _newclass:
        unit = _swig_property(_CosmoBolognaLib.STR_sigma2M_EH_unit_get, _CosmoBolognaLib.STR_sigma2M_EH_unit_set)
    __swig_setmethods__["method_Pk"] = _CosmoBolognaLib.STR_sigma2M_EH_method_Pk_set
    __swig_getmethods__["method_Pk"] = _CosmoBolognaLib.STR_sigma2M_EH_method_Pk_get
    if _newclass:
        method_Pk = _swig_property(_CosmoBolognaLib.STR_sigma2M_EH_method_Pk_get, _CosmoBolognaLib.STR_sigma2M_EH_method_Pk_set)
    __swig_setmethods__["redshift"] = _CosmoBolognaLib.STR_sigma2M_EH_redshift_set
    __swig_getmethods__["redshift"] = _CosmoBolognaLib.STR_sigma2M_EH_redshift_get
    if _newclass:
        redshift = _swig_property(_CosmoBolognaLib.STR_sigma2M_EH_redshift_get, _CosmoBolognaLib.STR_sigma2M_EH_redshift_set)
    __swig_setmethods__["mass"] = _CosmoBolognaLib.STR_sigma2M_EH_mass_set
    __swig_getmethods__["mass"] = _CosmoBolognaLib.STR_sigma2M_EH_mass_get
    if _newclass:
        mass = _swig_property(_CosmoBolognaLib.STR_sigma2M_EH_mass_get, _CosmoBolognaLib.STR_sigma2M_EH_mass_set)
    __swig_setmethods__["rho"] = _CosmoBolognaLib.STR_sigma2M_EH_rho_set
    __swig_getmethods__["rho"] = _CosmoBolognaLib.STR_sigma2M_EH_rho_get
    if _newclass:
        rho = _swig_property(_CosmoBolognaLib.STR_sigma2M_EH_rho_get, _CosmoBolognaLib.STR_sigma2M_EH_rho_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_sigma2M_EH()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_sigma2M_EH
    __del__ = lambda self: None
STR_sigma2M_EH_swigregister = _CosmoBolognaLib.STR_sigma2M_EH_swigregister
STR_sigma2M_EH_swigregister(STR_sigma2M_EH)

class STR_MF(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_MF, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_MF, name)
    __repr__ = _swig_repr
    __swig_setmethods__["redshift"] = _CosmoBolognaLib.STR_MF_redshift_set
    __swig_getmethods__["redshift"] = _CosmoBolognaLib.STR_MF_redshift_get
    if _newclass:
        redshift = _swig_property(_CosmoBolognaLib.STR_MF_redshift_get, _CosmoBolognaLib.STR_MF_redshift_set)
    __swig_setmethods__["model_MF"] = _CosmoBolognaLib.STR_MF_model_MF_set
    __swig_getmethods__["model_MF"] = _CosmoBolognaLib.STR_MF_model_MF_get
    if _newclass:
        model_MF = _swig_property(_CosmoBolognaLib.STR_MF_model_MF_get, _CosmoBolognaLib.STR_MF_model_MF_set)
    __swig_setmethods__["method_SS"] = _CosmoBolognaLib.STR_MF_method_SS_set
    __swig_getmethods__["method_SS"] = _CosmoBolognaLib.STR_MF_method_SS_get
    if _newclass:
        method_SS = _swig_property(_CosmoBolognaLib.STR_MF_method_SS_get, _CosmoBolognaLib.STR_MF_method_SS_set)
    __swig_setmethods__["output_root"] = _CosmoBolognaLib.STR_MF_output_root_set
    __swig_getmethods__["output_root"] = _CosmoBolognaLib.STR_MF_output_root_get
    if _newclass:
        output_root = _swig_property(_CosmoBolognaLib.STR_MF_output_root_get, _CosmoBolognaLib.STR_MF_output_root_set)
    __swig_setmethods__["Delta"] = _CosmoBolognaLib.STR_MF_Delta_set
    __swig_getmethods__["Delta"] = _CosmoBolognaLib.STR_MF_Delta_get
    if _newclass:
        Delta = _swig_property(_CosmoBolognaLib.STR_MF_Delta_get, _CosmoBolognaLib.STR_MF_Delta_set)
    __swig_setmethods__["interpType"] = _CosmoBolognaLib.STR_MF_interpType_set
    __swig_getmethods__["interpType"] = _CosmoBolognaLib.STR_MF_interpType_get
    if _newclass:
        interpType = _swig_property(_CosmoBolognaLib.STR_MF_interpType_get, _CosmoBolognaLib.STR_MF_interpType_set)
    __swig_setmethods__["norm"] = _CosmoBolognaLib.STR_MF_norm_set
    __swig_getmethods__["norm"] = _CosmoBolognaLib.STR_MF_norm_get
    if _newclass:
        norm = _swig_property(_CosmoBolognaLib.STR_MF_norm_get, _CosmoBolognaLib.STR_MF_norm_set)
    __swig_setmethods__["k_min"] = _CosmoBolognaLib.STR_MF_k_min_set
    __swig_getmethods__["k_min"] = _CosmoBolognaLib.STR_MF_k_min_get
    if _newclass:
        k_min = _swig_property(_CosmoBolognaLib.STR_MF_k_min_get, _CosmoBolognaLib.STR_MF_k_min_set)
    __swig_setmethods__["k_max"] = _CosmoBolognaLib.STR_MF_k_max_set
    __swig_getmethods__["k_max"] = _CosmoBolognaLib.STR_MF_k_max_get
    if _newclass:
        k_max = _swig_property(_CosmoBolognaLib.STR_MF_k_max_get, _CosmoBolognaLib.STR_MF_k_max_set)
    __swig_setmethods__["prec"] = _CosmoBolognaLib.STR_MF_prec_set
    __swig_getmethods__["prec"] = _CosmoBolognaLib.STR_MF_prec_get
    if _newclass:
        prec = _swig_property(_CosmoBolognaLib.STR_MF_prec_get, _CosmoBolognaLib.STR_MF_prec_set)
    __swig_setmethods__["input_file"] = _CosmoBolognaLib.STR_MF_input_file_set
    __swig_getmethods__["input_file"] = _CosmoBolognaLib.STR_MF_input_file_get
    if _newclass:
        input_file = _swig_property(_CosmoBolognaLib.STR_MF_input_file_get, _CosmoBolognaLib.STR_MF_input_file_set)
    __swig_setmethods__["is_parameter_file"] = _CosmoBolognaLib.STR_MF_is_parameter_file_set
    __swig_getmethods__["is_parameter_file"] = _CosmoBolognaLib.STR_MF_is_parameter_file_get
    if _newclass:
        is_parameter_file = _swig_property(_CosmoBolognaLib.STR_MF_is_parameter_file_get, _CosmoBolognaLib.STR_MF_is_parameter_file_set)
    __swig_setmethods__["default_delta"] = _CosmoBolognaLib.STR_MF_default_delta_set
    __swig_getmethods__["default_delta"] = _CosmoBolognaLib.STR_MF_default_delta_get
    if _newclass:
        default_delta = _swig_property(_CosmoBolognaLib.STR_MF_default_delta_get, _CosmoBolognaLib.STR_MF_default_delta_set)
    __swig_setmethods__["delta_t"] = _CosmoBolognaLib.STR_MF_delta_t_set
    __swig_getmethods__["delta_t"] = _CosmoBolognaLib.STR_MF_delta_t_get
    if _newclass:
        delta_t = _swig_property(_CosmoBolognaLib.STR_MF_delta_t_get, _CosmoBolognaLib.STR_MF_delta_t_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_MF()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_MF
    __del__ = lambda self: None
STR_MF_swigregister = _CosmoBolognaLib.STR_MF_swigregister
STR_MF_swigregister(STR_MF)

class STR_NG(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_NG, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_NG, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Omega_matter"] = _CosmoBolognaLib.STR_NG_Omega_matter_set
    __swig_getmethods__["Omega_matter"] = _CosmoBolognaLib.STR_NG_Omega_matter_get
    if _newclass:
        Omega_matter = _swig_property(_CosmoBolognaLib.STR_NG_Omega_matter_get, _CosmoBolognaLib.STR_NG_Omega_matter_set)
    __swig_setmethods__["Omega_baryon"] = _CosmoBolognaLib.STR_NG_Omega_baryon_set
    __swig_getmethods__["Omega_baryon"] = _CosmoBolognaLib.STR_NG_Omega_baryon_get
    if _newclass:
        Omega_baryon = _swig_property(_CosmoBolognaLib.STR_NG_Omega_baryon_get, _CosmoBolognaLib.STR_NG_Omega_baryon_set)
    __swig_setmethods__["Omega_neutrinos"] = _CosmoBolognaLib.STR_NG_Omega_neutrinos_set
    __swig_getmethods__["Omega_neutrinos"] = _CosmoBolognaLib.STR_NG_Omega_neutrinos_get
    if _newclass:
        Omega_neutrinos = _swig_property(_CosmoBolognaLib.STR_NG_Omega_neutrinos_get, _CosmoBolognaLib.STR_NG_Omega_neutrinos_set)
    __swig_setmethods__["massless_neutrinos"] = _CosmoBolognaLib.STR_NG_massless_neutrinos_set
    __swig_getmethods__["massless_neutrinos"] = _CosmoBolognaLib.STR_NG_massless_neutrinos_get
    if _newclass:
        massless_neutrinos = _swig_property(_CosmoBolognaLib.STR_NG_massless_neutrinos_get, _CosmoBolognaLib.STR_NG_massless_neutrinos_set)
    __swig_setmethods__["massive_neutrinos"] = _CosmoBolognaLib.STR_NG_massive_neutrinos_set
    __swig_getmethods__["massive_neutrinos"] = _CosmoBolognaLib.STR_NG_massive_neutrinos_get
    if _newclass:
        massive_neutrinos = _swig_property(_CosmoBolognaLib.STR_NG_massive_neutrinos_get, _CosmoBolognaLib.STR_NG_massive_neutrinos_set)
    __swig_setmethods__["Omega_DE"] = _CosmoBolognaLib.STR_NG_Omega_DE_set
    __swig_getmethods__["Omega_DE"] = _CosmoBolognaLib.STR_NG_Omega_DE_get
    if _newclass:
        Omega_DE = _swig_property(_CosmoBolognaLib.STR_NG_Omega_DE_get, _CosmoBolognaLib.STR_NG_Omega_DE_set)
    __swig_setmethods__["Omega_radiation"] = _CosmoBolognaLib.STR_NG_Omega_radiation_set
    __swig_getmethods__["Omega_radiation"] = _CosmoBolognaLib.STR_NG_Omega_radiation_get
    if _newclass:
        Omega_radiation = _swig_property(_CosmoBolognaLib.STR_NG_Omega_radiation_get, _CosmoBolognaLib.STR_NG_Omega_radiation_set)
    __swig_setmethods__["hh"] = _CosmoBolognaLib.STR_NG_hh_set
    __swig_getmethods__["hh"] = _CosmoBolognaLib.STR_NG_hh_get
    if _newclass:
        hh = _swig_property(_CosmoBolognaLib.STR_NG_hh_get, _CosmoBolognaLib.STR_NG_hh_set)
    __swig_setmethods__["scalar_amp"] = _CosmoBolognaLib.STR_NG_scalar_amp_set
    __swig_getmethods__["scalar_amp"] = _CosmoBolognaLib.STR_NG_scalar_amp_get
    if _newclass:
        scalar_amp = _swig_property(_CosmoBolognaLib.STR_NG_scalar_amp_get, _CosmoBolognaLib.STR_NG_scalar_amp_set)
    __swig_setmethods__["scalar_pivot"] = _CosmoBolognaLib.STR_NG_scalar_pivot_set
    __swig_getmethods__["scalar_pivot"] = _CosmoBolognaLib.STR_NG_scalar_pivot_get
    if _newclass:
        scalar_pivot = _swig_property(_CosmoBolognaLib.STR_NG_scalar_pivot_get, _CosmoBolognaLib.STR_NG_scalar_pivot_set)
    __swig_setmethods__["n_spec"] = _CosmoBolognaLib.STR_NG_n_spec_set
    __swig_getmethods__["n_spec"] = _CosmoBolognaLib.STR_NG_n_spec_get
    if _newclass:
        n_spec = _swig_property(_CosmoBolognaLib.STR_NG_n_spec_get, _CosmoBolognaLib.STR_NG_n_spec_set)
    __swig_setmethods__["w0"] = _CosmoBolognaLib.STR_NG_w0_set
    __swig_getmethods__["w0"] = _CosmoBolognaLib.STR_NG_w0_get
    if _newclass:
        w0 = _swig_property(_CosmoBolognaLib.STR_NG_w0_get, _CosmoBolognaLib.STR_NG_w0_set)
    __swig_setmethods__["wa"] = _CosmoBolognaLib.STR_NG_wa_set
    __swig_getmethods__["wa"] = _CosmoBolognaLib.STR_NG_wa_get
    if _newclass:
        wa = _swig_property(_CosmoBolognaLib.STR_NG_wa_get, _CosmoBolognaLib.STR_NG_wa_set)
    __swig_setmethods__["fNL"] = _CosmoBolognaLib.STR_NG_fNL_set
    __swig_getmethods__["fNL"] = _CosmoBolognaLib.STR_NG_fNL_get
    if _newclass:
        fNL = _swig_property(_CosmoBolognaLib.STR_NG_fNL_get, _CosmoBolognaLib.STR_NG_fNL_set)
    __swig_setmethods__["type_NG"] = _CosmoBolognaLib.STR_NG_type_NG_set
    __swig_getmethods__["type_NG"] = _CosmoBolognaLib.STR_NG_type_NG_get
    if _newclass:
        type_NG = _swig_property(_CosmoBolognaLib.STR_NG_type_NG_get, _CosmoBolognaLib.STR_NG_type_NG_set)
    __swig_setmethods__["tau"] = _CosmoBolognaLib.STR_NG_tau_set
    __swig_getmethods__["tau"] = _CosmoBolognaLib.STR_NG_tau_get
    if _newclass:
        tau = _swig_property(_CosmoBolognaLib.STR_NG_tau_get, _CosmoBolognaLib.STR_NG_tau_set)
    __swig_setmethods__["model"] = _CosmoBolognaLib.STR_NG_model_set
    __swig_getmethods__["model"] = _CosmoBolognaLib.STR_NG_model_get
    if _newclass:
        model = _swig_property(_CosmoBolognaLib.STR_NG_model_get, _CosmoBolognaLib.STR_NG_model_set)
    __swig_setmethods__["unit"] = _CosmoBolognaLib.STR_NG_unit_set
    __swig_getmethods__["unit"] = _CosmoBolognaLib.STR_NG_unit_get
    if _newclass:
        unit = _swig_property(_CosmoBolognaLib.STR_NG_unit_get, _CosmoBolognaLib.STR_NG_unit_set)
    __swig_setmethods__["kt"] = _CosmoBolognaLib.STR_NG_kt_set
    __swig_getmethods__["kt"] = _CosmoBolognaLib.STR_NG_kt_get
    if _newclass:
        kt = _swig_property(_CosmoBolognaLib.STR_NG_kt_get, _CosmoBolognaLib.STR_NG_kt_set)
    __swig_setmethods__["mass"] = _CosmoBolognaLib.STR_NG_mass_set
    __swig_getmethods__["mass"] = _CosmoBolognaLib.STR_NG_mass_get
    if _newclass:
        mass = _swig_property(_CosmoBolognaLib.STR_NG_mass_get, _CosmoBolognaLib.STR_NG_mass_set)
    __swig_setmethods__["method_Pk"] = _CosmoBolognaLib.STR_NG_method_Pk_set
    __swig_getmethods__["method_Pk"] = _CosmoBolognaLib.STR_NG_method_Pk_get
    if _newclass:
        method_Pk = _swig_property(_CosmoBolognaLib.STR_NG_method_Pk_get, _CosmoBolognaLib.STR_NG_method_Pk_set)
    __swig_setmethods__["output_root"] = _CosmoBolognaLib.STR_NG_output_root_set
    __swig_getmethods__["output_root"] = _CosmoBolognaLib.STR_NG_output_root_get
    if _newclass:
        output_root = _swig_property(_CosmoBolognaLib.STR_NG_output_root_get, _CosmoBolognaLib.STR_NG_output_root_set)
    __swig_setmethods__["norm"] = _CosmoBolognaLib.STR_NG_norm_set
    __swig_getmethods__["norm"] = _CosmoBolognaLib.STR_NG_norm_get
    if _newclass:
        norm = _swig_property(_CosmoBolognaLib.STR_NG_norm_get, _CosmoBolognaLib.STR_NG_norm_set)
    __swig_setmethods__["k_min"] = _CosmoBolognaLib.STR_NG_k_min_set
    __swig_getmethods__["k_min"] = _CosmoBolognaLib.STR_NG_k_min_get
    if _newclass:
        k_min = _swig_property(_CosmoBolognaLib.STR_NG_k_min_get, _CosmoBolognaLib.STR_NG_k_min_set)
    __swig_setmethods__["k_max"] = _CosmoBolognaLib.STR_NG_k_max_set
    __swig_getmethods__["k_max"] = _CosmoBolognaLib.STR_NG_k_max_get
    if _newclass:
        k_max = _swig_property(_CosmoBolognaLib.STR_NG_k_max_get, _CosmoBolognaLib.STR_NG_k_max_set)
    __swig_setmethods__["GSL"] = _CosmoBolognaLib.STR_NG_GSL_set
    __swig_getmethods__["GSL"] = _CosmoBolognaLib.STR_NG_GSL_get
    if _newclass:
        GSL = _swig_property(_CosmoBolognaLib.STR_NG_GSL_get, _CosmoBolognaLib.STR_NG_GSL_set)
    __swig_setmethods__["prec"] = _CosmoBolognaLib.STR_NG_prec_set
    __swig_getmethods__["prec"] = _CosmoBolognaLib.STR_NG_prec_get
    if _newclass:
        prec = _swig_property(_CosmoBolognaLib.STR_NG_prec_get, _CosmoBolognaLib.STR_NG_prec_set)
    __swig_setmethods__["file_par"] = _CosmoBolognaLib.STR_NG_file_par_set
    __swig_getmethods__["file_par"] = _CosmoBolognaLib.STR_NG_file_par_get
    if _newclass:
        file_par = _swig_property(_CosmoBolognaLib.STR_NG_file_par_get, _CosmoBolognaLib.STR_NG_file_par_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_NG()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_NG
    __del__ = lambda self: None
STR_NG_swigregister = _CosmoBolognaLib.STR_NG_swigregister
STR_NG_swigregister(STR_NG)

class CosmologicalParameterVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CosmologicalParameterVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CosmologicalParameterVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CosmoBolognaLib.CosmologicalParameterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CosmoBolognaLib.CosmologicalParameterVector___nonzero__(self)

    def __bool__(self):
        return _CosmoBolognaLib.CosmologicalParameterVector___bool__(self)

    def __len__(self):
        return _CosmoBolognaLib.CosmologicalParameterVector___len__(self)

    def __getslice__(self, i, j):
        return _CosmoBolognaLib.CosmologicalParameterVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CosmoBolognaLib.CosmologicalParameterVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CosmoBolognaLib.CosmologicalParameterVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CosmoBolognaLib.CosmologicalParameterVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CosmoBolognaLib.CosmologicalParameterVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CosmoBolognaLib.CosmologicalParameterVector___setitem__(self, *args)

    def pop(self):
        return _CosmoBolognaLib.CosmologicalParameterVector_pop(self)

    def append(self, x):
        return _CosmoBolognaLib.CosmologicalParameterVector_append(self, x)

    def empty(self):
        return _CosmoBolognaLib.CosmologicalParameterVector_empty(self)

    def size(self):
        return _CosmoBolognaLib.CosmologicalParameterVector_size(self)

    def swap(self, v):
        return _CosmoBolognaLib.CosmologicalParameterVector_swap(self, v)

    def begin(self):
        return _CosmoBolognaLib.CosmologicalParameterVector_begin(self)

    def end(self):
        return _CosmoBolognaLib.CosmologicalParameterVector_end(self)

    def rbegin(self):
        return _CosmoBolognaLib.CosmologicalParameterVector_rbegin(self)

    def rend(self):
        return _CosmoBolognaLib.CosmologicalParameterVector_rend(self)

    def clear(self):
        return _CosmoBolognaLib.CosmologicalParameterVector_clear(self)

    def get_allocator(self):
        return _CosmoBolognaLib.CosmologicalParameterVector_get_allocator(self)

    def pop_back(self):
        return _CosmoBolognaLib.CosmologicalParameterVector_pop_back(self)

    def erase(self, *args):
        return _CosmoBolognaLib.CosmologicalParameterVector_erase(self, *args)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_CosmologicalParameterVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _CosmoBolognaLib.CosmologicalParameterVector_push_back(self, x)

    def front(self):
        return _CosmoBolognaLib.CosmologicalParameterVector_front(self)

    def back(self):
        return _CosmoBolognaLib.CosmologicalParameterVector_back(self)

    def assign(self, n, x):
        return _CosmoBolognaLib.CosmologicalParameterVector_assign(self, n, x)

    def resize(self, *args):
        return _CosmoBolognaLib.CosmologicalParameterVector_resize(self, *args)

    def insert(self, *args):
        return _CosmoBolognaLib.CosmologicalParameterVector_insert(self, *args)

    def reserve(self, n):
        return _CosmoBolognaLib.CosmologicalParameterVector_reserve(self, n)

    def capacity(self):
        return _CosmoBolognaLib.CosmologicalParameterVector_capacity(self)
    __swig_destroy__ = _CosmoBolognaLib.delete_CosmologicalParameterVector
    __del__ = lambda self: None
CosmologicalParameterVector_swigregister = _CosmoBolognaLib.CosmologicalParameterVector_swigregister
CosmologicalParameterVector_swigregister(CosmologicalParameterVector)

class ChainMesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChainMesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChainMesh, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_ChainMesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_ChainMesh
    __del__ = lambda self: None

    def set_par(self, cell_size, nDim):
        return _CosmoBolognaLib.ChainMesh_set_par(self, cell_size, nDim)

    def nCell(self):
        return _CosmoBolognaLib.ChainMesh_nCell(self)

    def nCell_NonEmpty(self):
        return _CosmoBolognaLib.ChainMesh_nCell_NonEmpty(self)

    def NonEmpty_Cells(self):
        return _CosmoBolognaLib.ChainMesh_NonEmpty_Cells(self)

    def pos_to_index(self, center):
        return _CosmoBolognaLib.ChainMesh_pos_to_index(self, center)

    def inds_to_index(self, indx):
        return _CosmoBolognaLib.ChainMesh_inds_to_index(self, indx)

    def index_to_inds(self, index, nn, indx):
        return _CosmoBolognaLib.ChainMesh_index_to_inds(self, index, nn, indx)

    def create_chain_mesh(self, data, rMax, nMIN=10, nMAX=300):
        return _CosmoBolognaLib.ChainMesh_create_chain_mesh(self, data, rMax, nMIN, nMAX)

    def create_chain_mesh_m2(self, data):
        return _CosmoBolognaLib.ChainMesh_create_chain_mesh_m2(self, data)

    def get_searching_region(self, r_max, r_min=-1):
        return _CosmoBolognaLib.ChainMesh_get_searching_region(self, r_max, r_min)

    def close_objects_cell(self, cell_index, ii=-1):
        return _CosmoBolognaLib.ChainMesh_close_objects_cell(self, cell_index, ii)

    def close_objects(self, center, ii=-1):
        return _CosmoBolognaLib.ChainMesh_close_objects(self, center, ii)

    def get_list(self, cell_index):
        return _CosmoBolognaLib.ChainMesh_get_list(self, cell_index)
ChainMesh_swigregister = _CosmoBolognaLib.ChainMesh_swigregister
ChainMesh_swigregister(ChainMesh)

class ChainMesh1D(ChainMesh):
    __swig_setmethods__ = {}
    for _s in [ChainMesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChainMesh1D, name, value)
    __swig_getmethods__ = {}
    for _s in [ChainMesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChainMesh1D, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_ChainMesh1D
    __del__ = lambda self: None

    def set_par(self, cell_size, xx, rMAX, nMIN=0, nMAX=300):
        return _CosmoBolognaLib.ChainMesh1D_set_par(self, cell_size, xx, rMAX, nMIN, nMAX)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_ChainMesh1D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ChainMesh1D_swigregister = _CosmoBolognaLib.ChainMesh1D_swigregister
ChainMesh1D_swigregister(ChainMesh1D)

class ChainMesh2D(ChainMesh):
    __swig_setmethods__ = {}
    for _s in [ChainMesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChainMesh2D, name, value)
    __swig_getmethods__ = {}
    for _s in [ChainMesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChainMesh2D, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_ChainMesh2D
    __del__ = lambda self: None

    def set_par(self, cell_size, xx, yy, rMAX, nMIN=0, nMAX=300):
        return _CosmoBolognaLib.ChainMesh2D_set_par(self, cell_size, xx, yy, rMAX, nMIN, nMAX)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_ChainMesh2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ChainMesh2D_swigregister = _CosmoBolognaLib.ChainMesh2D_swigregister
ChainMesh2D_swigregister(ChainMesh2D)

class ChainMesh3D(ChainMesh):
    __swig_setmethods__ = {}
    for _s in [ChainMesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChainMesh3D, name, value)
    __swig_getmethods__ = {}
    for _s in [ChainMesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChainMesh3D, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_ChainMesh3D
    __del__ = lambda self: None

    def set_par(self, cell_size, xx, yy, zz, rMAX, nMIN=0, nMAX=300):
        return _CosmoBolognaLib.ChainMesh3D_set_par(self, cell_size, xx, yy, zz, rMAX, nMIN, nMAX)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_ChainMesh3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ChainMesh3D_swigregister = _CosmoBolognaLib.ChainMesh3D_swigregister
ChainMesh3D_swigregister(ChainMesh3D)

ObjectType__Random_ = _CosmoBolognaLib.ObjectType__Random_
ObjectType__Mock_ = _CosmoBolognaLib.ObjectType__Mock_
ObjectType__Halo_ = _CosmoBolognaLib.ObjectType__Halo_
ObjectType__Galaxy_ = _CosmoBolognaLib.ObjectType__Galaxy_
ObjectType__Cluster_ = _CosmoBolognaLib.ObjectType__Cluster_
ObjectType__Void_ = _CosmoBolognaLib.ObjectType__Void_
ObjectType__HostHalo_ = _CosmoBolognaLib.ObjectType__HostHalo_

def ObjectTypeNames():
    return _CosmoBolognaLib.ObjectTypeNames()
ObjectTypeNames = _CosmoBolognaLib.ObjectTypeNames

def ObjectTypeCast(*args):
    return _CosmoBolognaLib.ObjectTypeCast(*args)
ObjectTypeCast = _CosmoBolognaLib.ObjectTypeCast
class Object(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Object, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Object, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Object(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Object
    __del__ = lambda self: None
    if _newclass:
        Create = staticmethod(_CosmoBolognaLib.Object_Create)
    else:
        Create = _CosmoBolognaLib.Object_Create

    def xx(self):
        return _CosmoBolognaLib.Object_xx(self)

    def yy(self):
        return _CosmoBolognaLib.Object_yy(self)

    def zz(self):
        return _CosmoBolognaLib.Object_zz(self)

    def dc(self):
        return _CosmoBolognaLib.Object_dc(self)

    def ra(self):
        return _CosmoBolognaLib.Object_ra(self)

    def dec(self):
        return _CosmoBolognaLib.Object_dec(self)

    def redshift(self):
        return _CosmoBolognaLib.Object_redshift(self)

    def weight(self):
        return _CosmoBolognaLib.Object_weight(self)

    def region(self):
        return _CosmoBolognaLib.Object_region(self)

    def ID(self):
        return _CosmoBolognaLib.Object_ID(self)

    def field(self):
        return _CosmoBolognaLib.Object_field(self)

    def x_displacement(self):
        return _CosmoBolognaLib.Object_x_displacement(self)

    def y_displacement(self):
        return _CosmoBolognaLib.Object_y_displacement(self)

    def z_displacement(self):
        return _CosmoBolognaLib.Object_z_displacement(self)

    def coords(self):
        return _CosmoBolognaLib.Object_coords(self)

    def vx(self):
        return _CosmoBolognaLib.Object_vx(self)

    def vy(self):
        return _CosmoBolognaLib.Object_vy(self)

    def vz(self):
        return _CosmoBolognaLib.Object_vz(self)

    def mass(self):
        return _CosmoBolognaLib.Object_mass(self)

    def magnitude(self):
        return _CosmoBolognaLib.Object_magnitude(self)

    def SFR(self):
        return _CosmoBolognaLib.Object_SFR(self)

    def sSFR(self):
        return _CosmoBolognaLib.Object_sSFR(self)

    def richness(self):
        return _CosmoBolognaLib.Object_richness(self)

    def richness_error(self):
        return _CosmoBolognaLib.Object_richness_error(self)

    def bias(self):
        return _CosmoBolognaLib.Object_bias(self)

    def generic(self):
        return _CosmoBolognaLib.Object_generic(self)

    def radius(self):
        return _CosmoBolognaLib.Object_radius(self)

    def densityContrast(self):
        return _CosmoBolognaLib.Object_densityContrast(self)

    def centralDensity(self):
        return _CosmoBolognaLib.Object_centralDensity(self)

    def mass_estimate(self):
        return _CosmoBolognaLib.Object_mass_estimate(self)

    def radius_estimate(self):
        return _CosmoBolognaLib.Object_radius_estimate(self)

    def veldisp_estimate(self):
        return _CosmoBolognaLib.Object_veldisp_estimate(self)

    def xcm(self):
        return _CosmoBolognaLib.Object_xcm(self)

    def ycm(self):
        return _CosmoBolognaLib.Object_ycm(self)

    def zcm(self):
        return _CosmoBolognaLib.Object_zcm(self)

    def spin_x(self):
        return _CosmoBolognaLib.Object_spin_x(self)

    def spin_y(self):
        return _CosmoBolognaLib.Object_spin_y(self)

    def spin_z(self):
        return _CosmoBolognaLib.Object_spin_z(self)

    def veldisp(self):
        return _CosmoBolognaLib.Object_veldisp(self)

    def vmax(self):
        return _CosmoBolognaLib.Object_vmax(self)

    def vmax_rad(self):
        return _CosmoBolognaLib.Object_vmax_rad(self)

    def tot_mass(self):
        return _CosmoBolognaLib.Object_tot_mass(self)

    def parent(self):
        return _CosmoBolognaLib.Object_parent(self)

    def nsub(self):
        return _CosmoBolognaLib.Object_nsub(self)

    def satellites(self):
        return _CosmoBolognaLib.Object_satellites(self)

    def set_xx(self, xx):
        return _CosmoBolognaLib.Object_set_xx(self, xx)

    def set_yy(self, yy):
        return _CosmoBolognaLib.Object_set_yy(self, yy)

    def set_zz(self, zz):
        return _CosmoBolognaLib.Object_set_zz(self, zz)

    def set_ra(self, *args):
        return _CosmoBolognaLib.Object_set_ra(self, *args)

    def set_dec(self, *args):
        return _CosmoBolognaLib.Object_set_dec(self, *args)

    def set_redshift(self, redshift, cosmology):
        return _CosmoBolognaLib.Object_set_redshift(self, redshift, cosmology)

    def set_dc(self, dc):
        return _CosmoBolognaLib.Object_set_dc(self, dc)

    def set_weight(self, weight):
        return _CosmoBolognaLib.Object_set_weight(self, weight)

    def set_region(self, region):
        return _CosmoBolognaLib.Object_set_region(self, region)

    def set_ID(self, ID):
        return _CosmoBolognaLib.Object_set_ID(self, ID)

    def set_field(self, field):
        return _CosmoBolognaLib.Object_set_field(self, field)

    def set_x_displacement(self, x_displacement):
        return _CosmoBolognaLib.Object_set_x_displacement(self, x_displacement)

    def set_y_displacement(self, y_displacement):
        return _CosmoBolognaLib.Object_set_y_displacement(self, y_displacement)

    def set_z_displacement(self, z_displacement):
        return _CosmoBolognaLib.Object_set_z_displacement(self, z_displacement)

    def set_vx(self, vx):
        return _CosmoBolognaLib.Object_set_vx(self, vx)

    def set_vy(self, vy):
        return _CosmoBolognaLib.Object_set_vy(self, vy)

    def set_vz(self, vz):
        return _CosmoBolognaLib.Object_set_vz(self, vz)

    def set_mass(self, mass):
        return _CosmoBolognaLib.Object_set_mass(self, mass)

    def set_magnitude(self, magnitude):
        return _CosmoBolognaLib.Object_set_magnitude(self, magnitude)

    def set_SFR(self, SFR):
        return _CosmoBolognaLib.Object_set_SFR(self, SFR)

    def set_sSFR(self, sSFR):
        return _CosmoBolognaLib.Object_set_sSFR(self, sSFR)

    def set_richness(self, richness):
        return _CosmoBolognaLib.Object_set_richness(self, richness)

    def set_richness_error(self, richness_error):
        return _CosmoBolognaLib.Object_set_richness_error(self, richness_error)

    def set_bias(self, bias):
        return _CosmoBolognaLib.Object_set_bias(self, bias)

    def set_generic(self, generic):
        return _CosmoBolognaLib.Object_set_generic(self, generic)

    def set_radius(self, radius):
        return _CosmoBolognaLib.Object_set_radius(self, radius)

    def set_densityContrast(self, densityContrast):
        return _CosmoBolognaLib.Object_set_densityContrast(self, densityContrast)

    def set_centralDensity(self, centralDensity):
        return _CosmoBolognaLib.Object_set_centralDensity(self, centralDensity)

    def set_mass_estimate(self, mass_estimate):
        return _CosmoBolognaLib.Object_set_mass_estimate(self, mass_estimate)

    def set_radius_estimate(self, radius_estimate):
        return _CosmoBolognaLib.Object_set_radius_estimate(self, radius_estimate)

    def set_veldisp_estimate(self, veldisp_estimate):
        return _CosmoBolognaLib.Object_set_veldisp_estimate(self, veldisp_estimate)

    def set_xcm(self, xcm):
        return _CosmoBolognaLib.Object_set_xcm(self, xcm)

    def set_ycm(self, ycm):
        return _CosmoBolognaLib.Object_set_ycm(self, ycm)

    def set_zcm(self, zcm):
        return _CosmoBolognaLib.Object_set_zcm(self, zcm)

    def set_spin_x(self, spin_x):
        return _CosmoBolognaLib.Object_set_spin_x(self, spin_x)

    def set_spin_y(self, spin_y):
        return _CosmoBolognaLib.Object_set_spin_y(self, spin_y)

    def set_spin_z(self, spin_z):
        return _CosmoBolognaLib.Object_set_spin_z(self, spin_z)

    def set_veldisp(self, veldisp):
        return _CosmoBolognaLib.Object_set_veldisp(self, veldisp)

    def set_vmax(self, vmax):
        return _CosmoBolognaLib.Object_set_vmax(self, vmax)

    def set_vmax_rad(self, vmax_rad):
        return _CosmoBolognaLib.Object_set_vmax_rad(self, vmax_rad)

    def set_tot_mass(self, tot_mass):
        return _CosmoBolognaLib.Object_set_tot_mass(self, tot_mass)

    def set_parent(self, parent):
        return _CosmoBolognaLib.Object_set_parent(self, parent)

    def set_nsub(self, nsub):
        return _CosmoBolognaLib.Object_set_nsub(self, nsub)

    def set_satellite(self, satellite):
        return _CosmoBolognaLib.Object_set_satellite(self, satellite)

    def set_satellites(self, satellites):
        return _CosmoBolognaLib.Object_set_satellites(self, satellites)

    def isSet_xx(self):
        return _CosmoBolognaLib.Object_isSet_xx(self)

    def isSet_yy(self):
        return _CosmoBolognaLib.Object_isSet_yy(self)

    def isSet_zz(self):
        return _CosmoBolognaLib.Object_isSet_zz(self)

    def isSet_ra(self):
        return _CosmoBolognaLib.Object_isSet_ra(self)

    def isSet_dec(self):
        return _CosmoBolognaLib.Object_isSet_dec(self)

    def isSet_redshift(self):
        return _CosmoBolognaLib.Object_isSet_redshift(self)

    def isSet_dc(self):
        return _CosmoBolognaLib.Object_isSet_dc(self)

    def isSet_weight(self):
        return _CosmoBolognaLib.Object_isSet_weight(self)

    def isSet_region(self):
        return _CosmoBolognaLib.Object_isSet_region(self)

    def isSet_field(self):
        return _CosmoBolognaLib.Object_isSet_field(self)

    def isSet_x_displacement(self):
        return _CosmoBolognaLib.Object_isSet_x_displacement(self)

    def isSet_y_displacement(self):
        return _CosmoBolognaLib.Object_isSet_y_displacement(self)

    def isSet_z_displacement(self):
        return _CosmoBolognaLib.Object_isSet_z_displacement(self)

    def isSet_vx(self):
        return _CosmoBolognaLib.Object_isSet_vx(self)

    def isSet_vy(self):
        return _CosmoBolognaLib.Object_isSet_vy(self)

    def isSet_vz(self):
        return _CosmoBolognaLib.Object_isSet_vz(self)

    def isSet_mass(self):
        return _CosmoBolognaLib.Object_isSet_mass(self)

    def isSet_magnitude(self):
        return _CosmoBolognaLib.Object_isSet_magnitude(self)

    def isSet_SFR(self):
        return _CosmoBolognaLib.Object_isSet_SFR(self)

    def isSet_sSFR(self):
        return _CosmoBolognaLib.Object_isSet_sSFR(self)

    def isSet_richness(self):
        return _CosmoBolognaLib.Object_isSet_richness(self)

    def isSet_richness_error(self):
        return _CosmoBolognaLib.Object_isSet_richness_error(self)

    def isSet_bias(self):
        return _CosmoBolognaLib.Object_isSet_bias(self)

    def isSet_generic(self):
        return _CosmoBolognaLib.Object_isSet_generic(self)

    def isSet_radius(self):
        return _CosmoBolognaLib.Object_isSet_radius(self)

    def isSet_densityContrast(self):
        return _CosmoBolognaLib.Object_isSet_densityContrast(self)

    def isSet_centralDensity(self):
        return _CosmoBolognaLib.Object_isSet_centralDensity(self)

    def isSet_mass_estimate(self):
        return _CosmoBolognaLib.Object_isSet_mass_estimate(self)

    def isSet_radius_estimate(self):
        return _CosmoBolognaLib.Object_isSet_radius_estimate(self)

    def isSet_veldisp_estimate(self):
        return _CosmoBolognaLib.Object_isSet_veldisp_estimate(self)

    def isSet_xcm(self):
        return _CosmoBolognaLib.Object_isSet_xcm(self)

    def isSet_ycm(self):
        return _CosmoBolognaLib.Object_isSet_ycm(self)

    def isSet_zcm(self):
        return _CosmoBolognaLib.Object_isSet_zcm(self)

    def isSet_spin_x(self):
        return _CosmoBolognaLib.Object_isSet_spin_x(self)

    def isSet_spin_y(self):
        return _CosmoBolognaLib.Object_isSet_spin_y(self)

    def isSet_spin_z(self):
        return _CosmoBolognaLib.Object_isSet_spin_z(self)

    def isSet_veldisp(self):
        return _CosmoBolognaLib.Object_isSet_veldisp(self)

    def isSet_vmax(self):
        return _CosmoBolognaLib.Object_isSet_vmax(self)

    def isSet_vmax_rad(self):
        return _CosmoBolognaLib.Object_isSet_vmax_rad(self)

    def isSet_tot_mass(self):
        return _CosmoBolognaLib.Object_isSet_tot_mass(self)

    def isSet_parent(self):
        return _CosmoBolognaLib.Object_isSet_parent(self)

    def isSet_nsub(self):
        return _CosmoBolognaLib.Object_isSet_nsub(self)

    def isSet_ID(self):
        return _CosmoBolognaLib.Object_isSet_ID(self)
Object_swigregister = _CosmoBolognaLib.Object_swigregister
Object_swigregister(Object)

def Object_Create(*args):
    return _CosmoBolognaLib.Object_Create(*args)
Object_Create = _CosmoBolognaLib.Object_Create

class RandomObject(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RandomObject, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RandomObject, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_RandomObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_RandomObject
    __del__ = lambda self: None
RandomObject_swigregister = _CosmoBolognaLib.RandomObject_swigregister
RandomObject_swigregister(RandomObject)

class Halo(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Halo, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Halo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Halo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Halo
    __del__ = lambda self: None

    def vx(self):
        return _CosmoBolognaLib.Halo_vx(self)

    def vy(self):
        return _CosmoBolognaLib.Halo_vy(self)

    def vz(self):
        return _CosmoBolognaLib.Halo_vz(self)

    def mass(self):
        return _CosmoBolognaLib.Halo_mass(self)

    def set_vx(self, *args):
        return _CosmoBolognaLib.Halo_set_vx(self, *args)

    def set_vy(self, *args):
        return _CosmoBolognaLib.Halo_set_vy(self, *args)

    def set_vz(self, *args):
        return _CosmoBolognaLib.Halo_set_vz(self, *args)

    def set_mass(self, *args):
        return _CosmoBolognaLib.Halo_set_mass(self, *args)

    def isSet_vx(self):
        return _CosmoBolognaLib.Halo_isSet_vx(self)

    def isSet_vy(self):
        return _CosmoBolognaLib.Halo_isSet_vy(self)

    def isSet_vz(self):
        return _CosmoBolognaLib.Halo_isSet_vz(self)

    def isSet_mass(self):
        return _CosmoBolognaLib.Halo_isSet_mass(self)
Halo_swigregister = _CosmoBolognaLib.Halo_swigregister
Halo_swigregister(Halo)

class Mock(Halo):
    __swig_setmethods__ = {}
    for _s in [Halo]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mock, name, value)
    __swig_getmethods__ = {}
    for _s in [Halo]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Mock, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Mock(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Mock
    __del__ = lambda self: None

    def generic(self):
        return _CosmoBolognaLib.Mock_generic(self)

    def set_generic(self, *args):
        return _CosmoBolognaLib.Mock_set_generic(self, *args)

    def isSet_generic(self):
        return _CosmoBolognaLib.Mock_isSet_generic(self)
Mock_swigregister = _CosmoBolognaLib.Mock_swigregister
Mock_swigregister(Mock)

class Galaxy(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Galaxy, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Galaxy, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Galaxy(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Galaxy
    __del__ = lambda self: None

    def mass(self):
        return _CosmoBolognaLib.Galaxy_mass(self)

    def magnitude(self):
        return _CosmoBolognaLib.Galaxy_magnitude(self)

    def SFR(self):
        return _CosmoBolognaLib.Galaxy_SFR(self)

    def sSFR(self):
        return _CosmoBolognaLib.Galaxy_sSFR(self)

    def set_mass(self, *args):
        return _CosmoBolognaLib.Galaxy_set_mass(self, *args)

    def set_magnitude(self, *args):
        return _CosmoBolognaLib.Galaxy_set_magnitude(self, *args)

    def set_SFR(self, *args):
        return _CosmoBolognaLib.Galaxy_set_SFR(self, *args)

    def set_sSFR(self, *args):
        return _CosmoBolognaLib.Galaxy_set_sSFR(self, *args)

    def isSet_mass(self):
        return _CosmoBolognaLib.Galaxy_isSet_mass(self)

    def isSet_magnitude(self):
        return _CosmoBolognaLib.Galaxy_isSet_magnitude(self)

    def isSet_SFR(self):
        return _CosmoBolognaLib.Galaxy_isSet_SFR(self)

    def isSet_sSFR(self):
        return _CosmoBolognaLib.Galaxy_isSet_sSFR(self)
Galaxy_swigregister = _CosmoBolognaLib.Galaxy_swigregister
Galaxy_swigregister(Galaxy)

class Cluster(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cluster, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cluster, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Cluster(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Cluster
    __del__ = lambda self: None

    def mass(self):
        return _CosmoBolognaLib.Cluster_mass(self)

    def richness(self):
        return _CosmoBolognaLib.Cluster_richness(self)

    def richness_error(self):
        return _CosmoBolognaLib.Cluster_richness_error(self)

    def bias(self):
        return _CosmoBolognaLib.Cluster_bias(self)

    def set_mass(self, *args):
        return _CosmoBolognaLib.Cluster_set_mass(self, *args)

    def set_richness(self, *args):
        return _CosmoBolognaLib.Cluster_set_richness(self, *args)

    def set_richness_error(self, *args):
        return _CosmoBolognaLib.Cluster_set_richness_error(self, *args)

    def set_bias(self, *args):
        return _CosmoBolognaLib.Cluster_set_bias(self, *args)

    def isSet_mass(self):
        return _CosmoBolognaLib.Cluster_isSet_mass(self)

    def isSet_richness(self):
        return _CosmoBolognaLib.Cluster_isSet_richness(self)

    def isSet_richness_error(self):
        return _CosmoBolognaLib.Cluster_isSet_richness_error(self)

    def isSet_bias(self):
        return _CosmoBolognaLib.Cluster_isSet_bias(self)
Cluster_swigregister = _CosmoBolognaLib.Cluster_swigregister
Cluster_swigregister(Cluster)

Var__X_ = _CosmoBolognaLib.Var__X_
Var__Y_ = _CosmoBolognaLib.Var__Y_
Var__Z_ = _CosmoBolognaLib.Var__Z_
Var__RA_ = _CosmoBolognaLib.Var__RA_
Var__Dec_ = _CosmoBolognaLib.Var__Dec_
Var__Redshift_ = _CosmoBolognaLib.Var__Redshift_
Var__Dc_ = _CosmoBolognaLib.Var__Dc_
Var__Weight_ = _CosmoBolognaLib.Var__Weight_
Var__Mass_ = _CosmoBolognaLib.Var__Mass_
Var__Magnitude_ = _CosmoBolognaLib.Var__Magnitude_
Var__SFR_ = _CosmoBolognaLib.Var__SFR_
Var__sSFR_ = _CosmoBolognaLib.Var__sSFR_
Var__Richness_ = _CosmoBolognaLib.Var__Richness_
Var__RichnessError_ = _CosmoBolognaLib.Var__RichnessError_
Var__Vx_ = _CosmoBolognaLib.Var__Vx_
Var__Vy_ = _CosmoBolognaLib.Var__Vy_
Var__Vz_ = _CosmoBolognaLib.Var__Vz_
Var__Region_ = _CosmoBolognaLib.Var__Region_
Var__Radius_ = _CosmoBolognaLib.Var__Radius_
Var__DensityContrast_ = _CosmoBolognaLib.Var__DensityContrast_
Var__CentralDensity_ = _CosmoBolognaLib.Var__CentralDensity_
Var__X_displacement_ = _CosmoBolognaLib.Var__X_displacement_
Var__Y_displacement_ = _CosmoBolognaLib.Var__Y_displacement_
Var__Z_displacement_ = _CosmoBolognaLib.Var__Z_displacement_
Var__MassEstimate_ = _CosmoBolognaLib.Var__MassEstimate_
Var__RadiusEstimate_ = _CosmoBolognaLib.Var__RadiusEstimate_
Var__VeldispEstimate_ = _CosmoBolognaLib.Var__VeldispEstimate_
Var__XCM_ = _CosmoBolognaLib.Var__XCM_
Var__YCM_ = _CosmoBolognaLib.Var__YCM_
Var__ZCM_ = _CosmoBolognaLib.Var__ZCM_
Var__XSpin_ = _CosmoBolognaLib.Var__XSpin_
Var__YSpin_ = _CosmoBolognaLib.Var__YSpin_
Var__ZSpin_ = _CosmoBolognaLib.Var__ZSpin_
Var__VelDisp_ = _CosmoBolognaLib.Var__VelDisp_
Var__Vmax_ = _CosmoBolognaLib.Var__Vmax_
Var__VmaxRad_ = _CosmoBolognaLib.Var__VmaxRad_
Var__TotMass_ = _CosmoBolognaLib.Var__TotMass_
Var__ID_ = _CosmoBolognaLib.Var__ID_
Var__Nsub_ = _CosmoBolognaLib.Var__Nsub_
Var__Parent_ = _CosmoBolognaLib.Var__Parent_
Var__Generic_ = _CosmoBolognaLib.Var__Generic_

def VarNames():
    return _CosmoBolognaLib.VarNames()
VarNames = _CosmoBolognaLib.VarNames

def VarCast(*args):
    return _CosmoBolognaLib.VarCast(*args)
VarCast = _CosmoBolognaLib.VarCast
RandomType__createRandom_box_ = _CosmoBolognaLib.RandomType__createRandom_box_
RandomType__createRandom_square_ = _CosmoBolognaLib.RandomType__createRandom_square_
RandomType__createRandom_shuffle_ = _CosmoBolognaLib.RandomType__createRandom_shuffle_
RandomType__createRandom_shuffleTOT_ = _CosmoBolognaLib.RandomType__createRandom_shuffleTOT_
RandomType__createRandom_cone_ = _CosmoBolognaLib.RandomType__createRandom_cone_
RandomType__createRandom_MANGLE_ = _CosmoBolognaLib.RandomType__createRandom_MANGLE_
RandomType__createRandom_VIPERS_ = _CosmoBolognaLib.RandomType__createRandom_VIPERS_
RandomType__createRandom_SDSS_stripes_ = _CosmoBolognaLib.RandomType__createRandom_SDSS_stripes_

def RandomTypeNames():
    return _CosmoBolognaLib.RandomTypeNames()
RandomTypeNames = _CosmoBolognaLib.RandomTypeNames

def RandomTypeCast(*args):
    return _CosmoBolognaLib.RandomTypeCast(*args)
RandomTypeCast = _CosmoBolognaLib.RandomTypeCast
VoidAlgorithm__LaZeVo_ = _CosmoBolognaLib.VoidAlgorithm__LaZeVo_
VoidAlgorithm__RIVA_ = _CosmoBolognaLib.VoidAlgorithm__RIVA_

def VoidAlgorithmNames():
    return _CosmoBolognaLib.VoidAlgorithmNames()
VoidAlgorithmNames = _CosmoBolognaLib.VoidAlgorithmNames
CharEncode__ascii_ = _CosmoBolognaLib.CharEncode__ascii_
CharEncode__binary_ = _CosmoBolognaLib.CharEncode__binary_

def CharEncodeNames():
    return _CosmoBolognaLib.CharEncodeNames()
CharEncodeNames = _CosmoBolognaLib.CharEncodeNames
EstimateCriterion__m200_ = _CosmoBolognaLib.EstimateCriterion__m200_
EstimateCriterion__c200_ = _CosmoBolognaLib.EstimateCriterion__c200_
EstimateCriterion__t200_ = _CosmoBolognaLib.EstimateCriterion__t200_

def EstimateCriterionNames():
    return _CosmoBolognaLib.EstimateCriterionNames()
EstimateCriterionNames = _CosmoBolognaLib.EstimateCriterionNames

def EstimateCriterionCast(*args):
    return _CosmoBolognaLib.EstimateCriterionCast(*args)
EstimateCriterionCast = _CosmoBolognaLib.EstimateCriterionCast
class Gadget_Header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gadget_Header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Gadget_Header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["npart"] = _CosmoBolognaLib.Gadget_Header_npart_set
    __swig_getmethods__["npart"] = _CosmoBolognaLib.Gadget_Header_npart_get
    if _newclass:
        npart = _swig_property(_CosmoBolognaLib.Gadget_Header_npart_get, _CosmoBolognaLib.Gadget_Header_npart_set)
    __swig_setmethods__["massarr"] = _CosmoBolognaLib.Gadget_Header_massarr_set
    __swig_getmethods__["massarr"] = _CosmoBolognaLib.Gadget_Header_massarr_get
    if _newclass:
        massarr = _swig_property(_CosmoBolognaLib.Gadget_Header_massarr_get, _CosmoBolognaLib.Gadget_Header_massarr_set)
    __swig_setmethods__["time"] = _CosmoBolognaLib.Gadget_Header_time_set
    __swig_getmethods__["time"] = _CosmoBolognaLib.Gadget_Header_time_get
    if _newclass:
        time = _swig_property(_CosmoBolognaLib.Gadget_Header_time_get, _CosmoBolognaLib.Gadget_Header_time_set)
    __swig_setmethods__["redshift"] = _CosmoBolognaLib.Gadget_Header_redshift_set
    __swig_getmethods__["redshift"] = _CosmoBolognaLib.Gadget_Header_redshift_get
    if _newclass:
        redshift = _swig_property(_CosmoBolognaLib.Gadget_Header_redshift_get, _CosmoBolognaLib.Gadget_Header_redshift_set)
    __swig_setmethods__["flag_sfr"] = _CosmoBolognaLib.Gadget_Header_flag_sfr_set
    __swig_getmethods__["flag_sfr"] = _CosmoBolognaLib.Gadget_Header_flag_sfr_get
    if _newclass:
        flag_sfr = _swig_property(_CosmoBolognaLib.Gadget_Header_flag_sfr_get, _CosmoBolognaLib.Gadget_Header_flag_sfr_set)
    __swig_setmethods__["flag_feedback"] = _CosmoBolognaLib.Gadget_Header_flag_feedback_set
    __swig_getmethods__["flag_feedback"] = _CosmoBolognaLib.Gadget_Header_flag_feedback_get
    if _newclass:
        flag_feedback = _swig_property(_CosmoBolognaLib.Gadget_Header_flag_feedback_get, _CosmoBolognaLib.Gadget_Header_flag_feedback_set)
    __swig_setmethods__["npartTotal"] = _CosmoBolognaLib.Gadget_Header_npartTotal_set
    __swig_getmethods__["npartTotal"] = _CosmoBolognaLib.Gadget_Header_npartTotal_get
    if _newclass:
        npartTotal = _swig_property(_CosmoBolognaLib.Gadget_Header_npartTotal_get, _CosmoBolognaLib.Gadget_Header_npartTotal_set)
    __swig_setmethods__["flag_cool"] = _CosmoBolognaLib.Gadget_Header_flag_cool_set
    __swig_getmethods__["flag_cool"] = _CosmoBolognaLib.Gadget_Header_flag_cool_get
    if _newclass:
        flag_cool = _swig_property(_CosmoBolognaLib.Gadget_Header_flag_cool_get, _CosmoBolognaLib.Gadget_Header_flag_cool_set)
    __swig_setmethods__["nfiles"] = _CosmoBolognaLib.Gadget_Header_nfiles_set
    __swig_getmethods__["nfiles"] = _CosmoBolognaLib.Gadget_Header_nfiles_get
    if _newclass:
        nfiles = _swig_property(_CosmoBolognaLib.Gadget_Header_nfiles_get, _CosmoBolognaLib.Gadget_Header_nfiles_set)
    __swig_setmethods__["boxsize"] = _CosmoBolognaLib.Gadget_Header_boxsize_set
    __swig_getmethods__["boxsize"] = _CosmoBolognaLib.Gadget_Header_boxsize_get
    if _newclass:
        boxsize = _swig_property(_CosmoBolognaLib.Gadget_Header_boxsize_get, _CosmoBolognaLib.Gadget_Header_boxsize_set)
    __swig_setmethods__["omega0"] = _CosmoBolognaLib.Gadget_Header_omega0_set
    __swig_getmethods__["omega0"] = _CosmoBolognaLib.Gadget_Header_omega0_get
    if _newclass:
        omega0 = _swig_property(_CosmoBolognaLib.Gadget_Header_omega0_get, _CosmoBolognaLib.Gadget_Header_omega0_set)
    __swig_setmethods__["omegaLambda"] = _CosmoBolognaLib.Gadget_Header_omegaLambda_set
    __swig_getmethods__["omegaLambda"] = _CosmoBolognaLib.Gadget_Header_omegaLambda_get
    if _newclass:
        omegaLambda = _swig_property(_CosmoBolognaLib.Gadget_Header_omegaLambda_get, _CosmoBolognaLib.Gadget_Header_omegaLambda_set)
    __swig_setmethods__["hubblePar"] = _CosmoBolognaLib.Gadget_Header_hubblePar_set
    __swig_getmethods__["hubblePar"] = _CosmoBolognaLib.Gadget_Header_hubblePar_get
    if _newclass:
        hubblePar = _swig_property(_CosmoBolognaLib.Gadget_Header_hubblePar_get, _CosmoBolognaLib.Gadget_Header_hubblePar_set)
    __swig_setmethods__["flag_stAge"] = _CosmoBolognaLib.Gadget_Header_flag_stAge_set
    __swig_getmethods__["flag_stAge"] = _CosmoBolognaLib.Gadget_Header_flag_stAge_get
    if _newclass:
        flag_stAge = _swig_property(_CosmoBolognaLib.Gadget_Header_flag_stAge_get, _CosmoBolognaLib.Gadget_Header_flag_stAge_set)
    __swig_setmethods__["flag_Metals"] = _CosmoBolognaLib.Gadget_Header_flag_Metals_set
    __swig_getmethods__["flag_Metals"] = _CosmoBolognaLib.Gadget_Header_flag_Metals_get
    if _newclass:
        flag_Metals = _swig_property(_CosmoBolognaLib.Gadget_Header_flag_Metals_get, _CosmoBolognaLib.Gadget_Header_flag_Metals_set)
    __swig_setmethods__["npart_totHW"] = _CosmoBolognaLib.Gadget_Header_npart_totHW_set
    __swig_getmethods__["npart_totHW"] = _CosmoBolognaLib.Gadget_Header_npart_totHW_get
    if _newclass:
        npart_totHW = _swig_property(_CosmoBolognaLib.Gadget_Header_npart_totHW_get, _CosmoBolognaLib.Gadget_Header_npart_totHW_set)
    __swig_setmethods__["flag_entr_ics"] = _CosmoBolognaLib.Gadget_Header_flag_entr_ics_set
    __swig_getmethods__["flag_entr_ics"] = _CosmoBolognaLib.Gadget_Header_flag_entr_ics_get
    if _newclass:
        flag_entr_ics = _swig_property(_CosmoBolognaLib.Gadget_Header_flag_entr_ics_get, _CosmoBolognaLib.Gadget_Header_flag_entr_ics_set)
    __swig_setmethods__["la"] = _CosmoBolognaLib.Gadget_Header_la_set
    __swig_getmethods__["la"] = _CosmoBolognaLib.Gadget_Header_la_get
    if _newclass:
        la = _swig_property(_CosmoBolognaLib.Gadget_Header_la_get, _CosmoBolognaLib.Gadget_Header_la_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_Gadget_Header()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Gadget_Header
    __del__ = lambda self: None
Gadget_Header_swigregister = _CosmoBolognaLib.Gadget_Header_swigregister
Gadget_Header_swigregister(Gadget_Header)

class SubFindTab_Header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubFindTab_Header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SubFindTab_Header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Ngroups"] = _CosmoBolognaLib.SubFindTab_Header_Ngroups_set
    __swig_getmethods__["Ngroups"] = _CosmoBolognaLib.SubFindTab_Header_Ngroups_get
    if _newclass:
        Ngroups = _swig_property(_CosmoBolognaLib.SubFindTab_Header_Ngroups_get, _CosmoBolognaLib.SubFindTab_Header_Ngroups_set)
    __swig_setmethods__["totNgroups"] = _CosmoBolognaLib.SubFindTab_Header_totNgroups_set
    __swig_getmethods__["totNgroups"] = _CosmoBolognaLib.SubFindTab_Header_totNgroups_get
    if _newclass:
        totNgroups = _swig_property(_CosmoBolognaLib.SubFindTab_Header_totNgroups_get, _CosmoBolognaLib.SubFindTab_Header_totNgroups_set)
    __swig_setmethods__["Nids"] = _CosmoBolognaLib.SubFindTab_Header_Nids_set
    __swig_getmethods__["Nids"] = _CosmoBolognaLib.SubFindTab_Header_Nids_get
    if _newclass:
        Nids = _swig_property(_CosmoBolognaLib.SubFindTab_Header_Nids_get, _CosmoBolognaLib.SubFindTab_Header_Nids_set)
    __swig_setmethods__["totNids"] = _CosmoBolognaLib.SubFindTab_Header_totNids_set
    __swig_getmethods__["totNids"] = _CosmoBolognaLib.SubFindTab_Header_totNids_get
    if _newclass:
        totNids = _swig_property(_CosmoBolognaLib.SubFindTab_Header_totNids_get, _CosmoBolognaLib.SubFindTab_Header_totNids_set)
    __swig_setmethods__["Ntask"] = _CosmoBolognaLib.SubFindTab_Header_Ntask_set
    __swig_getmethods__["Ntask"] = _CosmoBolognaLib.SubFindTab_Header_Ntask_get
    if _newclass:
        Ntask = _swig_property(_CosmoBolognaLib.SubFindTab_Header_Ntask_get, _CosmoBolognaLib.SubFindTab_Header_Ntask_set)
    __swig_setmethods__["Nsubs"] = _CosmoBolognaLib.SubFindTab_Header_Nsubs_set
    __swig_getmethods__["Nsubs"] = _CosmoBolognaLib.SubFindTab_Header_Nsubs_get
    if _newclass:
        Nsubs = _swig_property(_CosmoBolognaLib.SubFindTab_Header_Nsubs_get, _CosmoBolognaLib.SubFindTab_Header_Nsubs_set)
    __swig_setmethods__["totNsubs"] = _CosmoBolognaLib.SubFindTab_Header_totNsubs_set
    __swig_getmethods__["totNsubs"] = _CosmoBolognaLib.SubFindTab_Header_totNsubs_get
    if _newclass:
        totNsubs = _swig_property(_CosmoBolognaLib.SubFindTab_Header_totNsubs_get, _CosmoBolognaLib.SubFindTab_Header_totNsubs_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_SubFindTab_Header()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_SubFindTab_Header
    __del__ = lambda self: None
SubFindTab_Header_swigregister = _CosmoBolognaLib.SubFindTab_Header_swigregister
SubFindTab_Header_swigregister(SubFindTab_Header)

class Catalogue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Catalogue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Catalogue, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_Catalogue
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Catalogue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def sample(self):
        return _CosmoBolognaLib.Catalogue_sample(self)

    def index(self):
        return _CosmoBolognaLib.Catalogue_index(self)

    def xx(self, i):
        return _CosmoBolognaLib.Catalogue_xx(self, i)

    def yy(self, i):
        return _CosmoBolognaLib.Catalogue_yy(self, i)

    def zz(self, i):
        return _CosmoBolognaLib.Catalogue_zz(self, i)

    def vx(self, i):
        return _CosmoBolognaLib.Catalogue_vx(self, i)

    def vy(self, i):
        return _CosmoBolognaLib.Catalogue_vy(self, i)

    def vz(self, i):
        return _CosmoBolognaLib.Catalogue_vz(self, i)

    def dc(self, i):
        return _CosmoBolognaLib.Catalogue_dc(self, i)

    def ra(self, i):
        return _CosmoBolognaLib.Catalogue_ra(self, i)

    def dec(self, i):
        return _CosmoBolognaLib.Catalogue_dec(self, i)

    def redshift(self, i):
        return _CosmoBolognaLib.Catalogue_redshift(self, i)

    def weight(self, i):
        return _CosmoBolognaLib.Catalogue_weight(self, i)

    def x_displacement(self, i):
        return _CosmoBolognaLib.Catalogue_x_displacement(self, i)

    def y_displacement(self, i):
        return _CosmoBolognaLib.Catalogue_y_displacement(self, i)

    def z_displacement(self, i):
        return _CosmoBolognaLib.Catalogue_z_displacement(self, i)

    def region_list(self):
        return _CosmoBolognaLib.Catalogue_region_list(self)

    def nRegions(self):
        return _CosmoBolognaLib.Catalogue_nRegions(self)

    def field_list(self):
        return _CosmoBolognaLib.Catalogue_field_list(self)

    def nFields(self):
        return _CosmoBolognaLib.Catalogue_nFields(self)

    def mass(self, i):
        return _CosmoBolognaLib.Catalogue_mass(self, i)

    def magnitude(self, i):
        return _CosmoBolognaLib.Catalogue_magnitude(self, i)

    def radius(self, i):
        return _CosmoBolognaLib.Catalogue_radius(self, i)

    def densityContrast(self, i):
        return _CosmoBolognaLib.Catalogue_densityContrast(self, i)

    def centralDensity(self, i):
        return _CosmoBolognaLib.Catalogue_centralDensity(self, i)

    def ID(self, i):
        return _CosmoBolognaLib.Catalogue_ID(self, i)

    def richness(self, i):
        return _CosmoBolognaLib.Catalogue_richness(self, i)

    def generic(self, i):
        return _CosmoBolognaLib.Catalogue_generic(self, i)

    def tot_mass(self, i):
        return _CosmoBolognaLib.Catalogue_tot_mass(self, i)

    def region(self, *args):
        return _CosmoBolognaLib.Catalogue_region(self, *args)

    def field(self, *args):
        return _CosmoBolognaLib.Catalogue_field(self, *args)

    def satellites(self, index):
        return _CosmoBolognaLib.Catalogue_satellites(self, index)

    def var(self, *args):
        return _CosmoBolognaLib.Catalogue_var(self, *args)

    def isSetVar(self, *args):
        return _CosmoBolognaLib.Catalogue_isSetVar(self, *args)

    def catalogue_object(self, *args):
        return _CosmoBolognaLib.Catalogue_catalogue_object(self, *args)

    def coordinate(self, i):
        return _CosmoBolognaLib.Catalogue_coordinate(self, i)

    def nObjects(self):
        return _CosmoBolognaLib.Catalogue_nObjects(self)

    def Min(self, var_name):
        return _CosmoBolognaLib.Catalogue_Min(self, var_name)

    def Max(self, var_name):
        return _CosmoBolognaLib.Catalogue_Max(self, var_name)

    def stats_var(self, *args):
        return _CosmoBolognaLib.Catalogue_stats_var(self, *args)

    def var_distr(self, *args):
        return _CosmoBolognaLib.Catalogue_var_distr(self, *args)

    def weightedN(self):
        return _CosmoBolognaLib.Catalogue_weightedN(self)

    def volume(self):
        return _CosmoBolognaLib.Catalogue_volume(self)

    def numdensity(self):
        return _CosmoBolognaLib.Catalogue_numdensity(self)

    def mps(self):
        return _CosmoBolognaLib.Catalogue_mps(self)

    def set_region(self, region):
        return _CosmoBolognaLib.Catalogue_set_region(self, region)

    def set_field(self, field):
        return _CosmoBolognaLib.Catalogue_set_field(self, field)

    def set_var(self, *args):
        return _CosmoBolognaLib.Catalogue_set_var(self, *args)

    def set_satellite(self, *args):
        return _CosmoBolognaLib.Catalogue_set_satellite(self, *args)

    def set_satellites(self, *args):
        return _CosmoBolognaLib.Catalogue_set_satellites(self, *args)

    def compute_centralDensity(self, tracers_catalogue, ChM, density, ratio=0.1):
        return _CosmoBolognaLib.Catalogue_compute_centralDensity(self, tracers_catalogue, ChM, density, ratio)

    def compute_densityContrast(self, tracers_catalogue, ChM, ratio=0.1):
        return _CosmoBolognaLib.Catalogue_compute_densityContrast(self, tracers_catalogue, ChM, ratio)

    def remove_object(self, index):
        return _CosmoBolognaLib.Catalogue_remove_object(self, index)

    def remove_objects(self, *args):
        return _CosmoBolognaLib.Catalogue_remove_objects(self, *args)

    def swap_objects(self, ind1, ind2):
        return _CosmoBolognaLib.Catalogue_swap_objects(self, ind1, ind2)

    def sort(self, var_name, increasing=False):
        return _CosmoBolognaLib.Catalogue_sort(self, var_name, increasing)

    def computeComovingCoordinates(self, *args):
        return _CosmoBolognaLib.Catalogue_computeComovingCoordinates(self, *args)

    def computePolarCoordinates(self, *args):
        return _CosmoBolognaLib.Catalogue_computePolarCoordinates(self, *args)

    def normalizeComovingCoordinates(self):
        return _CosmoBolognaLib.Catalogue_normalizeComovingCoordinates(self)

    def restoreComovingCoordinates(self):
        return _CosmoBolognaLib.Catalogue_restoreComovingCoordinates(self)

    def Order(self, *args):
        return _CosmoBolognaLib.Catalogue_Order(self, *args)

    def write_comoving_coordinates(self, outputFile):
        return _CosmoBolognaLib.Catalogue_write_comoving_coordinates(self, outputFile)

    def write_obs_coordinates(self, outputFile):
        return _CosmoBolognaLib.Catalogue_write_obs_coordinates(self, outputFile)

    def write_data(self, *args):
        return _CosmoBolognaLib.Catalogue_write_data(self, *args)

    def distance(self, i, obj):
        return _CosmoBolognaLib.Catalogue_distance(self, i, obj)

    def angsep_xyz(self, i, obj):
        return _CosmoBolognaLib.Catalogue_angsep_xyz(self, i, obj)

    def __iadd__(self, *args):
        return _CosmoBolognaLib.Catalogue___iadd__(self, *args)

    def sub_catalogue(self, var_name, down, up, excl=False):
        return _CosmoBolognaLib.Catalogue_sub_catalogue(self, var_name, down, up, excl)

    def mangle_cut(self, mangle_mask, excl=False):
        return _CosmoBolognaLib.Catalogue_mangle_cut(self, mangle_mask, excl)

    def diluted_catalogue(self, nSub, seed=3213):
        return _CosmoBolognaLib.Catalogue_diluted_catalogue(self, nSub, seed)

    def smooth(self, *args):
        return _CosmoBolognaLib.Catalogue_smooth(self, *args)

    def nObjects_condition(self, var_name, down, up, excl=False):
        return _CosmoBolognaLib.Catalogue_nObjects_condition(self, var_name, down, up, excl)

    def weightedN_condition(self, var_name, down, up, excl=False):
        return _CosmoBolognaLib.Catalogue_weightedN_condition(self, var_name, down, up, excl)

    def compute_catalogueProperties(self, *args):
        return _CosmoBolognaLib.Catalogue_compute_catalogueProperties(self, *args)

    def counts_in_cell(self, *args):
        return _CosmoBolognaLib.Catalogue_counts_in_cell(self, *args)

    def density_field(self, cell_size, mask_catalogue, interpolation_type=0, kernel_radius=0., useMass=False):
        return _CosmoBolognaLib.Catalogue_density_field(self, cell_size, mask_catalogue, interpolation_type, kernel_radius, useMass)

    def add_object(self, *args):
        return _CosmoBolognaLib.Catalogue_add_object(self, *args)

    def add_objects(self, *args):
        return _CosmoBolognaLib.Catalogue_add_objects(self, *args)

    def replace_objects(self, *args):
        return _CosmoBolognaLib.Catalogue_replace_objects(self, *args)

    def __getitem__(self, i):
        return _CosmoBolognaLib.Catalogue___getitem__(self, i)
Catalogue_swigregister = _CosmoBolognaLib.Catalogue_swigregister
Catalogue_swigregister(Catalogue)

class ChainMesh_Catalogue(ChainMesh):
    __swig_setmethods__ = {}
    for _s in [ChainMesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChainMesh_Catalogue, name, value)
    __swig_getmethods__ = {}
    for _s in [ChainMesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChainMesh_Catalogue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_ChainMesh_Catalogue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_ChainMesh_Catalogue
    __del__ = lambda self: None

    def set_par(self, cell_size, cat, rmax):
        return _CosmoBolognaLib.ChainMesh_Catalogue_set_par(self, cell_size, cat, rmax)

    def get_order(self, order):
        return _CosmoBolognaLib.ChainMesh_Catalogue_get_order(self, order)

    def object_list(self, object, ii=-1):
        return _CosmoBolognaLib.ChainMesh_Catalogue_object_list(self, object, ii)

    def catalogue(self):
        return _CosmoBolognaLib.ChainMesh_Catalogue_catalogue(self)
ChainMesh_Catalogue_swigregister = _CosmoBolognaLib.ChainMesh_Catalogue_swigregister
ChainMesh_Catalogue_swigregister(ChainMesh_Catalogue)

class Void(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Void, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Void, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Void(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Void
    __del__ = lambda self: None

    def radius(self):
        return _CosmoBolognaLib.Void_radius(self)

    def densityContrast(self):
        return _CosmoBolognaLib.Void_densityContrast(self)

    def centralDensity(self):
        return _CosmoBolognaLib.Void_centralDensity(self)

    def set_radius(self, *args):
        return _CosmoBolognaLib.Void_set_radius(self, *args)

    def set_densityContrast(self, *args):
        return _CosmoBolognaLib.Void_set_densityContrast(self, *args)

    def set_centralDensity(self, *args):
        return _CosmoBolognaLib.Void_set_centralDensity(self, *args)

    def isSet_radius(self):
        return _CosmoBolognaLib.Void_isSet_radius(self)

    def isSet_densityContrast(self):
        return _CosmoBolognaLib.Void_isSet_densityContrast(self)

    def isSet_centralDensity(self):
        return _CosmoBolognaLib.Void_isSet_centralDensity(self)
Void_swigregister = _CosmoBolognaLib.Void_swigregister
Void_swigregister(Void)

class HostHalo(Halo):
    __swig_setmethods__ = {}
    for _s in [Halo]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HostHalo, name, value)
    __swig_getmethods__ = {}
    for _s in [Halo]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HostHalo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_HostHalo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_HostHalo
    __del__ = lambda self: None

    def tot_mass(self):
        return _CosmoBolognaLib.HostHalo_tot_mass(self)

    def mass_estimate(self):
        return _CosmoBolognaLib.HostHalo_mass_estimate(self)

    def radius_estimate(self):
        return _CosmoBolognaLib.HostHalo_radius_estimate(self)

    def veldisp_estimate(self):
        return _CosmoBolognaLib.HostHalo_veldisp_estimate(self)

    def xcm(self):
        return _CosmoBolognaLib.HostHalo_xcm(self)

    def ycm(self):
        return _CosmoBolognaLib.HostHalo_ycm(self)

    def zcm(self):
        return _CosmoBolognaLib.HostHalo_zcm(self)

    def spin_x(self):
        return _CosmoBolognaLib.HostHalo_spin_x(self)

    def spin_y(self):
        return _CosmoBolognaLib.HostHalo_spin_y(self)

    def spin_z(self):
        return _CosmoBolognaLib.HostHalo_spin_z(self)

    def veldisp(self):
        return _CosmoBolognaLib.HostHalo_veldisp(self)

    def vmax(self):
        return _CosmoBolognaLib.HostHalo_vmax(self)

    def vmax_rad(self):
        return _CosmoBolognaLib.HostHalo_vmax_rad(self)

    def radius(self):
        return _CosmoBolognaLib.HostHalo_radius(self)

    def parent(self):
        return _CosmoBolognaLib.HostHalo_parent(self)

    def nsub(self):
        return _CosmoBolognaLib.HostHalo_nsub(self)

    def satellites(self):
        return _CosmoBolognaLib.HostHalo_satellites(self)

    def set_tot_mass(self, *args):
        return _CosmoBolognaLib.HostHalo_set_tot_mass(self, *args)

    def set_mass_estimate(self, *args):
        return _CosmoBolognaLib.HostHalo_set_mass_estimate(self, *args)

    def set_radius_estimate(self, *args):
        return _CosmoBolognaLib.HostHalo_set_radius_estimate(self, *args)

    def set_veldisp_estimate(self, *args):
        return _CosmoBolognaLib.HostHalo_set_veldisp_estimate(self, *args)

    def set_xcm(self, *args):
        return _CosmoBolognaLib.HostHalo_set_xcm(self, *args)

    def set_ycm(self, *args):
        return _CosmoBolognaLib.HostHalo_set_ycm(self, *args)

    def set_zcm(self, *args):
        return _CosmoBolognaLib.HostHalo_set_zcm(self, *args)

    def set_spin_x(self, *args):
        return _CosmoBolognaLib.HostHalo_set_spin_x(self, *args)

    def set_spin_y(self, *args):
        return _CosmoBolognaLib.HostHalo_set_spin_y(self, *args)

    def set_spin_z(self, *args):
        return _CosmoBolognaLib.HostHalo_set_spin_z(self, *args)

    def set_veldisp(self, *args):
        return _CosmoBolognaLib.HostHalo_set_veldisp(self, *args)

    def set_vmax(self, *args):
        return _CosmoBolognaLib.HostHalo_set_vmax(self, *args)

    def set_vmax_rad(self, *args):
        return _CosmoBolognaLib.HostHalo_set_vmax_rad(self, *args)

    def set_radius(self, *args):
        return _CosmoBolognaLib.HostHalo_set_radius(self, *args)

    def set_parent(self, *args):
        return _CosmoBolognaLib.HostHalo_set_parent(self, *args)

    def set_nsub(self, *args):
        return _CosmoBolognaLib.HostHalo_set_nsub(self, *args)

    def set_satellite(self, *args):
        return _CosmoBolognaLib.HostHalo_set_satellite(self, *args)

    def set_satellites(self, *args):
        return _CosmoBolognaLib.HostHalo_set_satellites(self, *args)

    def isSet_tot_mass(self):
        return _CosmoBolognaLib.HostHalo_isSet_tot_mass(self)

    def isSet_mass_estimate(self):
        return _CosmoBolognaLib.HostHalo_isSet_mass_estimate(self)

    def isSet_radius_estimate(self):
        return _CosmoBolognaLib.HostHalo_isSet_radius_estimate(self)

    def isSet_veldisp_estimate(self):
        return _CosmoBolognaLib.HostHalo_isSet_veldisp_estimate(self)

    def isSet_xcm(self):
        return _CosmoBolognaLib.HostHalo_isSet_xcm(self)

    def isSet_ycm(self):
        return _CosmoBolognaLib.HostHalo_isSet_ycm(self)

    def isSet_zcm(self):
        return _CosmoBolognaLib.HostHalo_isSet_zcm(self)

    def isSet_spin_x(self):
        return _CosmoBolognaLib.HostHalo_isSet_spin_x(self)

    def isSet_spin_y(self):
        return _CosmoBolognaLib.HostHalo_isSet_spin_y(self)

    def isSet_spin_z(self):
        return _CosmoBolognaLib.HostHalo_isSet_spin_z(self)

    def isSet_veldisp(self):
        return _CosmoBolognaLib.HostHalo_isSet_veldisp(self)

    def isSet_vmax(self):
        return _CosmoBolognaLib.HostHalo_isSet_vmax(self)

    def isSet_vmax_rad(self):
        return _CosmoBolognaLib.HostHalo_isSet_vmax_rad(self)

    def isSet_radius(self):
        return _CosmoBolognaLib.HostHalo_isSet_radius(self)

    def isSet_parent(self):
        return _CosmoBolognaLib.HostHalo_isSet_parent(self)

    def isSet_nsub(self):
        return _CosmoBolognaLib.HostHalo_isSet_nsub(self)
HostHalo_swigregister = _CosmoBolognaLib.HostHalo_swigregister
HostHalo_swigregister(HostHalo)

class RandomObjVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RandomObjVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RandomObjVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CosmoBolognaLib.RandomObjVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CosmoBolognaLib.RandomObjVector___nonzero__(self)

    def __bool__(self):
        return _CosmoBolognaLib.RandomObjVector___bool__(self)

    def __len__(self):
        return _CosmoBolognaLib.RandomObjVector___len__(self)

    def __getslice__(self, i, j):
        return _CosmoBolognaLib.RandomObjVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CosmoBolognaLib.RandomObjVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CosmoBolognaLib.RandomObjVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CosmoBolognaLib.RandomObjVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CosmoBolognaLib.RandomObjVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CosmoBolognaLib.RandomObjVector___setitem__(self, *args)

    def pop(self):
        return _CosmoBolognaLib.RandomObjVector_pop(self)

    def append(self, x):
        return _CosmoBolognaLib.RandomObjVector_append(self, x)

    def empty(self):
        return _CosmoBolognaLib.RandomObjVector_empty(self)

    def size(self):
        return _CosmoBolognaLib.RandomObjVector_size(self)

    def swap(self, v):
        return _CosmoBolognaLib.RandomObjVector_swap(self, v)

    def begin(self):
        return _CosmoBolognaLib.RandomObjVector_begin(self)

    def end(self):
        return _CosmoBolognaLib.RandomObjVector_end(self)

    def rbegin(self):
        return _CosmoBolognaLib.RandomObjVector_rbegin(self)

    def rend(self):
        return _CosmoBolognaLib.RandomObjVector_rend(self)

    def clear(self):
        return _CosmoBolognaLib.RandomObjVector_clear(self)

    def get_allocator(self):
        return _CosmoBolognaLib.RandomObjVector_get_allocator(self)

    def pop_back(self):
        return _CosmoBolognaLib.RandomObjVector_pop_back(self)

    def erase(self, *args):
        return _CosmoBolognaLib.RandomObjVector_erase(self, *args)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_RandomObjVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _CosmoBolognaLib.RandomObjVector_push_back(self, x)

    def front(self):
        return _CosmoBolognaLib.RandomObjVector_front(self)

    def back(self):
        return _CosmoBolognaLib.RandomObjVector_back(self)

    def assign(self, n, x):
        return _CosmoBolognaLib.RandomObjVector_assign(self, n, x)

    def resize(self, *args):
        return _CosmoBolognaLib.RandomObjVector_resize(self, *args)

    def insert(self, *args):
        return _CosmoBolognaLib.RandomObjVector_insert(self, *args)

    def reserve(self, n):
        return _CosmoBolognaLib.RandomObjVector_reserve(self, n)

    def capacity(self):
        return _CosmoBolognaLib.RandomObjVector_capacity(self)
    __swig_destroy__ = _CosmoBolognaLib.delete_RandomObjVector
    __del__ = lambda self: None
RandomObjVector_swigregister = _CosmoBolognaLib.RandomObjVector_swigregister
RandomObjVector_swigregister(RandomObjVector)

class MockVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MockVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MockVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CosmoBolognaLib.MockVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CosmoBolognaLib.MockVector___nonzero__(self)

    def __bool__(self):
        return _CosmoBolognaLib.MockVector___bool__(self)

    def __len__(self):
        return _CosmoBolognaLib.MockVector___len__(self)

    def __getslice__(self, i, j):
        return _CosmoBolognaLib.MockVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CosmoBolognaLib.MockVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CosmoBolognaLib.MockVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CosmoBolognaLib.MockVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CosmoBolognaLib.MockVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CosmoBolognaLib.MockVector___setitem__(self, *args)

    def pop(self):
        return _CosmoBolognaLib.MockVector_pop(self)

    def append(self, x):
        return _CosmoBolognaLib.MockVector_append(self, x)

    def empty(self):
        return _CosmoBolognaLib.MockVector_empty(self)

    def size(self):
        return _CosmoBolognaLib.MockVector_size(self)

    def swap(self, v):
        return _CosmoBolognaLib.MockVector_swap(self, v)

    def begin(self):
        return _CosmoBolognaLib.MockVector_begin(self)

    def end(self):
        return _CosmoBolognaLib.MockVector_end(self)

    def rbegin(self):
        return _CosmoBolognaLib.MockVector_rbegin(self)

    def rend(self):
        return _CosmoBolognaLib.MockVector_rend(self)

    def clear(self):
        return _CosmoBolognaLib.MockVector_clear(self)

    def get_allocator(self):
        return _CosmoBolognaLib.MockVector_get_allocator(self)

    def pop_back(self):
        return _CosmoBolognaLib.MockVector_pop_back(self)

    def erase(self, *args):
        return _CosmoBolognaLib.MockVector_erase(self, *args)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_MockVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _CosmoBolognaLib.MockVector_push_back(self, x)

    def front(self):
        return _CosmoBolognaLib.MockVector_front(self)

    def back(self):
        return _CosmoBolognaLib.MockVector_back(self)

    def assign(self, n, x):
        return _CosmoBolognaLib.MockVector_assign(self, n, x)

    def resize(self, *args):
        return _CosmoBolognaLib.MockVector_resize(self, *args)

    def insert(self, *args):
        return _CosmoBolognaLib.MockVector_insert(self, *args)

    def reserve(self, n):
        return _CosmoBolognaLib.MockVector_reserve(self, n)

    def capacity(self):
        return _CosmoBolognaLib.MockVector_capacity(self)
    __swig_destroy__ = _CosmoBolognaLib.delete_MockVector
    __del__ = lambda self: None
MockVector_swigregister = _CosmoBolognaLib.MockVector_swigregister
MockVector_swigregister(MockVector)

class HaloVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaloVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaloVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CosmoBolognaLib.HaloVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CosmoBolognaLib.HaloVector___nonzero__(self)

    def __bool__(self):
        return _CosmoBolognaLib.HaloVector___bool__(self)

    def __len__(self):
        return _CosmoBolognaLib.HaloVector___len__(self)

    def __getslice__(self, i, j):
        return _CosmoBolognaLib.HaloVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CosmoBolognaLib.HaloVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CosmoBolognaLib.HaloVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CosmoBolognaLib.HaloVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CosmoBolognaLib.HaloVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CosmoBolognaLib.HaloVector___setitem__(self, *args)

    def pop(self):
        return _CosmoBolognaLib.HaloVector_pop(self)

    def append(self, x):
        return _CosmoBolognaLib.HaloVector_append(self, x)

    def empty(self):
        return _CosmoBolognaLib.HaloVector_empty(self)

    def size(self):
        return _CosmoBolognaLib.HaloVector_size(self)

    def swap(self, v):
        return _CosmoBolognaLib.HaloVector_swap(self, v)

    def begin(self):
        return _CosmoBolognaLib.HaloVector_begin(self)

    def end(self):
        return _CosmoBolognaLib.HaloVector_end(self)

    def rbegin(self):
        return _CosmoBolognaLib.HaloVector_rbegin(self)

    def rend(self):
        return _CosmoBolognaLib.HaloVector_rend(self)

    def clear(self):
        return _CosmoBolognaLib.HaloVector_clear(self)

    def get_allocator(self):
        return _CosmoBolognaLib.HaloVector_get_allocator(self)

    def pop_back(self):
        return _CosmoBolognaLib.HaloVector_pop_back(self)

    def erase(self, *args):
        return _CosmoBolognaLib.HaloVector_erase(self, *args)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_HaloVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _CosmoBolognaLib.HaloVector_push_back(self, x)

    def front(self):
        return _CosmoBolognaLib.HaloVector_front(self)

    def back(self):
        return _CosmoBolognaLib.HaloVector_back(self)

    def assign(self, n, x):
        return _CosmoBolognaLib.HaloVector_assign(self, n, x)

    def resize(self, *args):
        return _CosmoBolognaLib.HaloVector_resize(self, *args)

    def insert(self, *args):
        return _CosmoBolognaLib.HaloVector_insert(self, *args)

    def reserve(self, n):
        return _CosmoBolognaLib.HaloVector_reserve(self, n)

    def capacity(self):
        return _CosmoBolognaLib.HaloVector_capacity(self)
    __swig_destroy__ = _CosmoBolognaLib.delete_HaloVector
    __del__ = lambda self: None
HaloVector_swigregister = _CosmoBolognaLib.HaloVector_swigregister
HaloVector_swigregister(HaloVector)

class GalaxyVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GalaxyVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GalaxyVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CosmoBolognaLib.GalaxyVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CosmoBolognaLib.GalaxyVector___nonzero__(self)

    def __bool__(self):
        return _CosmoBolognaLib.GalaxyVector___bool__(self)

    def __len__(self):
        return _CosmoBolognaLib.GalaxyVector___len__(self)

    def __getslice__(self, i, j):
        return _CosmoBolognaLib.GalaxyVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CosmoBolognaLib.GalaxyVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CosmoBolognaLib.GalaxyVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CosmoBolognaLib.GalaxyVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CosmoBolognaLib.GalaxyVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CosmoBolognaLib.GalaxyVector___setitem__(self, *args)

    def pop(self):
        return _CosmoBolognaLib.GalaxyVector_pop(self)

    def append(self, x):
        return _CosmoBolognaLib.GalaxyVector_append(self, x)

    def empty(self):
        return _CosmoBolognaLib.GalaxyVector_empty(self)

    def size(self):
        return _CosmoBolognaLib.GalaxyVector_size(self)

    def swap(self, v):
        return _CosmoBolognaLib.GalaxyVector_swap(self, v)

    def begin(self):
        return _CosmoBolognaLib.GalaxyVector_begin(self)

    def end(self):
        return _CosmoBolognaLib.GalaxyVector_end(self)

    def rbegin(self):
        return _CosmoBolognaLib.GalaxyVector_rbegin(self)

    def rend(self):
        return _CosmoBolognaLib.GalaxyVector_rend(self)

    def clear(self):
        return _CosmoBolognaLib.GalaxyVector_clear(self)

    def get_allocator(self):
        return _CosmoBolognaLib.GalaxyVector_get_allocator(self)

    def pop_back(self):
        return _CosmoBolognaLib.GalaxyVector_pop_back(self)

    def erase(self, *args):
        return _CosmoBolognaLib.GalaxyVector_erase(self, *args)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_GalaxyVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _CosmoBolognaLib.GalaxyVector_push_back(self, x)

    def front(self):
        return _CosmoBolognaLib.GalaxyVector_front(self)

    def back(self):
        return _CosmoBolognaLib.GalaxyVector_back(self)

    def assign(self, n, x):
        return _CosmoBolognaLib.GalaxyVector_assign(self, n, x)

    def resize(self, *args):
        return _CosmoBolognaLib.GalaxyVector_resize(self, *args)

    def insert(self, *args):
        return _CosmoBolognaLib.GalaxyVector_insert(self, *args)

    def reserve(self, n):
        return _CosmoBolognaLib.GalaxyVector_reserve(self, n)

    def capacity(self):
        return _CosmoBolognaLib.GalaxyVector_capacity(self)
    __swig_destroy__ = _CosmoBolognaLib.delete_GalaxyVector
    __del__ = lambda self: None
GalaxyVector_swigregister = _CosmoBolognaLib.GalaxyVector_swigregister
GalaxyVector_swigregister(GalaxyVector)

class ClusterVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClusterVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClusterVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CosmoBolognaLib.ClusterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CosmoBolognaLib.ClusterVector___nonzero__(self)

    def __bool__(self):
        return _CosmoBolognaLib.ClusterVector___bool__(self)

    def __len__(self):
        return _CosmoBolognaLib.ClusterVector___len__(self)

    def __getslice__(self, i, j):
        return _CosmoBolognaLib.ClusterVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CosmoBolognaLib.ClusterVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CosmoBolognaLib.ClusterVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CosmoBolognaLib.ClusterVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CosmoBolognaLib.ClusterVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CosmoBolognaLib.ClusterVector___setitem__(self, *args)

    def pop(self):
        return _CosmoBolognaLib.ClusterVector_pop(self)

    def append(self, x):
        return _CosmoBolognaLib.ClusterVector_append(self, x)

    def empty(self):
        return _CosmoBolognaLib.ClusterVector_empty(self)

    def size(self):
        return _CosmoBolognaLib.ClusterVector_size(self)

    def swap(self, v):
        return _CosmoBolognaLib.ClusterVector_swap(self, v)

    def begin(self):
        return _CosmoBolognaLib.ClusterVector_begin(self)

    def end(self):
        return _CosmoBolognaLib.ClusterVector_end(self)

    def rbegin(self):
        return _CosmoBolognaLib.ClusterVector_rbegin(self)

    def rend(self):
        return _CosmoBolognaLib.ClusterVector_rend(self)

    def clear(self):
        return _CosmoBolognaLib.ClusterVector_clear(self)

    def get_allocator(self):
        return _CosmoBolognaLib.ClusterVector_get_allocator(self)

    def pop_back(self):
        return _CosmoBolognaLib.ClusterVector_pop_back(self)

    def erase(self, *args):
        return _CosmoBolognaLib.ClusterVector_erase(self, *args)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_ClusterVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _CosmoBolognaLib.ClusterVector_push_back(self, x)

    def front(self):
        return _CosmoBolognaLib.ClusterVector_front(self)

    def back(self):
        return _CosmoBolognaLib.ClusterVector_back(self)

    def assign(self, n, x):
        return _CosmoBolognaLib.ClusterVector_assign(self, n, x)

    def resize(self, *args):
        return _CosmoBolognaLib.ClusterVector_resize(self, *args)

    def insert(self, *args):
        return _CosmoBolognaLib.ClusterVector_insert(self, *args)

    def reserve(self, n):
        return _CosmoBolognaLib.ClusterVector_reserve(self, n)

    def capacity(self):
        return _CosmoBolognaLib.ClusterVector_capacity(self)
    __swig_destroy__ = _CosmoBolognaLib.delete_ClusterVector
    __del__ = lambda self: None
ClusterVector_swigregister = _CosmoBolognaLib.ClusterVector_swigregister
ClusterVector_swigregister(ClusterVector)

class VoidVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VoidVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VoidVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CosmoBolognaLib.VoidVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CosmoBolognaLib.VoidVector___nonzero__(self)

    def __bool__(self):
        return _CosmoBolognaLib.VoidVector___bool__(self)

    def __len__(self):
        return _CosmoBolognaLib.VoidVector___len__(self)

    def __getslice__(self, i, j):
        return _CosmoBolognaLib.VoidVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CosmoBolognaLib.VoidVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CosmoBolognaLib.VoidVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CosmoBolognaLib.VoidVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CosmoBolognaLib.VoidVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CosmoBolognaLib.VoidVector___setitem__(self, *args)

    def pop(self):
        return _CosmoBolognaLib.VoidVector_pop(self)

    def append(self, x):
        return _CosmoBolognaLib.VoidVector_append(self, x)

    def empty(self):
        return _CosmoBolognaLib.VoidVector_empty(self)

    def size(self):
        return _CosmoBolognaLib.VoidVector_size(self)

    def swap(self, v):
        return _CosmoBolognaLib.VoidVector_swap(self, v)

    def begin(self):
        return _CosmoBolognaLib.VoidVector_begin(self)

    def end(self):
        return _CosmoBolognaLib.VoidVector_end(self)

    def rbegin(self):
        return _CosmoBolognaLib.VoidVector_rbegin(self)

    def rend(self):
        return _CosmoBolognaLib.VoidVector_rend(self)

    def clear(self):
        return _CosmoBolognaLib.VoidVector_clear(self)

    def get_allocator(self):
        return _CosmoBolognaLib.VoidVector_get_allocator(self)

    def pop_back(self):
        return _CosmoBolognaLib.VoidVector_pop_back(self)

    def erase(self, *args):
        return _CosmoBolognaLib.VoidVector_erase(self, *args)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_VoidVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _CosmoBolognaLib.VoidVector_push_back(self, x)

    def front(self):
        return _CosmoBolognaLib.VoidVector_front(self)

    def back(self):
        return _CosmoBolognaLib.VoidVector_back(self)

    def assign(self, n, x):
        return _CosmoBolognaLib.VoidVector_assign(self, n, x)

    def resize(self, *args):
        return _CosmoBolognaLib.VoidVector_resize(self, *args)

    def insert(self, *args):
        return _CosmoBolognaLib.VoidVector_insert(self, *args)

    def reserve(self, n):
        return _CosmoBolognaLib.VoidVector_reserve(self, n)

    def capacity(self):
        return _CosmoBolognaLib.VoidVector_capacity(self)
    __swig_destroy__ = _CosmoBolognaLib.delete_VoidVector
    __del__ = lambda self: None
VoidVector_swigregister = _CosmoBolognaLib.VoidVector_swigregister
VoidVector_swigregister(VoidVector)

class HostHaloVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HostHaloVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HostHaloVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CosmoBolognaLib.HostHaloVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CosmoBolognaLib.HostHaloVector___nonzero__(self)

    def __bool__(self):
        return _CosmoBolognaLib.HostHaloVector___bool__(self)

    def __len__(self):
        return _CosmoBolognaLib.HostHaloVector___len__(self)

    def __getslice__(self, i, j):
        return _CosmoBolognaLib.HostHaloVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CosmoBolognaLib.HostHaloVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CosmoBolognaLib.HostHaloVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CosmoBolognaLib.HostHaloVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CosmoBolognaLib.HostHaloVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CosmoBolognaLib.HostHaloVector___setitem__(self, *args)

    def pop(self):
        return _CosmoBolognaLib.HostHaloVector_pop(self)

    def append(self, x):
        return _CosmoBolognaLib.HostHaloVector_append(self, x)

    def empty(self):
        return _CosmoBolognaLib.HostHaloVector_empty(self)

    def size(self):
        return _CosmoBolognaLib.HostHaloVector_size(self)

    def swap(self, v):
        return _CosmoBolognaLib.HostHaloVector_swap(self, v)

    def begin(self):
        return _CosmoBolognaLib.HostHaloVector_begin(self)

    def end(self):
        return _CosmoBolognaLib.HostHaloVector_end(self)

    def rbegin(self):
        return _CosmoBolognaLib.HostHaloVector_rbegin(self)

    def rend(self):
        return _CosmoBolognaLib.HostHaloVector_rend(self)

    def clear(self):
        return _CosmoBolognaLib.HostHaloVector_clear(self)

    def get_allocator(self):
        return _CosmoBolognaLib.HostHaloVector_get_allocator(self)

    def pop_back(self):
        return _CosmoBolognaLib.HostHaloVector_pop_back(self)

    def erase(self, *args):
        return _CosmoBolognaLib.HostHaloVector_erase(self, *args)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_HostHaloVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _CosmoBolognaLib.HostHaloVector_push_back(self, x)

    def front(self):
        return _CosmoBolognaLib.HostHaloVector_front(self)

    def back(self):
        return _CosmoBolognaLib.HostHaloVector_back(self)

    def assign(self, n, x):
        return _CosmoBolognaLib.HostHaloVector_assign(self, n, x)

    def resize(self, *args):
        return _CosmoBolognaLib.HostHaloVector_resize(self, *args)

    def insert(self, *args):
        return _CosmoBolognaLib.HostHaloVector_insert(self, *args)

    def reserve(self, n):
        return _CosmoBolognaLib.HostHaloVector_reserve(self, n)

    def capacity(self):
        return _CosmoBolognaLib.HostHaloVector_capacity(self)
    __swig_destroy__ = _CosmoBolognaLib.delete_HostHaloVector
    __del__ = lambda self: None
HostHaloVector_swigregister = _CosmoBolognaLib.HostHaloVector_swigregister
HostHaloVector_swigregister(HostHaloVector)

class VarVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VarVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CosmoBolognaLib.VarVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CosmoBolognaLib.VarVector___nonzero__(self)

    def __bool__(self):
        return _CosmoBolognaLib.VarVector___bool__(self)

    def __len__(self):
        return _CosmoBolognaLib.VarVector___len__(self)

    def __getslice__(self, i, j):
        return _CosmoBolognaLib.VarVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CosmoBolognaLib.VarVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CosmoBolognaLib.VarVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CosmoBolognaLib.VarVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CosmoBolognaLib.VarVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CosmoBolognaLib.VarVector___setitem__(self, *args)

    def pop(self):
        return _CosmoBolognaLib.VarVector_pop(self)

    def append(self, x):
        return _CosmoBolognaLib.VarVector_append(self, x)

    def empty(self):
        return _CosmoBolognaLib.VarVector_empty(self)

    def size(self):
        return _CosmoBolognaLib.VarVector_size(self)

    def swap(self, v):
        return _CosmoBolognaLib.VarVector_swap(self, v)

    def begin(self):
        return _CosmoBolognaLib.VarVector_begin(self)

    def end(self):
        return _CosmoBolognaLib.VarVector_end(self)

    def rbegin(self):
        return _CosmoBolognaLib.VarVector_rbegin(self)

    def rend(self):
        return _CosmoBolognaLib.VarVector_rend(self)

    def clear(self):
        return _CosmoBolognaLib.VarVector_clear(self)

    def get_allocator(self):
        return _CosmoBolognaLib.VarVector_get_allocator(self)

    def pop_back(self):
        return _CosmoBolognaLib.VarVector_pop_back(self)

    def erase(self, *args):
        return _CosmoBolognaLib.VarVector_erase(self, *args)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_VarVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _CosmoBolognaLib.VarVector_push_back(self, x)

    def front(self):
        return _CosmoBolognaLib.VarVector_front(self)

    def back(self):
        return _CosmoBolognaLib.VarVector_back(self)

    def assign(self, n, x):
        return _CosmoBolognaLib.VarVector_assign(self, n, x)

    def resize(self, *args):
        return _CosmoBolognaLib.VarVector_resize(self, *args)

    def insert(self, *args):
        return _CosmoBolognaLib.VarVector_insert(self, *args)

    def reserve(self, n):
        return _CosmoBolognaLib.VarVector_reserve(self, n)

    def capacity(self):
        return _CosmoBolognaLib.VarVector_capacity(self)
    __swig_destroy__ = _CosmoBolognaLib.delete_VarVector
    __del__ = lambda self: None
VarVector_swigregister = _CosmoBolognaLib.VarVector_swigregister
VarVector_swigregister(VarVector)

class LogNormal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogNormal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogNormal, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_LogNormal
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_LogNormal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setCatalogues(self, data, random):
        return _CosmoBolognaLib.LogNormal_setCatalogues(self, data, random)

    def setParameters_from_xi(self, rr, xi):
        return _CosmoBolognaLib.LogNormal_setParameters_from_xi(self, rr, xi)

    def setParameters_from_model(self, *args):
        return _CosmoBolognaLib.LogNormal_setParameters_from_model(self, *args)

    def set_nLN(self, nLN):
        return _CosmoBolognaLib.LogNormal_set_nLN(self, nLN)

    def nLN(self):
        return _CosmoBolognaLib.LogNormal_nLN(self)

    def LNCat(self, i):
        return _CosmoBolognaLib.LogNormal_LNCat(self, i)

    def generate_LogNormal_mock(self, *args):
        return _CosmoBolognaLib.LogNormal_generate_LogNormal_mock(self, *args)
LogNormal_swigregister = _CosmoBolognaLib.LogNormal_swigregister
LogNormal_swigregister(LogNormal)

class LogNormalFull(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogNormalFull, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogNormalFull, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_LogNormalFull(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_LogNormalFull
    __del__ = lambda self: None

    def set_cosmo_function(self, *args):
        return _CosmoBolognaLib.LogNormalFull_set_cosmo_function(self, *args)

    def set_grid_parameters(self, *args):
        return _CosmoBolognaLib.LogNormalFull_set_grid_parameters(self, *args)

    def generate_lognormal(self, start, stop, doRSD, smoothing_radius, nObjects, redshift, bias, dir, filename, seed, setfields=1, use_random=True):
        return _CosmoBolognaLib.LogNormalFull_generate_lognormal(self, start, stop, doRSD, smoothing_radius, nObjects, redshift, bias, dir, filename, seed, setfields, use_random)
LogNormalFull_swigregister = _CosmoBolognaLib.LogNormalFull_swigregister
LogNormalFull_swigregister(LogNormalFull)

ErrorType__Poisson_ = _CosmoBolognaLib.ErrorType__Poisson_
ErrorType__Jackknife_ = _CosmoBolognaLib.ErrorType__Jackknife_
ErrorType__Bootstrap_ = _CosmoBolognaLib.ErrorType__Bootstrap_
ErrorType__JackknifeTest_ = _CosmoBolognaLib.ErrorType__JackknifeTest_
ErrorType__BootstrapTest_ = _CosmoBolognaLib.ErrorType__BootstrapTest_
ErrorType__JackknifeObjects_ = _CosmoBolognaLib.ErrorType__JackknifeObjects_
ErrorType__BootstrapObjects_ = _CosmoBolognaLib.ErrorType__BootstrapObjects_
ErrorType__None_ = _CosmoBolognaLib.ErrorType__None_

def ErrorTypeNames():
    return _CosmoBolognaLib.ErrorTypeNames()
ErrorTypeNames = _CosmoBolognaLib.ErrorTypeNames

def ErrorTypeCast(*args):
    return _CosmoBolognaLib.ErrorTypeCast(*args)
ErrorTypeCast = _CosmoBolognaLib.ErrorTypeCast
class Measure(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Measure, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Measure, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CosmoBolognaLib.new_Measure()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Measure
    __del__ = lambda self: None

    def dataset(self):
        return _CosmoBolognaLib.Measure_dataset(self)
Measure_swigregister = _CosmoBolognaLib.Measure_swigregister
Measure_swigregister(Measure)

class NumberCounts(Measure):
    __swig_setmethods__ = {}
    for _s in [Measure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumberCounts, name, value)
    __swig_getmethods__ = {}
    for _s in [Measure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NumberCounts, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CosmoBolognaLib.new_NumberCounts()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_NumberCounts
    __del__ = lambda self: None

    def set_data(self, data):
        return _CosmoBolognaLib.NumberCounts_set_data(self, data)

    def catalogue(self):
        return _CosmoBolognaLib.NumberCounts_catalogue(self)

    def measure(self, *args):
        return _CosmoBolognaLib.NumberCounts_measure(self, *args)

    def write(self, *args):
        return _CosmoBolognaLib.NumberCounts_write(self, *args)

    def write_covariance(self, dir, file):
        return _CosmoBolognaLib.NumberCounts_write_covariance(self, dir, file)

    def compute_covariance(self, histo, JK):
        return _CosmoBolognaLib.NumberCounts_compute_covariance(self, histo, JK)

    def histogram(self):
        return _CosmoBolognaLib.NumberCounts_histogram(self)

    def HistogramType(self):
        return _CosmoBolognaLib.NumberCounts_HistogramType(self)

    def fact(self):
        return _CosmoBolognaLib.NumberCounts_fact(self)
NumberCounts_swigregister = _CosmoBolognaLib.NumberCounts_swigregister
NumberCounts_swigregister(NumberCounts)

class NumberCounts1D(NumberCounts):
    __swig_setmethods__ = {}
    for _s in [NumberCounts]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumberCounts1D, name, value)
    __swig_getmethods__ = {}
    for _s in [NumberCounts]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NumberCounts1D, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_NumberCounts1D
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_NumberCounts1D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def measure(self, *args):
        return _CosmoBolognaLib.NumberCounts1D_measure(self, *args)

    def compute_covariance(self, hist, JK):
        return _CosmoBolognaLib.NumberCounts1D_compute_covariance(self, hist, JK)

    def write(self, *args):
        return _CosmoBolognaLib.NumberCounts1D_write(self, *args)

    def write_covariance(self, dir, file):
        return _CosmoBolognaLib.NumberCounts1D_write_covariance(self, dir, file)
NumberCounts1D_swigregister = _CosmoBolognaLib.NumberCounts1D_swigregister
NumberCounts1D_swigregister(NumberCounts1D)

class NumberCounts2D(NumberCounts):
    __swig_setmethods__ = {}
    for _s in [NumberCounts]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumberCounts2D, name, value)
    __swig_getmethods__ = {}
    for _s in [NumberCounts]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NumberCounts2D, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_NumberCounts2D
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_NumberCounts2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def measure(self, *args):
        return _CosmoBolognaLib.NumberCounts2D_measure(self, *args)

    def compute_covariance(self, histo, JK):
        return _CosmoBolognaLib.NumberCounts2D_compute_covariance(self, histo, JK)

    def write(self, *args):
        return _CosmoBolognaLib.NumberCounts2D_write(self, *args)

    def write_covariance(self, dir, file):
        return _CosmoBolognaLib.NumberCounts2D_write_covariance(self, dir, file)
NumberCounts2D_swigregister = _CosmoBolognaLib.NumberCounts2D_swigregister
NumberCounts2D_swigregister(NumberCounts2D)

class NumberCounts1D_Redshift(NumberCounts1D):
    __swig_setmethods__ = {}
    for _s in [NumberCounts1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumberCounts1D_Redshift, name, value)
    __swig_getmethods__ = {}
    for _s in [NumberCounts1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NumberCounts1D_Redshift, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_NumberCounts1D_Redshift
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_NumberCounts1D_Redshift(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
NumberCounts1D_Redshift_swigregister = _CosmoBolognaLib.NumberCounts1D_Redshift_swigregister
NumberCounts1D_Redshift_swigregister(NumberCounts1D_Redshift)

class NumberCounts1D_Mass(NumberCounts1D):
    __swig_setmethods__ = {}
    for _s in [NumberCounts1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumberCounts1D_Mass, name, value)
    __swig_getmethods__ = {}
    for _s in [NumberCounts1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NumberCounts1D_Mass, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_NumberCounts1D_Mass
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_NumberCounts1D_Mass(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
NumberCounts1D_Mass_swigregister = _CosmoBolognaLib.NumberCounts1D_Mass_swigregister
NumberCounts1D_Mass_swigregister(NumberCounts1D_Mass)

class NumberCounts2D_RedshiftMass(NumberCounts2D):
    __swig_setmethods__ = {}
    for _s in [NumberCounts2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumberCounts2D_RedshiftMass, name, value)
    __swig_getmethods__ = {}
    for _s in [NumberCounts2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NumberCounts2D_RedshiftMass, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_NumberCounts2D_RedshiftMass
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_NumberCounts2D_RedshiftMass(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
NumberCounts2D_RedshiftMass_swigregister = _CosmoBolognaLib.NumberCounts2D_RedshiftMass_swigregister
NumberCounts2D_RedshiftMass_swigregister(NumberCounts2D_RedshiftMass)

PairType__angular_lin_ = _CosmoBolognaLib.PairType__angular_lin_
PairType__angular_log_ = _CosmoBolognaLib.PairType__angular_log_
PairType__comoving_lin_ = _CosmoBolognaLib.PairType__comoving_lin_
PairType__comoving_log_ = _CosmoBolognaLib.PairType__comoving_log_
PairType__comoving_multipoles_lin_ = _CosmoBolognaLib.PairType__comoving_multipoles_lin_
PairType__comoving_multipoles_log_ = _CosmoBolognaLib.PairType__comoving_multipoles_log_
PairType__comovingCartesian_linlin_ = _CosmoBolognaLib.PairType__comovingCartesian_linlin_
PairType__comovingCartesian_linlog_ = _CosmoBolognaLib.PairType__comovingCartesian_linlog_
PairType__comovingCartesian_loglin_ = _CosmoBolognaLib.PairType__comovingCartesian_loglin_
PairType__comovingCartesian_loglog_ = _CosmoBolognaLib.PairType__comovingCartesian_loglog_
PairType__comovingPolar_linlin_ = _CosmoBolognaLib.PairType__comovingPolar_linlin_
PairType__comovingPolar_linlog_ = _CosmoBolognaLib.PairType__comovingPolar_linlog_
PairType__comovingPolar_loglin_ = _CosmoBolognaLib.PairType__comovingPolar_loglin_
PairType__comovingPolar_loglog_ = _CosmoBolognaLib.PairType__comovingPolar_loglog_

def PairTypeNames():
    return _CosmoBolognaLib.PairTypeNames()
PairTypeNames = _CosmoBolognaLib.PairTypeNames
PairInfo__standard_ = _CosmoBolognaLib.PairInfo__standard_
PairInfo__extra_ = _CosmoBolognaLib.PairInfo__extra_

def PairInfoNames():
    return _CosmoBolognaLib.PairInfoNames()
PairInfoNames = _CosmoBolognaLib.PairInfoNames
class Pair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pair, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_Pair
    __del__ = lambda self: None
    if _newclass:
        Create = staticmethod(_CosmoBolognaLib.Pair_Create)
    else:
        Create = _CosmoBolognaLib.Pair_Create

    def pairDim(self):
        return _CosmoBolognaLib.Pair_pairDim(self)

    def pairType(self):
        return _CosmoBolognaLib.Pair_pairType(self)

    def pairInfo(self):
        return _CosmoBolognaLib.Pair_pairInfo(self)

    def angularUnits(self):
        return _CosmoBolognaLib.Pair_angularUnits(self)

    def angularWeight(self):
        return _CosmoBolognaLib.Pair_angularWeight(self)

    def scale(self, *args):
        return _CosmoBolognaLib.Pair_scale(self, *args)

    def scale_mean(self, *args):
        return _CosmoBolognaLib.Pair_scale_mean(self, *args)

    def scale_S(self, *args):
        return _CosmoBolognaLib.Pair_scale_S(self, *args)

    def scale_sigma(self, *args):
        return _CosmoBolognaLib.Pair_scale_sigma(self, *args)

    def PP1D(self, *args):
        return _CosmoBolognaLib.Pair_PP1D(self, *args)

    def PP1D_weighted(self, *args):
        return _CosmoBolognaLib.Pair_PP1D_weighted(self, *args)

    def scale_D1(self, *args):
        return _CosmoBolognaLib.Pair_scale_D1(self, *args)

    def scale_D2(self, *args):
        return _CosmoBolognaLib.Pair_scale_D2(self, *args)

    def scale_D1_mean(self, *args):
        return _CosmoBolognaLib.Pair_scale_D1_mean(self, *args)

    def scale_D2_mean(self, *args):
        return _CosmoBolognaLib.Pair_scale_D2_mean(self, *args)

    def scale_D1_S(self, *args):
        return _CosmoBolognaLib.Pair_scale_D1_S(self, *args)

    def scale_D2_S(self, *args):
        return _CosmoBolognaLib.Pair_scale_D2_S(self, *args)

    def scale_D1_sigma(self, *args):
        return _CosmoBolognaLib.Pair_scale_D1_sigma(self, *args)

    def scale_D2_sigma(self, *args):
        return _CosmoBolognaLib.Pair_scale_D2_sigma(self, *args)

    def z_mean(self, *args):
        return _CosmoBolognaLib.Pair_z_mean(self, *args)

    def z_mean2D(self):
        return _CosmoBolognaLib.Pair_z_mean2D(self)

    def z_S(self, *args):
        return _CosmoBolognaLib.Pair_z_S(self, *args)

    def z_sigma(self, *args):
        return _CosmoBolognaLib.Pair_z_sigma(self, *args)

    def z_sigma2D(self):
        return _CosmoBolognaLib.Pair_z_sigma2D(self)

    def PP2D(self, *args):
        return _CosmoBolognaLib.Pair_PP2D(self, *args)

    def PP2D_weighted(self, *args):
        return _CosmoBolognaLib.Pair_PP2D_weighted(self, *args)

    def binSize_inv(self):
        return _CosmoBolognaLib.Pair_binSize_inv(self)

    def nbins(self):
        return _CosmoBolognaLib.Pair_nbins(self)

    def shift(self):
        return _CosmoBolognaLib.Pair_shift(self)

    def binSize_inv_D1(self):
        return _CosmoBolognaLib.Pair_binSize_inv_D1(self)

    def nbins_D1(self):
        return _CosmoBolognaLib.Pair_nbins_D1(self)

    def shift_D1(self):
        return _CosmoBolognaLib.Pair_shift_D1(self)

    def binSize_inv_D2(self):
        return _CosmoBolognaLib.Pair_binSize_inv_D2(self)

    def nbins_D2(self):
        return _CosmoBolognaLib.Pair_nbins_D2(self)

    def shift_D2(self):
        return _CosmoBolognaLib.Pair_shift_D2(self)

    def sMin(self):
        return _CosmoBolognaLib.Pair_sMin(self)

    def sMax(self):
        return _CosmoBolognaLib.Pair_sMax(self)

    def sMin_D1(self):
        return _CosmoBolognaLib.Pair_sMin_D1(self)

    def sMax_D1(self):
        return _CosmoBolognaLib.Pair_sMax_D1(self)

    def sMin_D2(self):
        return _CosmoBolognaLib.Pair_sMin_D2(self)

    def sMax_D2(self):
        return _CosmoBolognaLib.Pair_sMax_D2(self)

    def set_PP1D(self, i, pp):
        return _CosmoBolognaLib.Pair_set_PP1D(self, i, pp)

    def set_PP1D_weighted(self, i, pp):
        return _CosmoBolognaLib.Pair_set_PP1D_weighted(self, i, pp)

    def set_PP2D(self, i, j, pp):
        return _CosmoBolognaLib.Pair_set_PP2D(self, i, j, pp)

    def set_PP2D_weighted(self, i, j, pp):
        return _CosmoBolognaLib.Pair_set_PP2D_weighted(self, i, j, pp)

    def add_data1D(self, *args):
        return _CosmoBolognaLib.Pair_add_data1D(self, *args)

    def add_data2D(self, *args):
        return _CosmoBolognaLib.Pair_add_data2D(self, *args)

    def get_pair(self, *args):
        return _CosmoBolognaLib.Pair_get_pair(self, *args)

    def set_pair(self, *args):
        return _CosmoBolognaLib.Pair_set_pair(self, *args)

    def put(self, obj1, obj2):
        return _CosmoBolognaLib.Pair_put(self, obj1, obj2)

    def Sum(self, pp, ww=1):
        return _CosmoBolognaLib.Pair_Sum(self, pp, ww)
Pair_swigregister = _CosmoBolognaLib.Pair_swigregister
Pair_swigregister(Pair)

def Pair_Create(*args):
    return _CosmoBolognaLib.Pair_Create(*args)
Pair_Create = _CosmoBolognaLib.Pair_Create

class Pair1D(Pair):
    __swig_setmethods__ = {}
    for _s in [Pair]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pair1D, name, value)
    __swig_getmethods__ = {}
    for _s in [Pair]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pair1D, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_Pair1D
    __del__ = lambda self: None

    def scale(self, *args):
        return _CosmoBolognaLib.Pair1D_scale(self, *args)

    def PP1D(self, *args):
        return _CosmoBolognaLib.Pair1D_PP1D(self, *args)

    def PP1D_weighted(self, *args):
        return _CosmoBolognaLib.Pair1D_PP1D_weighted(self, *args)

    def binSize_inv(self):
        return _CosmoBolognaLib.Pair1D_binSize_inv(self)

    def nbins(self):
        return _CosmoBolognaLib.Pair1D_nbins(self)

    def shift(self):
        return _CosmoBolognaLib.Pair1D_shift(self)

    def set_scale(self, i, ss):
        return _CosmoBolognaLib.Pair1D_set_scale(self, i, ss)

    def set_PP1D(self, i, pp):
        return _CosmoBolognaLib.Pair1D_set_PP1D(self, i, pp)

    def set_PP1D_weighted(self, i, pp):
        return _CosmoBolognaLib.Pair1D_set_PP1D_weighted(self, i, pp)

    def add_data1D(self, *args):
        return _CosmoBolognaLib.Pair1D_add_data1D(self, *args)

    def Sum(self, pair, ww=1):
        return _CosmoBolognaLib.Pair1D_Sum(self, pair, ww)
Pair1D_swigregister = _CosmoBolognaLib.Pair1D_swigregister
Pair1D_swigregister(Pair1D)

class Pair1D_angular(Pair1D):
    __swig_setmethods__ = {}
    for _s in [Pair1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pair1D_angular, name, value)
    __swig_getmethods__ = {}
    for _s in [Pair1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pair1D_angular, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_Pair1D_angular
    __del__ = lambda self: None

    def sMin(self):
        return _CosmoBolognaLib.Pair1D_angular_sMin(self)

    def sMax(self):
        return _CosmoBolognaLib.Pair1D_angular_sMax(self)
Pair1D_angular_swigregister = _CosmoBolognaLib.Pair1D_angular_swigregister
Pair1D_angular_swigregister(Pair1D_angular)

class Pair1D_angular_lin(Pair1D_angular):
    __swig_setmethods__ = {}
    for _s in [Pair1D_angular]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pair1D_angular_lin, name, value)
    __swig_getmethods__ = {}
    for _s in [Pair1D_angular]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pair1D_angular_lin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Pair1D_angular_lin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Pair1D_angular_lin
    __del__ = lambda self: None

    def get_pair(self, obj1, obj2, kk, wkk):
        return _CosmoBolognaLib.Pair1D_angular_lin_get_pair(self, obj1, obj2, kk, wkk)

    def set_pair(self, kk, wkk, weight=1):
        return _CosmoBolognaLib.Pair1D_angular_lin_set_pair(self, kk, wkk, weight)

    def put(self, obj1, obj2):
        return _CosmoBolognaLib.Pair1D_angular_lin_put(self, obj1, obj2)
Pair1D_angular_lin_swigregister = _CosmoBolognaLib.Pair1D_angular_lin_swigregister
Pair1D_angular_lin_swigregister(Pair1D_angular_lin)

class Pair1D_angular_log(Pair1D_angular):
    __swig_setmethods__ = {}
    for _s in [Pair1D_angular]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pair1D_angular_log, name, value)
    __swig_getmethods__ = {}
    for _s in [Pair1D_angular]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pair1D_angular_log, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Pair1D_angular_log(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Pair1D_angular_log
    __del__ = lambda self: None

    def get_pair(self, obj1, obj2, kk, wkk):
        return _CosmoBolognaLib.Pair1D_angular_log_get_pair(self, obj1, obj2, kk, wkk)

    def set_pair(self, kk, wkk, weight=1):
        return _CosmoBolognaLib.Pair1D_angular_log_set_pair(self, kk, wkk, weight)

    def put(self, obj1, obj2):
        return _CosmoBolognaLib.Pair1D_angular_log_put(self, obj1, obj2)
Pair1D_angular_log_swigregister = _CosmoBolognaLib.Pair1D_angular_log_swigregister
Pair1D_angular_log_swigregister(Pair1D_angular_log)

class Pair1D_comoving(Pair1D):
    __swig_setmethods__ = {}
    for _s in [Pair1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pair1D_comoving, name, value)
    __swig_getmethods__ = {}
    for _s in [Pair1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pair1D_comoving, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_Pair1D_comoving
    __del__ = lambda self: None

    def sMin(self):
        return _CosmoBolognaLib.Pair1D_comoving_sMin(self)

    def sMax(self):
        return _CosmoBolognaLib.Pair1D_comoving_sMax(self)
Pair1D_comoving_swigregister = _CosmoBolognaLib.Pair1D_comoving_swigregister
Pair1D_comoving_swigregister(Pair1D_comoving)

class Pair1D_comoving_lin(Pair1D_comoving):
    __swig_setmethods__ = {}
    for _s in [Pair1D_comoving]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pair1D_comoving_lin, name, value)
    __swig_getmethods__ = {}
    for _s in [Pair1D_comoving]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pair1D_comoving_lin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Pair1D_comoving_lin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Pair1D_comoving_lin
    __del__ = lambda self: None

    def get_pair(self, obj1, obj2, kk, wkk):
        return _CosmoBolognaLib.Pair1D_comoving_lin_get_pair(self, obj1, obj2, kk, wkk)

    def set_pair(self, kk, wkk, weight=1):
        return _CosmoBolognaLib.Pair1D_comoving_lin_set_pair(self, kk, wkk, weight)

    def put(self, obj1, obj2):
        return _CosmoBolognaLib.Pair1D_comoving_lin_put(self, obj1, obj2)
Pair1D_comoving_lin_swigregister = _CosmoBolognaLib.Pair1D_comoving_lin_swigregister
Pair1D_comoving_lin_swigregister(Pair1D_comoving_lin)

class Pair1D_comoving_log(Pair1D_comoving):
    __swig_setmethods__ = {}
    for _s in [Pair1D_comoving]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pair1D_comoving_log, name, value)
    __swig_getmethods__ = {}
    for _s in [Pair1D_comoving]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pair1D_comoving_log, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Pair1D_comoving_log(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Pair1D_comoving_log
    __del__ = lambda self: None

    def get_pair(self, obj1, obj2, kk, wkk):
        return _CosmoBolognaLib.Pair1D_comoving_log_get_pair(self, obj1, obj2, kk, wkk)

    def set_pair(self, kk, wkk, weight=1):
        return _CosmoBolognaLib.Pair1D_comoving_log_set_pair(self, kk, wkk, weight)

    def put(self, obj1, obj2):
        return _CosmoBolognaLib.Pair1D_comoving_log_put(self, obj1, obj2)
Pair1D_comoving_log_swigregister = _CosmoBolognaLib.Pair1D_comoving_log_swigregister
Pair1D_comoving_log_swigregister(Pair1D_comoving_log)

class Pair1D_comoving_multipoles(Pair1D):
    __swig_setmethods__ = {}
    for _s in [Pair1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pair1D_comoving_multipoles, name, value)
    __swig_getmethods__ = {}
    for _s in [Pair1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pair1D_comoving_multipoles, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_Pair1D_comoving_multipoles
    __del__ = lambda self: None

    def sMin(self):
        return _CosmoBolognaLib.Pair1D_comoving_multipoles_sMin(self)

    def sMax(self):
        return _CosmoBolognaLib.Pair1D_comoving_multipoles_sMax(self)
Pair1D_comoving_multipoles_swigregister = _CosmoBolognaLib.Pair1D_comoving_multipoles_swigregister
Pair1D_comoving_multipoles_swigregister(Pair1D_comoving_multipoles)

class Pair1D_comoving_multipoles_lin(Pair1D_comoving_multipoles):
    __swig_setmethods__ = {}
    for _s in [Pair1D_comoving_multipoles]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pair1D_comoving_multipoles_lin, name, value)
    __swig_getmethods__ = {}
    for _s in [Pair1D_comoving_multipoles]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pair1D_comoving_multipoles_lin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Pair1D_comoving_multipoles_lin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Pair1D_comoving_multipoles_lin
    __del__ = lambda self: None

    def get_pair(self, obj1, obj2, kk, cosmu, wkk):
        return _CosmoBolognaLib.Pair1D_comoving_multipoles_lin_get_pair(self, obj1, obj2, kk, cosmu, wkk)

    def set_pair(self, cosmu, kk, wkk, weight=1):
        return _CosmoBolognaLib.Pair1D_comoving_multipoles_lin_set_pair(self, cosmu, kk, wkk, weight)

    def put(self, obj1, obj2):
        return _CosmoBolognaLib.Pair1D_comoving_multipoles_lin_put(self, obj1, obj2)

    def Sum(self, pair, ww=1):
        return _CosmoBolognaLib.Pair1D_comoving_multipoles_lin_Sum(self, pair, ww)
Pair1D_comoving_multipoles_lin_swigregister = _CosmoBolognaLib.Pair1D_comoving_multipoles_lin_swigregister
Pair1D_comoving_multipoles_lin_swigregister(Pair1D_comoving_multipoles_lin)

class Pair1D_comoving_multipoles_log(Pair1D_comoving_multipoles):
    __swig_setmethods__ = {}
    for _s in [Pair1D_comoving_multipoles]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pair1D_comoving_multipoles_log, name, value)
    __swig_getmethods__ = {}
    for _s in [Pair1D_comoving_multipoles]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pair1D_comoving_multipoles_log, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Pair1D_comoving_multipoles_log(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Pair1D_comoving_multipoles_log
    __del__ = lambda self: None

    def get_pair(self, obj1, obj2, kk, cosmu, wkk):
        return _CosmoBolognaLib.Pair1D_comoving_multipoles_log_get_pair(self, obj1, obj2, kk, cosmu, wkk)

    def set_pair(self, cosmu, kk, wkk, weight=1):
        return _CosmoBolognaLib.Pair1D_comoving_multipoles_log_set_pair(self, cosmu, kk, wkk, weight)

    def put(self, obj1, obj2):
        return _CosmoBolognaLib.Pair1D_comoving_multipoles_log_put(self, obj1, obj2)

    def Sum(self, pair, ww=1):
        return _CosmoBolognaLib.Pair1D_comoving_multipoles_log_Sum(self, pair, ww)
Pair1D_comoving_multipoles_log_swigregister = _CosmoBolognaLib.Pair1D_comoving_multipoles_log_swigregister
Pair1D_comoving_multipoles_log_swigregister(Pair1D_comoving_multipoles_log)

class Pair2D(Pair):
    __swig_setmethods__ = {}
    for _s in [Pair]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pair2D, name, value)
    __swig_getmethods__ = {}
    for _s in [Pair]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pair2D, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_Pair2D
    __del__ = lambda self: None

    def scale_D1(self, *args):
        return _CosmoBolognaLib.Pair2D_scale_D1(self, *args)

    def scale_D2(self, *args):
        return _CosmoBolognaLib.Pair2D_scale_D2(self, *args)

    def PP2D(self, *args):
        return _CosmoBolognaLib.Pair2D_PP2D(self, *args)

    def PP2D_weighted(self, *args):
        return _CosmoBolognaLib.Pair2D_PP2D_weighted(self, *args)

    def binSize_inv_D1(self):
        return _CosmoBolognaLib.Pair2D_binSize_inv_D1(self)

    def nbins_D1(self):
        return _CosmoBolognaLib.Pair2D_nbins_D1(self)

    def shift_D1(self):
        return _CosmoBolognaLib.Pair2D_shift_D1(self)

    def binSize_inv_D2(self):
        return _CosmoBolognaLib.Pair2D_binSize_inv_D2(self)

    def nbins_D2(self):
        return _CosmoBolognaLib.Pair2D_nbins_D2(self)

    def shift_D2(self):
        return _CosmoBolognaLib.Pair2D_shift_D2(self)

    def set_scale_D1(self, i, pp):
        return _CosmoBolognaLib.Pair2D_set_scale_D1(self, i, pp)

    def set_scale_D2(self, i, pp):
        return _CosmoBolognaLib.Pair2D_set_scale_D2(self, i, pp)

    def set_PP2D(self, i, j, pp):
        return _CosmoBolognaLib.Pair2D_set_PP2D(self, i, j, pp)

    def set_PP2D_weighted(self, i, j, pp):
        return _CosmoBolognaLib.Pair2D_set_PP2D_weighted(self, i, j, pp)

    def add_data2D(self, *args):
        return _CosmoBolognaLib.Pair2D_add_data2D(self, *args)

    def Sum(self, pp, ww=1):
        return _CosmoBolognaLib.Pair2D_Sum(self, pp, ww)
Pair2D_swigregister = _CosmoBolognaLib.Pair2D_swigregister
Pair2D_swigregister(Pair2D)

class Pair2D_comovingCartesian(Pair2D):
    __swig_setmethods__ = {}
    for _s in [Pair2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pair2D_comovingCartesian, name, value)
    __swig_getmethods__ = {}
    for _s in [Pair2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pair2D_comovingCartesian, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_Pair2D_comovingCartesian
    __del__ = lambda self: None

    def sMin_D1(self):
        return _CosmoBolognaLib.Pair2D_comovingCartesian_sMin_D1(self)

    def sMax_D1(self):
        return _CosmoBolognaLib.Pair2D_comovingCartesian_sMax_D1(self)

    def sMin_D2(self):
        return _CosmoBolognaLib.Pair2D_comovingCartesian_sMin_D2(self)

    def sMax_D2(self):
        return _CosmoBolognaLib.Pair2D_comovingCartesian_sMax_D2(self)
Pair2D_comovingCartesian_swigregister = _CosmoBolognaLib.Pair2D_comovingCartesian_swigregister
Pair2D_comovingCartesian_swigregister(Pair2D_comovingCartesian)

class Pair2D_comovingCartesian_linlin(Pair2D_comovingCartesian):
    __swig_setmethods__ = {}
    for _s in [Pair2D_comovingCartesian]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pair2D_comovingCartesian_linlin, name, value)
    __swig_getmethods__ = {}
    for _s in [Pair2D_comovingCartesian]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pair2D_comovingCartesian_linlin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Pair2D_comovingCartesian_linlin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Pair2D_comovingCartesian_linlin
    __del__ = lambda self: None

    def get_pair(self, obj1, obj2, ir, jr, ww):
        return _CosmoBolognaLib.Pair2D_comovingCartesian_linlin_get_pair(self, obj1, obj2, ir, jr, ww)

    def set_pair(self, ir, jr, ww, weight=1):
        return _CosmoBolognaLib.Pair2D_comovingCartesian_linlin_set_pair(self, ir, jr, ww, weight)

    def put(self, obj1, obj2):
        return _CosmoBolognaLib.Pair2D_comovingCartesian_linlin_put(self, obj1, obj2)
Pair2D_comovingCartesian_linlin_swigregister = _CosmoBolognaLib.Pair2D_comovingCartesian_linlin_swigregister
Pair2D_comovingCartesian_linlin_swigregister(Pair2D_comovingCartesian_linlin)

class Pair2D_comovingCartesian_loglin(Pair2D_comovingCartesian):
    __swig_setmethods__ = {}
    for _s in [Pair2D_comovingCartesian]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pair2D_comovingCartesian_loglin, name, value)
    __swig_getmethods__ = {}
    for _s in [Pair2D_comovingCartesian]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pair2D_comovingCartesian_loglin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Pair2D_comovingCartesian_loglin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Pair2D_comovingCartesian_loglin
    __del__ = lambda self: None

    def get_pair(self, obj1, obj2, ir, jr, ww):
        return _CosmoBolognaLib.Pair2D_comovingCartesian_loglin_get_pair(self, obj1, obj2, ir, jr, ww)

    def set_pair(self, ir, jr, ww, weight=1):
        return _CosmoBolognaLib.Pair2D_comovingCartesian_loglin_set_pair(self, ir, jr, ww, weight)

    def put(self, obj1, obj2):
        return _CosmoBolognaLib.Pair2D_comovingCartesian_loglin_put(self, obj1, obj2)
Pair2D_comovingCartesian_loglin_swigregister = _CosmoBolognaLib.Pair2D_comovingCartesian_loglin_swigregister
Pair2D_comovingCartesian_loglin_swigregister(Pair2D_comovingCartesian_loglin)

class Pair2D_comovingCartesian_linlog(Pair2D_comovingCartesian):
    __swig_setmethods__ = {}
    for _s in [Pair2D_comovingCartesian]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pair2D_comovingCartesian_linlog, name, value)
    __swig_getmethods__ = {}
    for _s in [Pair2D_comovingCartesian]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pair2D_comovingCartesian_linlog, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Pair2D_comovingCartesian_linlog(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Pair2D_comovingCartesian_linlog
    __del__ = lambda self: None

    def get_pair(self, obj1, obj2, ir, jr, ww):
        return _CosmoBolognaLib.Pair2D_comovingCartesian_linlog_get_pair(self, obj1, obj2, ir, jr, ww)

    def set_pair(self, ir, jr, ww, weight=1):
        return _CosmoBolognaLib.Pair2D_comovingCartesian_linlog_set_pair(self, ir, jr, ww, weight)

    def put(self, obj1, obj2):
        return _CosmoBolognaLib.Pair2D_comovingCartesian_linlog_put(self, obj1, obj2)
Pair2D_comovingCartesian_linlog_swigregister = _CosmoBolognaLib.Pair2D_comovingCartesian_linlog_swigregister
Pair2D_comovingCartesian_linlog_swigregister(Pair2D_comovingCartesian_linlog)

class Pair2D_comovingCartesian_loglog(Pair2D_comovingCartesian):
    __swig_setmethods__ = {}
    for _s in [Pair2D_comovingCartesian]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pair2D_comovingCartesian_loglog, name, value)
    __swig_getmethods__ = {}
    for _s in [Pair2D_comovingCartesian]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pair2D_comovingCartesian_loglog, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Pair2D_comovingCartesian_loglog(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Pair2D_comovingCartesian_loglog
    __del__ = lambda self: None

    def get_pair(self, obj1, obj2, ir, jr, ww):
        return _CosmoBolognaLib.Pair2D_comovingCartesian_loglog_get_pair(self, obj1, obj2, ir, jr, ww)

    def set_pair(self, ir, jr, ww, weight=1):
        return _CosmoBolognaLib.Pair2D_comovingCartesian_loglog_set_pair(self, ir, jr, ww, weight)

    def put(self, obj1, obj2):
        return _CosmoBolognaLib.Pair2D_comovingCartesian_loglog_put(self, obj1, obj2)
Pair2D_comovingCartesian_loglog_swigregister = _CosmoBolognaLib.Pair2D_comovingCartesian_loglog_swigregister
Pair2D_comovingCartesian_loglog_swigregister(Pair2D_comovingCartesian_loglog)

class Pair2D_comovingPolar(Pair2D):
    __swig_setmethods__ = {}
    for _s in [Pair2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pair2D_comovingPolar, name, value)
    __swig_getmethods__ = {}
    for _s in [Pair2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pair2D_comovingPolar, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_Pair2D_comovingPolar
    __del__ = lambda self: None

    def sMin_D1(self):
        return _CosmoBolognaLib.Pair2D_comovingPolar_sMin_D1(self)

    def sMax_D1(self):
        return _CosmoBolognaLib.Pair2D_comovingPolar_sMax_D1(self)

    def sMin_D2(self):
        return _CosmoBolognaLib.Pair2D_comovingPolar_sMin_D2(self)

    def sMax_D2(self):
        return _CosmoBolognaLib.Pair2D_comovingPolar_sMax_D2(self)
Pair2D_comovingPolar_swigregister = _CosmoBolognaLib.Pair2D_comovingPolar_swigregister
Pair2D_comovingPolar_swigregister(Pair2D_comovingPolar)

class Pair2D_comovingPolar_linlin(Pair2D_comovingPolar):
    __swig_setmethods__ = {}
    for _s in [Pair2D_comovingPolar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pair2D_comovingPolar_linlin, name, value)
    __swig_getmethods__ = {}
    for _s in [Pair2D_comovingPolar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pair2D_comovingPolar_linlin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Pair2D_comovingPolar_linlin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Pair2D_comovingPolar_linlin
    __del__ = lambda self: None

    def get_pair(self, obj1, obj2, ir, jr, ww):
        return _CosmoBolognaLib.Pair2D_comovingPolar_linlin_get_pair(self, obj1, obj2, ir, jr, ww)

    def set_pair(self, ir, jr, ww, weight=1):
        return _CosmoBolognaLib.Pair2D_comovingPolar_linlin_set_pair(self, ir, jr, ww, weight)

    def put(self, obj1, obj2):
        return _CosmoBolognaLib.Pair2D_comovingPolar_linlin_put(self, obj1, obj2)
Pair2D_comovingPolar_linlin_swigregister = _CosmoBolognaLib.Pair2D_comovingPolar_linlin_swigregister
Pair2D_comovingPolar_linlin_swigregister(Pair2D_comovingPolar_linlin)

class Pair2D_comovingPolar_loglin(Pair2D_comovingPolar):
    __swig_setmethods__ = {}
    for _s in [Pair2D_comovingPolar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pair2D_comovingPolar_loglin, name, value)
    __swig_getmethods__ = {}
    for _s in [Pair2D_comovingPolar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pair2D_comovingPolar_loglin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Pair2D_comovingPolar_loglin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Pair2D_comovingPolar_loglin
    __del__ = lambda self: None

    def get_pair(self, obj1, obj2, ir, jr, ww):
        return _CosmoBolognaLib.Pair2D_comovingPolar_loglin_get_pair(self, obj1, obj2, ir, jr, ww)

    def set_pair(self, ir, jr, ww, weight=1):
        return _CosmoBolognaLib.Pair2D_comovingPolar_loglin_set_pair(self, ir, jr, ww, weight)

    def put(self, obj1, obj2):
        return _CosmoBolognaLib.Pair2D_comovingPolar_loglin_put(self, obj1, obj2)
Pair2D_comovingPolar_loglin_swigregister = _CosmoBolognaLib.Pair2D_comovingPolar_loglin_swigregister
Pair2D_comovingPolar_loglin_swigregister(Pair2D_comovingPolar_loglin)

class Pair2D_comovingPolar_linlog(Pair2D_comovingPolar):
    __swig_setmethods__ = {}
    for _s in [Pair2D_comovingPolar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pair2D_comovingPolar_linlog, name, value)
    __swig_getmethods__ = {}
    for _s in [Pair2D_comovingPolar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pair2D_comovingPolar_linlog, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Pair2D_comovingPolar_linlog(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Pair2D_comovingPolar_linlog
    __del__ = lambda self: None

    def get_pair(self, obj1, obj2, ir, jr, ww):
        return _CosmoBolognaLib.Pair2D_comovingPolar_linlog_get_pair(self, obj1, obj2, ir, jr, ww)

    def set_pair(self, ir, jr, ww, weight=1):
        return _CosmoBolognaLib.Pair2D_comovingPolar_linlog_set_pair(self, ir, jr, ww, weight)

    def put(self, obj1, obj2):
        return _CosmoBolognaLib.Pair2D_comovingPolar_linlog_put(self, obj1, obj2)
Pair2D_comovingPolar_linlog_swigregister = _CosmoBolognaLib.Pair2D_comovingPolar_linlog_swigregister
Pair2D_comovingPolar_linlog_swigregister(Pair2D_comovingPolar_linlog)

class Pair2D_comovingPolar_loglog(Pair2D_comovingPolar):
    __swig_setmethods__ = {}
    for _s in [Pair2D_comovingPolar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pair2D_comovingPolar_loglog, name, value)
    __swig_getmethods__ = {}
    for _s in [Pair2D_comovingPolar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pair2D_comovingPolar_loglog, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Pair2D_comovingPolar_loglog(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Pair2D_comovingPolar_loglog
    __del__ = lambda self: None

    def get_pair(self, obj1, obj2, ir, jr, ww):
        return _CosmoBolognaLib.Pair2D_comovingPolar_loglog_get_pair(self, obj1, obj2, ir, jr, ww)

    def set_pair(self, ir, jr, ww, weight=1):
        return _CosmoBolognaLib.Pair2D_comovingPolar_loglog_set_pair(self, ir, jr, ww, weight)

    def put(self, obj1, obj2):
        return _CosmoBolognaLib.Pair2D_comovingPolar_loglog_put(self, obj1, obj2)
Pair2D_comovingPolar_loglog_swigregister = _CosmoBolognaLib.Pair2D_comovingPolar_loglog_swigregister
Pair2D_comovingPolar_loglog_swigregister(Pair2D_comovingPolar_loglog)

TwoPType__monopole_ = _CosmoBolognaLib.TwoPType__monopole_
TwoPType__projected_ = _CosmoBolognaLib.TwoPType__projected_
TwoPType__deprojected_ = _CosmoBolognaLib.TwoPType__deprojected_
TwoPType__multipoles_integrated_ = _CosmoBolognaLib.TwoPType__multipoles_integrated_
TwoPType__multipoles_direct_ = _CosmoBolognaLib.TwoPType__multipoles_direct_
TwoPType__wedges_ = _CosmoBolognaLib.TwoPType__wedges_
TwoPType__filtered_ = _CosmoBolognaLib.TwoPType__filtered_
TwoPType__angular_ = _CosmoBolognaLib.TwoPType__angular_
TwoPType__2D_Cartesian_ = _CosmoBolognaLib.TwoPType__2D_Cartesian_
TwoPType__2D_polar_ = _CosmoBolognaLib.TwoPType__2D_polar_

def TwoPTypeNames():
    return _CosmoBolognaLib.TwoPTypeNames()
TwoPTypeNames = _CosmoBolognaLib.TwoPTypeNames

def TwoPTypeCast(*args):
    return _CosmoBolognaLib.TwoPTypeCast(*args)
TwoPTypeCast = _CosmoBolognaLib.TwoPTypeCast
Estimator__natural_ = _CosmoBolognaLib.Estimator__natural_
Estimator__LandySzalay_ = _CosmoBolognaLib.Estimator__LandySzalay_
Estimator__SzapudiSzalay_ = _CosmoBolognaLib.Estimator__SzapudiSzalay_

def EstimatorNames():
    return _CosmoBolognaLib.EstimatorNames()
EstimatorNames = _CosmoBolognaLib.EstimatorNames

def EstimatorCast(*args):
    return _CosmoBolognaLib.EstimatorCast(*args)
EstimatorCast = _CosmoBolognaLib.EstimatorCast
class TwoPointCorrelation(Measure):
    __swig_setmethods__ = {}
    for _s in [Measure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TwoPointCorrelation, name, value)
    __swig_getmethods__ = {}
    for _s in [Measure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TwoPointCorrelation, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_TwoPointCorrelation
    __del__ = lambda self: None
    if _newclass:
        Create = staticmethod(_CosmoBolognaLib.TwoPointCorrelation_Create)
    else:
        Create = _CosmoBolognaLib.TwoPointCorrelation_Create

    def twoPType(self):
        return _CosmoBolognaLib.TwoPointCorrelation_twoPType(self)

    def data(self):
        return _CosmoBolognaLib.TwoPointCorrelation_data(self)

    def random(self):
        return _CosmoBolognaLib.TwoPointCorrelation_random(self)

    def dd(self):
        return _CosmoBolognaLib.TwoPointCorrelation_dd(self)

    def rr(self):
        return _CosmoBolognaLib.TwoPointCorrelation_rr(self)

    def dr(self):
        return _CosmoBolognaLib.TwoPointCorrelation_dr(self)

    def compute_extra_info(self):
        return _CosmoBolognaLib.TwoPointCorrelation_compute_extra_info(self)

    def random_dilution_fraction(self):
        return _CosmoBolognaLib.TwoPointCorrelation_random_dilution_fraction(self)

    def xx(self):
        return _CosmoBolognaLib.TwoPointCorrelation_xx(self)

    def yy(self):
        return _CosmoBolognaLib.TwoPointCorrelation_yy(self)

    def xi1D(self):
        return _CosmoBolognaLib.TwoPointCorrelation_xi1D(self)

    def error1D(self):
        return _CosmoBolognaLib.TwoPointCorrelation_error1D(self)

    def xi2D(self):
        return _CosmoBolognaLib.TwoPointCorrelation_xi2D(self)

    def error2D(self):
        return _CosmoBolognaLib.TwoPointCorrelation_error2D(self)

    def xiMonopole(self):
        return _CosmoBolognaLib.TwoPointCorrelation_xiMonopole(self)

    def errorMonopole(self):
        return _CosmoBolognaLib.TwoPointCorrelation_errorMonopole(self)

    def xiQuadrupole(self):
        return _CosmoBolognaLib.TwoPointCorrelation_xiQuadrupole(self)

    def errorQuadrupole(self):
        return _CosmoBolognaLib.TwoPointCorrelation_errorQuadrupole(self)

    def xiHexadecapole(self):
        return _CosmoBolognaLib.TwoPointCorrelation_xiHexadecapole(self)

    def errorHexadecapole(self):
        return _CosmoBolognaLib.TwoPointCorrelation_errorHexadecapole(self)

    def xiPerpendicular(self):
        return _CosmoBolognaLib.TwoPointCorrelation_xiPerpendicular(self)

    def errorPerpendicular(self):
        return _CosmoBolognaLib.TwoPointCorrelation_errorPerpendicular(self)

    def xiParallel(self):
        return _CosmoBolognaLib.TwoPointCorrelation_xiParallel(self)

    def errorParallel(self):
        return _CosmoBolognaLib.TwoPointCorrelation_errorParallel(self)

    def set_data(self, data):
        return _CosmoBolognaLib.TwoPointCorrelation_set_data(self, data)

    def set_random(self, random):
        return _CosmoBolognaLib.TwoPointCorrelation_set_random(self, random)

    def measure(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation_measure(self, *args)

    def read(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation_read(self, dir, file)

    def write(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation_write(self, *args)

    def read_covariance(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation_read_covariance(self, dir, file)

    def write_covariance(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation_write_covariance(self, dir, file)

    def compute_covariance(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation_compute_covariance(self, *args)

    def PoissonError(self, estimator, dd, rr, dr, nData, nRandom):
        return _CosmoBolognaLib.TwoPointCorrelation_PoissonError(self, estimator, dd, rr, dr, nData, nRandom)
TwoPointCorrelation_swigregister = _CosmoBolognaLib.TwoPointCorrelation_swigregister
TwoPointCorrelation_swigregister(TwoPointCorrelation)

def TwoPointCorrelation_Create(*args):
    return _CosmoBolognaLib.TwoPointCorrelation_Create(*args)
TwoPointCorrelation_Create = _CosmoBolognaLib.TwoPointCorrelation_Create

class TwoPointCorrelation1D(TwoPointCorrelation):
    __swig_setmethods__ = {}
    for _s in [TwoPointCorrelation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TwoPointCorrelation1D, name, value)
    __swig_getmethods__ = {}
    for _s in [TwoPointCorrelation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TwoPointCorrelation1D, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_TwoPointCorrelation1D
    __del__ = lambda self: None

    def xx(self):
        return _CosmoBolognaLib.TwoPointCorrelation1D_xx(self)

    def xi1D(self):
        return _CosmoBolognaLib.TwoPointCorrelation1D_xi1D(self)

    def error1D(self):
        return _CosmoBolognaLib.TwoPointCorrelation1D_error1D(self)

    def measure(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation1D_measure(self, *args)

    def read(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation1D_read(self, dir, file)

    def write(self, dir, file, rank=0):
        return _CosmoBolognaLib.TwoPointCorrelation1D_write(self, dir, file, rank)

    def read_covariance(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation1D_read_covariance(self, dir, file)

    def write_covariance(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation1D_write_covariance(self, dir, file)

    def compute_covariance(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation1D_compute_covariance(self, *args)
TwoPointCorrelation1D_swigregister = _CosmoBolognaLib.TwoPointCorrelation1D_swigregister
TwoPointCorrelation1D_swigregister(TwoPointCorrelation1D)

class TwoPointCorrelation1D_angular(TwoPointCorrelation1D):
    __swig_setmethods__ = {}
    for _s in [TwoPointCorrelation1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TwoPointCorrelation1D_angular, name, value)
    __swig_getmethods__ = {}
    for _s in [TwoPointCorrelation1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TwoPointCorrelation1D_angular, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_TwoPointCorrelation1D_angular(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_TwoPointCorrelation1D_angular
    __del__ = lambda self: None

    def set_parameters(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation1D_angular_set_parameters(self, *args)

    def measure(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation1D_angular_measure(self, *args)

    def read(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation1D_angular_read(self, dir, file)

    def write(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation1D_angular_write(self, *args)
TwoPointCorrelation1D_angular_swigregister = _CosmoBolognaLib.TwoPointCorrelation1D_angular_swigregister
TwoPointCorrelation1D_angular_swigregister(TwoPointCorrelation1D_angular)

class TwoPointCorrelation1D_monopole(TwoPointCorrelation1D):
    __swig_setmethods__ = {}
    for _s in [TwoPointCorrelation1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TwoPointCorrelation1D_monopole, name, value)
    __swig_getmethods__ = {}
    for _s in [TwoPointCorrelation1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TwoPointCorrelation1D_monopole, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_TwoPointCorrelation1D_monopole(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_TwoPointCorrelation1D_monopole
    __del__ = lambda self: None

    def set_parameters(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation1D_monopole_set_parameters(self, *args)

    def measure(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation1D_monopole_measure(self, *args)

    def read(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation1D_monopole_read(self, dir, file)

    def write(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation1D_monopole_write(self, *args)
TwoPointCorrelation1D_monopole_swigregister = _CosmoBolognaLib.TwoPointCorrelation1D_monopole_swigregister
TwoPointCorrelation1D_monopole_swigregister(TwoPointCorrelation1D_monopole)

class TwoPointCorrelation2D(TwoPointCorrelation):
    __swig_setmethods__ = {}
    for _s in [TwoPointCorrelation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TwoPointCorrelation2D, name, value)
    __swig_getmethods__ = {}
    for _s in [TwoPointCorrelation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TwoPointCorrelation2D, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_TwoPointCorrelation2D
    __del__ = lambda self: None

    def xx(self):
        return _CosmoBolognaLib.TwoPointCorrelation2D_xx(self)

    def yy(self):
        return _CosmoBolognaLib.TwoPointCorrelation2D_yy(self)

    def xi2D(self):
        return _CosmoBolognaLib.TwoPointCorrelation2D_xi2D(self)

    def error2D(self):
        return _CosmoBolognaLib.TwoPointCorrelation2D_error2D(self)

    def measure(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation2D_measure(self, *args)

    def read(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation2D_read(self, dir, file)

    def write(self, dir, file, rank=0):
        return _CosmoBolognaLib.TwoPointCorrelation2D_write(self, dir, file, rank)

    def read_covariance(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation2D_read_covariance(self, dir, file)

    def write_covariance(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation2D_write_covariance(self, dir, file)

    def compute_covariance(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation2D_compute_covariance(self, *args)
TwoPointCorrelation2D_swigregister = _CosmoBolognaLib.TwoPointCorrelation2D_swigregister
TwoPointCorrelation2D_swigregister(TwoPointCorrelation2D)

class TwoPointCorrelation2D_cartesian(TwoPointCorrelation2D):
    __swig_setmethods__ = {}
    for _s in [TwoPointCorrelation2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TwoPointCorrelation2D_cartesian, name, value)
    __swig_getmethods__ = {}
    for _s in [TwoPointCorrelation2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TwoPointCorrelation2D_cartesian, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_TwoPointCorrelation2D_cartesian(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_TwoPointCorrelation2D_cartesian
    __del__ = lambda self: None

    def set_parameters(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation2D_cartesian_set_parameters(self, *args)

    def measure(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation2D_cartesian_measure(self, *args)

    def read(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation2D_cartesian_read(self, dir, file)

    def write(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation2D_cartesian_write(self, *args)

    def read_covariance(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation2D_cartesian_read_covariance(self, dir, file)

    def write_covariance(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation2D_cartesian_write_covariance(self, dir, file)

    def compute_covariance(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation2D_cartesian_compute_covariance(self, *args)
TwoPointCorrelation2D_cartesian_swigregister = _CosmoBolognaLib.TwoPointCorrelation2D_cartesian_swigregister
TwoPointCorrelation2D_cartesian_swigregister(TwoPointCorrelation2D_cartesian)

class TwoPointCorrelation2D_polar(TwoPointCorrelation2D):
    __swig_setmethods__ = {}
    for _s in [TwoPointCorrelation2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TwoPointCorrelation2D_polar, name, value)
    __swig_getmethods__ = {}
    for _s in [TwoPointCorrelation2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TwoPointCorrelation2D_polar, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_TwoPointCorrelation2D_polar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_TwoPointCorrelation2D_polar
    __del__ = lambda self: None

    def set_parameters(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation2D_polar_set_parameters(self, *args)

    def measure(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation2D_polar_measure(self, *args)

    def read(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation2D_polar_read(self, dir, file)

    def write(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation2D_polar_write(self, *args)

    def read_covariance(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation2D_polar_read_covariance(self, dir, file)

    def write_covariance(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation2D_polar_write_covariance(self, dir, file)

    def compute_covariance(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation2D_polar_compute_covariance(self, *args)
TwoPointCorrelation2D_polar_swigregister = _CosmoBolognaLib.TwoPointCorrelation2D_polar_swigregister
TwoPointCorrelation2D_polar_swigregister(TwoPointCorrelation2D_polar)

class TwoPointCorrelation_projected(TwoPointCorrelation2D_cartesian):
    __swig_setmethods__ = {}
    for _s in [TwoPointCorrelation2D_cartesian]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TwoPointCorrelation_projected, name, value)
    __swig_getmethods__ = {}
    for _s in [TwoPointCorrelation2D_cartesian]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TwoPointCorrelation_projected, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_TwoPointCorrelation_projected(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_TwoPointCorrelation_projected
    __del__ = lambda self: None

    def yy(self):
        return _CosmoBolognaLib.TwoPointCorrelation_projected_yy(self)

    def xi1D(self):
        return _CosmoBolognaLib.TwoPointCorrelation_projected_xi1D(self)

    def error1D(self):
        return _CosmoBolognaLib.TwoPointCorrelation_projected_error1D(self)

    def xi2D(self):
        return _CosmoBolognaLib.TwoPointCorrelation_projected_xi2D(self)

    def error2D(self):
        return _CosmoBolognaLib.TwoPointCorrelation_projected_error2D(self)

    def measure(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation_projected_measure(self, *args)

    def read(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation_projected_read(self, dir, file)

    def write(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation_projected_write(self, *args)

    def read_covariance(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation_projected_read_covariance(self, dir, file)

    def write_covariance(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation_projected_write_covariance(self, dir, file)

    def compute_covariance(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation_projected_compute_covariance(self, *args)
TwoPointCorrelation_projected_swigregister = _CosmoBolognaLib.TwoPointCorrelation_projected_swigregister
TwoPointCorrelation_projected_swigregister(TwoPointCorrelation_projected)

class TwoPointCorrelation_deprojected(TwoPointCorrelation_projected):
    __swig_setmethods__ = {}
    for _s in [TwoPointCorrelation_projected]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TwoPointCorrelation_deprojected, name, value)
    __swig_getmethods__ = {}
    for _s in [TwoPointCorrelation_projected]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TwoPointCorrelation_deprojected, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_TwoPointCorrelation_deprojected(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_TwoPointCorrelation_deprojected
    __del__ = lambda self: None

    def yy(self):
        return _CosmoBolognaLib.TwoPointCorrelation_deprojected_yy(self)

    def xi1D(self):
        return _CosmoBolognaLib.TwoPointCorrelation_deprojected_xi1D(self)

    def error1D(self):
        return _CosmoBolognaLib.TwoPointCorrelation_deprojected_error1D(self)

    def xi2D(self):
        return _CosmoBolognaLib.TwoPointCorrelation_deprojected_xi2D(self)

    def error2D(self):
        return _CosmoBolognaLib.TwoPointCorrelation_deprojected_error2D(self)

    def measure(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation_deprojected_measure(self, *args)

    def read(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation_deprojected_read(self, dir, file)

    def write(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation_deprojected_write(self, *args)
TwoPointCorrelation_deprojected_swigregister = _CosmoBolognaLib.TwoPointCorrelation_deprojected_swigregister
TwoPointCorrelation_deprojected_swigregister(TwoPointCorrelation_deprojected)

class TwoPointCorrelation_multipoles_direct(TwoPointCorrelation1D_monopole):
    __swig_setmethods__ = {}
    for _s in [TwoPointCorrelation1D_monopole]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TwoPointCorrelation_multipoles_direct, name, value)
    __swig_getmethods__ = {}
    for _s in [TwoPointCorrelation1D_monopole]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TwoPointCorrelation_multipoles_direct, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_TwoPointCorrelation_multipoles_direct(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_TwoPointCorrelation_multipoles_direct
    __del__ = lambda self: None

    def xx(self):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_direct_xx(self)

    def xi1D(self):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_direct_xi1D(self)

    def error1D(self):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_direct_error1D(self)

    def xiMonopole(self):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_direct_xiMonopole(self)

    def errorMonopole(self):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_direct_errorMonopole(self)

    def xiQuadrupole(self):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_direct_xiQuadrupole(self)

    def errorQuadrupole(self):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_direct_errorQuadrupole(self)

    def xiHexadecapole(self):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_direct_xiHexadecapole(self)

    def errorHexadecapole(self):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_direct_errorHexadecapole(self)

    def set_parameters(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_direct_set_parameters(self, *args)

    def read(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_direct_read(self, dir, file)

    def write(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_direct_write(self, *args)

    def data_with_extra_info(self, dd, rad, xi, error):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_direct_data_with_extra_info(self, dd, rad, xi, error)
TwoPointCorrelation_multipoles_direct_swigregister = _CosmoBolognaLib.TwoPointCorrelation_multipoles_direct_swigregister
TwoPointCorrelation_multipoles_direct_swigregister(TwoPointCorrelation_multipoles_direct)

class TwoPointCorrelation_multipoles_integrated(TwoPointCorrelation2D_polar):
    __swig_setmethods__ = {}
    for _s in [TwoPointCorrelation2D_polar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TwoPointCorrelation_multipoles_integrated, name, value)
    __swig_getmethods__ = {}
    for _s in [TwoPointCorrelation2D_polar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TwoPointCorrelation_multipoles_integrated, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_TwoPointCorrelation_multipoles_integrated(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_TwoPointCorrelation_multipoles_integrated
    __del__ = lambda self: None

    def xx(self):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_integrated_xx(self)

    def yy(self):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_integrated_yy(self)

    def xi1D(self):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_integrated_xi1D(self)

    def error1D(self):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_integrated_error1D(self)

    def xi2D(self):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_integrated_xi2D(self)

    def error2D(self):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_integrated_error2D(self)

    def xiMonopole(self):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_integrated_xiMonopole(self)

    def errorMonopole(self):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_integrated_errorMonopole(self)

    def xiQuadrupole(self):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_integrated_xiQuadrupole(self)

    def errorQuadrupole(self):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_integrated_errorQuadrupole(self)

    def xiHexadecapole(self):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_integrated_xiHexadecapole(self)

    def errorHexadecapole(self):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_integrated_errorHexadecapole(self)

    def measure(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_integrated_measure(self, *args)

    def read(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_integrated_read(self, dir, file)

    def write(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_integrated_write(self, *args)

    def read_covariance(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_integrated_read_covariance(self, dir, file)

    def write_covariance(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_integrated_write_covariance(self, dir, file)

    def compute_covariance(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation_multipoles_integrated_compute_covariance(self, *args)
TwoPointCorrelation_multipoles_integrated_swigregister = _CosmoBolognaLib.TwoPointCorrelation_multipoles_integrated_swigregister
TwoPointCorrelation_multipoles_integrated_swigregister(TwoPointCorrelation_multipoles_integrated)

class TwoPointCorrelation_wedges(TwoPointCorrelation2D_polar):
    __swig_setmethods__ = {}
    for _s in [TwoPointCorrelation2D_polar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TwoPointCorrelation_wedges, name, value)
    __swig_getmethods__ = {}
    for _s in [TwoPointCorrelation2D_polar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TwoPointCorrelation_wedges, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_TwoPointCorrelation_wedges(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_TwoPointCorrelation_wedges
    __del__ = lambda self: None

    def xx(self):
        return _CosmoBolognaLib.TwoPointCorrelation_wedges_xx(self)

    def xiPerpendicular(self):
        return _CosmoBolognaLib.TwoPointCorrelation_wedges_xiPerpendicular(self)

    def errorPerpendicular(self):
        return _CosmoBolognaLib.TwoPointCorrelation_wedges_errorPerpendicular(self)

    def xiParallel(self):
        return _CosmoBolognaLib.TwoPointCorrelation_wedges_xiParallel(self)

    def errorParallel(self):
        return _CosmoBolognaLib.TwoPointCorrelation_wedges_errorParallel(self)

    def yy(self):
        return _CosmoBolognaLib.TwoPointCorrelation_wedges_yy(self)

    def xi1D(self):
        return _CosmoBolognaLib.TwoPointCorrelation_wedges_xi1D(self)

    def error1D(self):
        return _CosmoBolognaLib.TwoPointCorrelation_wedges_error1D(self)

    def xi2D(self):
        return _CosmoBolognaLib.TwoPointCorrelation_wedges_xi2D(self)

    def error2D(self):
        return _CosmoBolognaLib.TwoPointCorrelation_wedges_error2D(self)

    def measure(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation_wedges_measure(self, *args)

    def read(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation_wedges_read(self, dir, file)

    def write(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation_wedges_write(self, *args)

    def read_covariance(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation_wedges_read_covariance(self, dir, file)

    def write_covariance(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation_wedges_write_covariance(self, dir, file)

    def compute_covariance(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation_wedges_compute_covariance(self, *args)
TwoPointCorrelation_wedges_swigregister = _CosmoBolognaLib.TwoPointCorrelation_wedges_swigregister
TwoPointCorrelation_wedges_swigregister(TwoPointCorrelation_wedges)

class TwoPointCorrelation1D_filtered(TwoPointCorrelation1D_monopole):
    __swig_setmethods__ = {}
    for _s in [TwoPointCorrelation1D_monopole]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TwoPointCorrelation1D_filtered, name, value)
    __swig_getmethods__ = {}
    for _s in [TwoPointCorrelation1D_monopole]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TwoPointCorrelation1D_filtered, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_TwoPointCorrelation1D_filtered(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_TwoPointCorrelation1D_filtered
    __del__ = lambda self: None

    def set_parameters(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation1D_filtered_set_parameters(self, *args)

    def measure(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation1D_filtered_measure(self, *args)

    def read(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelation1D_filtered_read(self, dir, file)

    def write(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation1D_filtered_write(self, *args)
TwoPointCorrelation1D_filtered_swigregister = _CosmoBolognaLib.TwoPointCorrelation1D_filtered_swigregister
TwoPointCorrelation1D_filtered_swigregister(TwoPointCorrelation1D_filtered)

class TwoPointCorrelationCross(TwoPointCorrelation):
    __swig_setmethods__ = {}
    for _s in [TwoPointCorrelation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TwoPointCorrelationCross, name, value)
    __swig_getmethods__ = {}
    for _s in [TwoPointCorrelation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TwoPointCorrelationCross, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_TwoPointCorrelationCross
    __del__ = lambda self: None

    def PoissonError(self, estimator, d1d2, rr, d1r, d2r, nData1, nData2, nRandom):
        return _CosmoBolognaLib.TwoPointCorrelationCross_PoissonError(self, estimator, d1d2, rr, d1r, d2r, nData1, nData2, nRandom)
TwoPointCorrelationCross_swigregister = _CosmoBolognaLib.TwoPointCorrelationCross_swigregister
TwoPointCorrelationCross_swigregister(TwoPointCorrelationCross)

class TwoPointCorrelationCross1D(TwoPointCorrelationCross, TwoPointCorrelation1D):
    __swig_setmethods__ = {}
    for _s in [TwoPointCorrelationCross, TwoPointCorrelation1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TwoPointCorrelationCross1D, name, value)
    __swig_getmethods__ = {}
    for _s in [TwoPointCorrelationCross, TwoPointCorrelation1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TwoPointCorrelationCross1D, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_TwoPointCorrelationCross1D
    __del__ = lambda self: None

    def measure(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelationCross1D_measure(self, *args)
TwoPointCorrelationCross1D_swigregister = _CosmoBolognaLib.TwoPointCorrelationCross1D_swigregister
TwoPointCorrelationCross1D_swigregister(TwoPointCorrelationCross1D)

class TwoPointCorrelationCross1D_monopole(TwoPointCorrelationCross1D, TwoPointCorrelation1D_monopole):
    __swig_setmethods__ = {}
    for _s in [TwoPointCorrelationCross1D, TwoPointCorrelation1D_monopole]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TwoPointCorrelationCross1D_monopole, name, value)
    __swig_getmethods__ = {}
    for _s in [TwoPointCorrelationCross1D, TwoPointCorrelation1D_monopole]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TwoPointCorrelationCross1D_monopole, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_TwoPointCorrelationCross1D_monopole(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_TwoPointCorrelationCross1D_monopole
    __del__ = lambda self: None

    def set_parameters(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelationCross1D_monopole_set_parameters(self, *args)

    def measure(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelationCross1D_monopole_measure(self, *args)

    def read(self, dir, file):
        return _CosmoBolognaLib.TwoPointCorrelationCross1D_monopole_read(self, dir, file)

    def write(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelationCross1D_monopole_write(self, *args)
TwoPointCorrelationCross1D_monopole_swigregister = _CosmoBolognaLib.TwoPointCorrelationCross1D_monopole_swigregister
TwoPointCorrelationCross1D_monopole_swigregister(TwoPointCorrelationCross1D_monopole)

TripletType__comoving_theta_ = _CosmoBolognaLib.TripletType__comoving_theta_
TripletType__comoving_side_ = _CosmoBolognaLib.TripletType__comoving_side_
TripletType__comoving_costheta_ = _CosmoBolognaLib.TripletType__comoving_costheta_
TripletType__multipoles_direct_ = _CosmoBolognaLib.TripletType__multipoles_direct_

def TripletTypeNames():
    return _CosmoBolognaLib.TripletTypeNames()
TripletTypeNames = _CosmoBolognaLib.TripletTypeNames

def TripletTypeCast(*args):
    return _CosmoBolognaLib.TripletTypeCast(*args)
TripletTypeCast = _CosmoBolognaLib.TripletTypeCast
class Triplet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Triplet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Triplet, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_Triplet
    __del__ = lambda self: None
    if _newclass:
        Create = staticmethod(_CosmoBolognaLib.Triplet_Create)
    else:
        Create = _CosmoBolognaLib.Triplet_Create

    def tripletDim(self):
        return _CosmoBolognaLib.Triplet_tripletDim(self)

    def tripletType(self):
        return _CosmoBolognaLib.Triplet_tripletType(self)

    def scale(self, *args):
        return _CosmoBolognaLib.Triplet_scale(self, *args)

    def TT1D(self, *args):
        return _CosmoBolognaLib.Triplet_TT1D(self, *args)

    def scale_D1(self, *args):
        return _CosmoBolognaLib.Triplet_scale_D1(self, *args)

    def scale_D2(self, *args):
        return _CosmoBolognaLib.Triplet_scale_D2(self, *args)

    def TT2D(self, *args):
        return _CosmoBolognaLib.Triplet_TT2D(self, *args)

    def r12(self):
        return _CosmoBolognaLib.Triplet_r12(self)

    def r12_binSize(self):
        return _CosmoBolognaLib.Triplet_r12_binSize(self)

    def r13(self):
        return _CosmoBolognaLib.Triplet_r13(self)

    def r13_binSize(self):
        return _CosmoBolognaLib.Triplet_r13_binSize(self)

    def nbins(self):
        return _CosmoBolognaLib.Triplet_nbins(self)

    def binSize(self):
        return _CosmoBolognaLib.Triplet_binSize(self)

    def r12_D1(self):
        return _CosmoBolognaLib.Triplet_r12_D1(self)

    def r12_binSize_D1(self):
        return _CosmoBolognaLib.Triplet_r12_binSize_D1(self)

    def r13_D1(self):
        return _CosmoBolognaLib.Triplet_r13_D1(self)

    def r13_binSize_D1(self):
        return _CosmoBolognaLib.Triplet_r13_binSize_D1(self)

    def nbins_D1(self):
        return _CosmoBolognaLib.Triplet_nbins_D1(self)

    def binSize_D1(self):
        return _CosmoBolognaLib.Triplet_binSize_D1(self)

    def r12_D2(self):
        return _CosmoBolognaLib.Triplet_r12_D2(self)

    def r12_binSize_D2(self):
        return _CosmoBolognaLib.Triplet_r12_binSize_D2(self)

    def r13_D2(self):
        return _CosmoBolognaLib.Triplet_r13_D2(self)

    def r13_binSize_D2(self):
        return _CosmoBolognaLib.Triplet_r13_binSize_D2(self)

    def nbins_D2(self):
        return _CosmoBolognaLib.Triplet_nbins_D2(self)

    def binSize_D2(self):
        return _CosmoBolognaLib.Triplet_binSize_D2(self)

    def set_TT1D(self, i, tt):
        return _CosmoBolognaLib.Triplet_set_TT1D(self, i, tt)

    def add_TT1D(self, i, tt):
        return _CosmoBolognaLib.Triplet_add_TT1D(self, i, tt)

    def get_triplet(self, r12, r13, r23, klin):
        return _CosmoBolognaLib.Triplet_get_triplet(self, r12, r13, r23, klin)

    def set_triplet(self, klin, ww=1.):
        return _CosmoBolognaLib.Triplet_set_triplet(self, klin, ww)

    def put(self, *args):
        return _CosmoBolognaLib.Triplet_put(self, *args)

    def Sum(self, tt, ww=1.):
        return _CosmoBolognaLib.Triplet_Sum(self, tt, ww)
Triplet_swigregister = _CosmoBolognaLib.Triplet_swigregister
Triplet_swigregister(Triplet)

def Triplet_Create(type, r12, r12_binSize, r13, r13_binSize, nbins):
    return _CosmoBolognaLib.Triplet_Create(type, r12, r12_binSize, r13, r13_binSize, nbins)
Triplet_Create = _CosmoBolognaLib.Triplet_Create

class Triplet1D(Triplet):
    __swig_setmethods__ = {}
    for _s in [Triplet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Triplet1D, name, value)
    __swig_getmethods__ = {}
    for _s in [Triplet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Triplet1D, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_Triplet1D
    __del__ = lambda self: None

    def scale(self, *args):
        return _CosmoBolognaLib.Triplet1D_scale(self, *args)

    def TT1D(self, *args):
        return _CosmoBolognaLib.Triplet1D_TT1D(self, *args)

    def r12(self):
        return _CosmoBolognaLib.Triplet1D_r12(self)

    def r12_binSize(self):
        return _CosmoBolognaLib.Triplet1D_r12_binSize(self)

    def r13(self):
        return _CosmoBolognaLib.Triplet1D_r13(self)

    def r13_binSize(self):
        return _CosmoBolognaLib.Triplet1D_r13_binSize(self)

    def nbins(self):
        return _CosmoBolognaLib.Triplet1D_nbins(self)

    def binSize(self):
        return _CosmoBolognaLib.Triplet1D_binSize(self)

    def set_TT1D(self, i, tt):
        return _CosmoBolognaLib.Triplet1D_set_TT1D(self, i, tt)

    def add_TT1D(self, i, tt):
        return _CosmoBolognaLib.Triplet1D_add_TT1D(self, i, tt)

    def Sum(self, tt, ww=1):
        return _CosmoBolognaLib.Triplet1D_Sum(self, tt, ww)
Triplet1D_swigregister = _CosmoBolognaLib.Triplet1D_swigregister
Triplet1D_swigregister(Triplet1D)

class Triplet1D_comoving(Triplet1D):
    __swig_setmethods__ = {}
    for _s in [Triplet1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Triplet1D_comoving, name, value)
    __swig_getmethods__ = {}
    for _s in [Triplet1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Triplet1D_comoving, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_Triplet1D_comoving
    __del__ = lambda self: None
Triplet1D_comoving_swigregister = _CosmoBolognaLib.Triplet1D_comoving_swigregister
Triplet1D_comoving_swigregister(Triplet1D_comoving)

class Triplet1D_comoving_theta(Triplet1D_comoving):
    __swig_setmethods__ = {}
    for _s in [Triplet1D_comoving]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Triplet1D_comoving_theta, name, value)
    __swig_getmethods__ = {}
    for _s in [Triplet1D_comoving]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Triplet1D_comoving_theta, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Triplet1D_comoving_theta(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_triplet(self, r12, r13, r23, klin):
        return _CosmoBolognaLib.Triplet1D_comoving_theta_get_triplet(self, r12, r13, r23, klin)

    def set_triplet(self, klin, ww=1.):
        return _CosmoBolognaLib.Triplet1D_comoving_theta_set_triplet(self, klin, ww)

    def put(self, *args):
        return _CosmoBolognaLib.Triplet1D_comoving_theta_put(self, *args)
    __swig_destroy__ = _CosmoBolognaLib.delete_Triplet1D_comoving_theta
    __del__ = lambda self: None
Triplet1D_comoving_theta_swigregister = _CosmoBolognaLib.Triplet1D_comoving_theta_swigregister
Triplet1D_comoving_theta_swigregister(Triplet1D_comoving_theta)

class Triplet1D_multipoles_direct(Triplet1D_comoving):
    __swig_setmethods__ = {}
    for _s in [Triplet1D_comoving]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Triplet1D_multipoles_direct, name, value)
    __swig_getmethods__ = {}
    for _s in [Triplet1D_comoving]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Triplet1D_multipoles_direct, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Triplet1D_multipoles_direct(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_triplet(self, r12, r13, r23, klin):
        return _CosmoBolognaLib.Triplet1D_multipoles_direct_get_triplet(self, r12, r13, r23, klin)

    def set_triplet(self, klin, ww=1.):
        return _CosmoBolognaLib.Triplet1D_multipoles_direct_set_triplet(self, klin, ww)

    def put(self, *args):
        return _CosmoBolognaLib.Triplet1D_multipoles_direct_put(self, *args)
    __swig_destroy__ = _CosmoBolognaLib.delete_Triplet1D_multipoles_direct
    __del__ = lambda self: None
Triplet1D_multipoles_direct_swigregister = _CosmoBolognaLib.Triplet1D_multipoles_direct_swigregister
Triplet1D_multipoles_direct_swigregister(Triplet1D_multipoles_direct)

class Triplet1D_comoving_side(Triplet1D_comoving):
    __swig_setmethods__ = {}
    for _s in [Triplet1D_comoving]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Triplet1D_comoving_side, name, value)
    __swig_getmethods__ = {}
    for _s in [Triplet1D_comoving]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Triplet1D_comoving_side, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Triplet1D_comoving_side(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_triplet(self, r12, r13, r23, klin):
        return _CosmoBolognaLib.Triplet1D_comoving_side_get_triplet(self, r12, r13, r23, klin)

    def set_triplet(self, klin, ww=1.):
        return _CosmoBolognaLib.Triplet1D_comoving_side_set_triplet(self, klin, ww)

    def put(self, *args):
        return _CosmoBolognaLib.Triplet1D_comoving_side_put(self, *args)
    __swig_destroy__ = _CosmoBolognaLib.delete_Triplet1D_comoving_side
    __del__ = lambda self: None
Triplet1D_comoving_side_swigregister = _CosmoBolognaLib.Triplet1D_comoving_side_swigregister
Triplet1D_comoving_side_swigregister(Triplet1D_comoving_side)

class Triplet1D_comoving_costheta(Triplet1D_comoving):
    __swig_setmethods__ = {}
    for _s in [Triplet1D_comoving]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Triplet1D_comoving_costheta, name, value)
    __swig_getmethods__ = {}
    for _s in [Triplet1D_comoving]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Triplet1D_comoving_costheta, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Triplet1D_comoving_costheta(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_triplet(self, r12, r13, r23, klin):
        return _CosmoBolognaLib.Triplet1D_comoving_costheta_get_triplet(self, r12, r13, r23, klin)

    def set_triplet(self, klin, ww=1.):
        return _CosmoBolognaLib.Triplet1D_comoving_costheta_set_triplet(self, klin, ww)

    def put(self, *args):
        return _CosmoBolognaLib.Triplet1D_comoving_costheta_put(self, *args)
    __swig_destroy__ = _CosmoBolognaLib.delete_Triplet1D_comoving_costheta
    __del__ = lambda self: None
Triplet1D_comoving_costheta_swigregister = _CosmoBolognaLib.Triplet1D_comoving_costheta_swigregister
Triplet1D_comoving_costheta_swigregister(Triplet1D_comoving_costheta)

class Triplet1D_angular(Triplet1D):
    __swig_setmethods__ = {}
    for _s in [Triplet1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Triplet1D_angular, name, value)
    __swig_getmethods__ = {}
    for _s in [Triplet1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Triplet1D_angular, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_Triplet1D_angular
    __del__ = lambda self: None
Triplet1D_angular_swigregister = _CosmoBolognaLib.Triplet1D_angular_swigregister
Triplet1D_angular_swigregister(Triplet1D_angular)

class Triplet2D(Triplet):
    __swig_setmethods__ = {}
    for _s in [Triplet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Triplet2D, name, value)
    __swig_getmethods__ = {}
    for _s in [Triplet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Triplet2D, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_Triplet2D
    __del__ = lambda self: None

    def scale_D1(self, *args):
        return _CosmoBolognaLib.Triplet2D_scale_D1(self, *args)

    def scale_D2(self, *args):
        return _CosmoBolognaLib.Triplet2D_scale_D2(self, *args)

    def TT2D(self, *args):
        return _CosmoBolognaLib.Triplet2D_TT2D(self, *args)

    def r12_D1(self):
        return _CosmoBolognaLib.Triplet2D_r12_D1(self)

    def r12_binSize_D1(self):
        return _CosmoBolognaLib.Triplet2D_r12_binSize_D1(self)

    def r13_D1(self):
        return _CosmoBolognaLib.Triplet2D_r13_D1(self)

    def r13_binSize_D1(self):
        return _CosmoBolognaLib.Triplet2D_r13_binSize_D1(self)

    def binSize_D1(self):
        return _CosmoBolognaLib.Triplet2D_binSize_D1(self)

    def r12_D2(self):
        return _CosmoBolognaLib.Triplet2D_r12_D2(self)

    def r12_binSize_D2(self):
        return _CosmoBolognaLib.Triplet2D_r12_binSize_D2(self)

    def r13_D2(self):
        return _CosmoBolognaLib.Triplet2D_r13_D2(self)

    def r13_binSize_D2(self):
        return _CosmoBolognaLib.Triplet2D_r13_binSize_D2(self)

    def binSize_D2(self):
        return _CosmoBolognaLib.Triplet2D_binSize_D2(self)

    def Sum(self, tt, ww=1):
        return _CosmoBolognaLib.Triplet2D_Sum(self, tt, ww)

    def get_triplet(self, r12, r13, r23, klin):
        return _CosmoBolognaLib.Triplet2D_get_triplet(self, r12, r13, r23, klin)

    def set_triplet(self, klin, ww=1.):
        return _CosmoBolognaLib.Triplet2D_set_triplet(self, klin, ww)

    def put(self, *args):
        return _CosmoBolognaLib.Triplet2D_put(self, *args)
Triplet2D_swigregister = _CosmoBolognaLib.Triplet2D_swigregister
Triplet2D_swigregister(Triplet2D)

ThreePType__angular_connected_ = _CosmoBolognaLib.ThreePType__angular_connected_
ThreePType__angular_reduced_ = _CosmoBolognaLib.ThreePType__angular_reduced_
ThreePType__comoving_connected_ = _CosmoBolognaLib.ThreePType__comoving_connected_
ThreePType__comoving_reduced_ = _CosmoBolognaLib.ThreePType__comoving_reduced_

def ThreePTypeNames():
    return _CosmoBolognaLib.ThreePTypeNames()
ThreePTypeNames = _CosmoBolognaLib.ThreePTypeNames

def ThreePTypeCast(*args):
    return _CosmoBolognaLib.ThreePTypeCast(*args)
ThreePTypeCast = _CosmoBolognaLib.ThreePTypeCast
class ThreePointCorrelation(Measure):
    __swig_setmethods__ = {}
    for _s in [Measure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreePointCorrelation, name, value)
    __swig_getmethods__ = {}
    for _s in [Measure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThreePointCorrelation, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_ThreePointCorrelation
    __del__ = lambda self: None
    if _newclass:
        Create = staticmethod(_CosmoBolognaLib.ThreePointCorrelation_Create)
    else:
        Create = _CosmoBolognaLib.ThreePointCorrelation_Create

    def threePType(self):
        return _CosmoBolognaLib.ThreePointCorrelation_threePType(self)

    def data(self):
        return _CosmoBolognaLib.ThreePointCorrelation_data(self)

    def random(self):
        return _CosmoBolognaLib.ThreePointCorrelation_random(self)

    def ddd(self):
        return _CosmoBolognaLib.ThreePointCorrelation_ddd(self)

    def rrr(self):
        return _CosmoBolognaLib.ThreePointCorrelation_rrr(self)

    def ddr(self):
        return _CosmoBolognaLib.ThreePointCorrelation_ddr(self)

    def drr(self):
        return _CosmoBolognaLib.ThreePointCorrelation_drr(self)

    def scale(self):
        return _CosmoBolognaLib.ThreePointCorrelation_scale(self)

    def zeta(self):
        return _CosmoBolognaLib.ThreePointCorrelation_zeta(self)

    def QQ(self):
        return _CosmoBolognaLib.ThreePointCorrelation_QQ(self)

    def error(self):
        return _CosmoBolognaLib.ThreePointCorrelation_error(self)

    def set_data(self, data):
        return _CosmoBolognaLib.ThreePointCorrelation_set_data(self, data)

    def set_random(self, random):
        return _CosmoBolognaLib.ThreePointCorrelation_set_random(self, random)

    def measure(self, *args):
        return _CosmoBolognaLib.ThreePointCorrelation_measure(self, *args)

    def write(self, *args):
        return _CosmoBolognaLib.ThreePointCorrelation_write(self, *args)

    def write_covariance(self, dir, file):
        return _CosmoBolognaLib.ThreePointCorrelation_write_covariance(self, dir, file)
ThreePointCorrelation_swigregister = _CosmoBolognaLib.ThreePointCorrelation_swigregister
ThreePointCorrelation_swigregister(ThreePointCorrelation)

def ThreePointCorrelation_Create(*args):
    return _CosmoBolognaLib.ThreePointCorrelation_Create(*args)
ThreePointCorrelation_Create = _CosmoBolognaLib.ThreePointCorrelation_Create

class ThreePointCorrelation_angular_connected(ThreePointCorrelation):
    __swig_setmethods__ = {}
    for _s in [ThreePointCorrelation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreePointCorrelation_angular_connected, name, value)
    __swig_getmethods__ = {}
    for _s in [ThreePointCorrelation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThreePointCorrelation_angular_connected, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_ThreePointCorrelation_angular_connected(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_ThreePointCorrelation_angular_connected
    __del__ = lambda self: None

    def set_parameters(self, *args):
        return _CosmoBolognaLib.ThreePointCorrelation_angular_connected_set_parameters(self, *args)

    def scale(self):
        return _CosmoBolognaLib.ThreePointCorrelation_angular_connected_scale(self)

    def zeta(self):
        return _CosmoBolognaLib.ThreePointCorrelation_angular_connected_zeta(self)

    def error(self):
        return _CosmoBolognaLib.ThreePointCorrelation_angular_connected_error(self)

    def measure(self, *args):
        return _CosmoBolognaLib.ThreePointCorrelation_angular_connected_measure(self, *args)

    def write(self, dir, file):
        return _CosmoBolognaLib.ThreePointCorrelation_angular_connected_write(self, dir, file)

    def write_covariance(self, dir, file):
        return _CosmoBolognaLib.ThreePointCorrelation_angular_connected_write_covariance(self, dir, file)
ThreePointCorrelation_angular_connected_swigregister = _CosmoBolognaLib.ThreePointCorrelation_angular_connected_swigregister
ThreePointCorrelation_angular_connected_swigregister(ThreePointCorrelation_angular_connected)

class ThreePointCorrelation_angular_reduced(ThreePointCorrelation_angular_connected):
    __swig_setmethods__ = {}
    for _s in [ThreePointCorrelation_angular_connected]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreePointCorrelation_angular_reduced, name, value)
    __swig_getmethods__ = {}
    for _s in [ThreePointCorrelation_angular_connected]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThreePointCorrelation_angular_reduced, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_ThreePointCorrelation_angular_reduced(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_ThreePointCorrelation_angular_reduced
    __del__ = lambda self: None

    def measure(self, *args):
        return _CosmoBolognaLib.ThreePointCorrelation_angular_reduced_measure(self, *args)

    def write(self, dir, file, connected):
        return _CosmoBolognaLib.ThreePointCorrelation_angular_reduced_write(self, dir, file, connected)

    def write_covariance(self, dir, file):
        return _CosmoBolognaLib.ThreePointCorrelation_angular_reduced_write_covariance(self, dir, file)
ThreePointCorrelation_angular_reduced_swigregister = _CosmoBolognaLib.ThreePointCorrelation_angular_reduced_swigregister
ThreePointCorrelation_angular_reduced_swigregister(ThreePointCorrelation_angular_reduced)

class ThreePointCorrelation_comoving_connected(ThreePointCorrelation):
    __swig_setmethods__ = {}
    for _s in [ThreePointCorrelation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreePointCorrelation_comoving_connected, name, value)
    __swig_getmethods__ = {}
    for _s in [ThreePointCorrelation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThreePointCorrelation_comoving_connected, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_ThreePointCorrelation_comoving_connected(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_ThreePointCorrelation_comoving_connected
    __del__ = lambda self: None

    def set_parameters(self, *args):
        return _CosmoBolognaLib.ThreePointCorrelation_comoving_connected_set_parameters(self, *args)

    def scale(self):
        return _CosmoBolognaLib.ThreePointCorrelation_comoving_connected_scale(self)

    def zeta(self):
        return _CosmoBolognaLib.ThreePointCorrelation_comoving_connected_zeta(self)

    def error(self):
        return _CosmoBolognaLib.ThreePointCorrelation_comoving_connected_error(self)

    def measure(self, *args):
        return _CosmoBolognaLib.ThreePointCorrelation_comoving_connected_measure(self, *args)

    def write(self, dir, file):
        return _CosmoBolognaLib.ThreePointCorrelation_comoving_connected_write(self, dir, file)

    def write_covariance(self, dir, file):
        return _CosmoBolognaLib.ThreePointCorrelation_comoving_connected_write_covariance(self, dir, file)
ThreePointCorrelation_comoving_connected_swigregister = _CosmoBolognaLib.ThreePointCorrelation_comoving_connected_swigregister
ThreePointCorrelation_comoving_connected_swigregister(ThreePointCorrelation_comoving_connected)

class ThreePointCorrelation_comoving_reduced(ThreePointCorrelation_comoving_connected):
    __swig_setmethods__ = {}
    for _s in [ThreePointCorrelation_comoving_connected]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreePointCorrelation_comoving_reduced, name, value)
    __swig_getmethods__ = {}
    for _s in [ThreePointCorrelation_comoving_connected]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThreePointCorrelation_comoving_reduced, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_ThreePointCorrelation_comoving_reduced(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_ThreePointCorrelation_comoving_reduced
    __del__ = lambda self: None

    def scale(self):
        return _CosmoBolognaLib.ThreePointCorrelation_comoving_reduced_scale(self)

    def QQ(self):
        return _CosmoBolognaLib.ThreePointCorrelation_comoving_reduced_QQ(self)

    def error(self):
        return _CosmoBolognaLib.ThreePointCorrelation_comoving_reduced_error(self)

    def measure(self, *args):
        return _CosmoBolognaLib.ThreePointCorrelation_comoving_reduced_measure(self, *args)

    def write(self, dir, file, connected):
        return _CosmoBolognaLib.ThreePointCorrelation_comoving_reduced_write(self, dir, file, connected)

    def write_covariance(self, dir, file):
        return _CosmoBolognaLib.ThreePointCorrelation_comoving_reduced_write_covariance(self, dir, file)
ThreePointCorrelation_comoving_reduced_swigregister = _CosmoBolognaLib.ThreePointCorrelation_comoving_reduced_swigregister
ThreePointCorrelation_comoving_reduced_swigregister(ThreePointCorrelation_comoving_reduced)

class Modelling(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modelling, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Modelling, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CosmoBolognaLib.new_Modelling()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Modelling
    __del__ = lambda self: None

    def data(self):
        return _CosmoBolognaLib.Modelling_data(self)

    def data_fit(self):
        return _CosmoBolognaLib.Modelling_data_fit(self)

    def likelihood(self):
        return _CosmoBolognaLib.Modelling_likelihood(self)

    def posterior(self):
        return _CosmoBolognaLib.Modelling_posterior(self)

    def likelihood_parameters(self):
        return _CosmoBolognaLib.Modelling_likelihood_parameters(self)

    def posterior_parameters(self):
        return _CosmoBolognaLib.Modelling_posterior_parameters(self)

    def reset_fit_range(self):
        return _CosmoBolognaLib.Modelling_reset_fit_range(self)

    def set_fit_range(self, *args):
        return _CosmoBolognaLib.Modelling_set_fit_range(self, *args)

    def set_data(self, dataset):
        return _CosmoBolognaLib.Modelling_set_data(self, dataset)

    def set_likelihood(self, *args):
        return _CosmoBolognaLib.Modelling_set_likelihood(self, *args)

    def maximize_likelihood(self, start, parameter_limits, max_iter=10000, tol=1.e-6, epsilon=1.e-3):
        return _CosmoBolognaLib.Modelling_maximize_likelihood(self, start, parameter_limits, max_iter, tol, epsilon)

    def maximize_posterior(self, start, max_iter=10000, tol=1.e-6, epsilon=1.e-3, seed=34123):
        return _CosmoBolognaLib.Modelling_maximize_posterior(self, start, max_iter, tol, epsilon, seed)

    def sample_posterior(self, *args):
        return _CosmoBolognaLib.Modelling_sample_posterior(self, *args)

    def write_chain(self, output_dir, output_file, start=0, thin=1, fits=False):
        return _CosmoBolognaLib.Modelling_write_chain(self, output_dir, output_file, start, thin, fits)

    def read_chain(self, input_dir, input_file, nwalkers, skip_header=1, fits=False):
        return _CosmoBolognaLib.Modelling_read_chain(self, input_dir, input_file, nwalkers, skip_header, fits)

    def show_results(self, start=0, thin=1, nbins=50, show_mode=False):
        return _CosmoBolognaLib.Modelling_show_results(self, start, thin, nbins, show_mode)

    def write_results(self, output_dir, root_file, start=0, thin=1, nbins=50, fits=False, compute_mode=False):
        return _CosmoBolognaLib.Modelling_write_results(self, output_dir, root_file, start, thin, nbins, fits, compute_mode)

    def write_model(self, *args):
        return _CosmoBolognaLib.Modelling_write_model(self, *args)

    def write_model_at_bestfit(self, *args):
        return _CosmoBolognaLib.Modelling_write_model_at_bestfit(self, *args)

    def write_model_from_chains(self, *args):
        return _CosmoBolognaLib.Modelling_write_model_from_chains(self, *args)
Modelling_swigregister = _CosmoBolognaLib.Modelling_swigregister
Modelling_swigregister(Modelling)

class Modelling1D(Modelling):
    __swig_setmethods__ = {}
    for _s in [Modelling]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modelling1D, name, value)
    __swig_getmethods__ = {}
    for _s in [Modelling]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Modelling1D, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CosmoBolognaLib.new_Modelling1D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Modelling1D
    __del__ = lambda self: None

    def set_fit_range(self, xmin, xmax):
        return _CosmoBolognaLib.Modelling1D_set_fit_range(self, xmin, xmax)

    def write_model(self, output_dir, output_file, xx, parameters):
        return _CosmoBolognaLib.Modelling1D_write_model(self, output_dir, output_file, xx, parameters)

    def write_model_at_bestfit(self, output_dir, output_file, xx):
        return _CosmoBolognaLib.Modelling1D_write_model_at_bestfit(self, output_dir, output_file, xx)

    def write_model_from_chains(self, output_dir, output_file, xx, start=0, thin=1):
        return _CosmoBolognaLib.Modelling1D_write_model_from_chains(self, output_dir, output_file, xx, start, thin)
Modelling1D_swigregister = _CosmoBolognaLib.Modelling1D_swigregister
Modelling1D_swigregister(Modelling1D)

class Modelling2D(Modelling):
    __swig_setmethods__ = {}
    for _s in [Modelling]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modelling2D, name, value)
    __swig_getmethods__ = {}
    for _s in [Modelling]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Modelling2D, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CosmoBolognaLib.new_Modelling2D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Modelling2D
    __del__ = lambda self: None

    def set_fit_range(self, xmin, xmax, ymin, ymax):
        return _CosmoBolognaLib.Modelling2D_set_fit_range(self, xmin, xmax, ymin, ymax)

    def write_model(self, output_dir, output_file, xx, yy, parameters):
        return _CosmoBolognaLib.Modelling2D_write_model(self, output_dir, output_file, xx, yy, parameters)

    def write_model_at_bestfit(self, output_dir, output_file, xx, yy):
        return _CosmoBolognaLib.Modelling2D_write_model_at_bestfit(self, output_dir, output_file, xx, yy)

    def write_model_from_chains(self, output_dir, output_file, xx, yy, start=0, thin=1):
        return _CosmoBolognaLib.Modelling2D_write_model_from_chains(self, output_dir, output_file, xx, yy, start, thin)
Modelling2D_swigregister = _CosmoBolognaLib.Modelling2D_swigregister
Modelling2D_swigregister(Modelling2D)

class STR_NC_data_model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_NC_data_model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_NC_data_model, name)
    __repr__ = _swig_repr
    __swig_setmethods__["isSnapshot"] = _CosmoBolognaLib.STR_NC_data_model_isSnapshot_set
    __swig_getmethods__["isSnapshot"] = _CosmoBolognaLib.STR_NC_data_model_isSnapshot_get
    if _newclass:
        isSnapshot = _swig_property(_CosmoBolognaLib.STR_NC_data_model_isSnapshot_get, _CosmoBolognaLib.STR_NC_data_model_isSnapshot_set)
    __swig_setmethods__["cosmology"] = _CosmoBolognaLib.STR_NC_data_model_cosmology_set
    __swig_getmethods__["cosmology"] = _CosmoBolognaLib.STR_NC_data_model_cosmology_get
    if _newclass:
        cosmology = _swig_property(_CosmoBolognaLib.STR_NC_data_model_cosmology_get, _CosmoBolognaLib.STR_NC_data_model_cosmology_set)
    __swig_setmethods__["Cpar"] = _CosmoBolognaLib.STR_NC_data_model_Cpar_set
    __swig_getmethods__["Cpar"] = _CosmoBolognaLib.STR_NC_data_model_Cpar_get
    if _newclass:
        Cpar = _swig_property(_CosmoBolognaLib.STR_NC_data_model_Cpar_get, _CosmoBolognaLib.STR_NC_data_model_Cpar_set)
    __swig_setmethods__["redshift"] = _CosmoBolognaLib.STR_NC_data_model_redshift_set
    __swig_getmethods__["redshift"] = _CosmoBolognaLib.STR_NC_data_model_redshift_get
    if _newclass:
        redshift = _swig_property(_CosmoBolognaLib.STR_NC_data_model_redshift_get, _CosmoBolognaLib.STR_NC_data_model_redshift_set)
    __swig_setmethods__["method_Pk"] = _CosmoBolognaLib.STR_NC_data_model_method_Pk_set
    __swig_getmethods__["method_Pk"] = _CosmoBolognaLib.STR_NC_data_model_method_Pk_get
    if _newclass:
        method_Pk = _swig_property(_CosmoBolognaLib.STR_NC_data_model_method_Pk_get, _CosmoBolognaLib.STR_NC_data_model_method_Pk_set)
    __swig_setmethods__["NL"] = _CosmoBolognaLib.STR_NC_data_model_NL_set
    __swig_getmethods__["NL"] = _CosmoBolognaLib.STR_NC_data_model_NL_get
    if _newclass:
        NL = _swig_property(_CosmoBolognaLib.STR_NC_data_model_NL_get, _CosmoBolognaLib.STR_NC_data_model_NL_set)
    __swig_setmethods__["k_min"] = _CosmoBolognaLib.STR_NC_data_model_k_min_set
    __swig_getmethods__["k_min"] = _CosmoBolognaLib.STR_NC_data_model_k_min_get
    if _newclass:
        k_min = _swig_property(_CosmoBolognaLib.STR_NC_data_model_k_min_get, _CosmoBolognaLib.STR_NC_data_model_k_min_set)
    __swig_setmethods__["k_max"] = _CosmoBolognaLib.STR_NC_data_model_k_max_set
    __swig_getmethods__["k_max"] = _CosmoBolognaLib.STR_NC_data_model_k_max_get
    if _newclass:
        k_max = _swig_property(_CosmoBolognaLib.STR_NC_data_model_k_max_get, _CosmoBolognaLib.STR_NC_data_model_k_max_set)
    __swig_setmethods__["step"] = _CosmoBolognaLib.STR_NC_data_model_step_set
    __swig_getmethods__["step"] = _CosmoBolognaLib.STR_NC_data_model_step_get
    if _newclass:
        step = _swig_property(_CosmoBolognaLib.STR_NC_data_model_step_get, _CosmoBolognaLib.STR_NC_data_model_step_set)
    __swig_setmethods__["kk"] = _CosmoBolognaLib.STR_NC_data_model_kk_set
    __swig_getmethods__["kk"] = _CosmoBolognaLib.STR_NC_data_model_kk_get
    if _newclass:
        kk = _swig_property(_CosmoBolognaLib.STR_NC_data_model_kk_get, _CosmoBolognaLib.STR_NC_data_model_kk_set)
    __swig_setmethods__["output_dir"] = _CosmoBolognaLib.STR_NC_data_model_output_dir_set
    __swig_getmethods__["output_dir"] = _CosmoBolognaLib.STR_NC_data_model_output_dir_get
    if _newclass:
        output_dir = _swig_property(_CosmoBolognaLib.STR_NC_data_model_output_dir_get, _CosmoBolognaLib.STR_NC_data_model_output_dir_set)
    __swig_setmethods__["output_root"] = _CosmoBolognaLib.STR_NC_data_model_output_root_set
    __swig_getmethods__["output_root"] = _CosmoBolognaLib.STR_NC_data_model_output_root_get
    if _newclass:
        output_root = _swig_property(_CosmoBolognaLib.STR_NC_data_model_output_root_get, _CosmoBolognaLib.STR_NC_data_model_output_root_set)
    __swig_setmethods__["norm"] = _CosmoBolognaLib.STR_NC_data_model_norm_set
    __swig_getmethods__["norm"] = _CosmoBolognaLib.STR_NC_data_model_norm_get
    if _newclass:
        norm = _swig_property(_CosmoBolognaLib.STR_NC_data_model_norm_get, _CosmoBolognaLib.STR_NC_data_model_norm_set)
    __swig_setmethods__["file_par"] = _CosmoBolognaLib.STR_NC_data_model_file_par_set
    __swig_getmethods__["file_par"] = _CosmoBolognaLib.STR_NC_data_model_file_par_get
    if _newclass:
        file_par = _swig_property(_CosmoBolognaLib.STR_NC_data_model_file_par_get, _CosmoBolognaLib.STR_NC_data_model_file_par_set)
    __swig_setmethods__["prec"] = _CosmoBolognaLib.STR_NC_data_model_prec_set
    __swig_getmethods__["prec"] = _CosmoBolognaLib.STR_NC_data_model_prec_get
    if _newclass:
        prec = _swig_property(_CosmoBolognaLib.STR_NC_data_model_prec_get, _CosmoBolognaLib.STR_NC_data_model_prec_set)
    __swig_setmethods__["Delta"] = _CosmoBolognaLib.STR_NC_data_model_Delta_set
    __swig_getmethods__["Delta"] = _CosmoBolognaLib.STR_NC_data_model_Delta_get
    if _newclass:
        Delta = _swig_property(_CosmoBolognaLib.STR_NC_data_model_Delta_get, _CosmoBolognaLib.STR_NC_data_model_Delta_set)
    __swig_setmethods__["isDelta_Vir"] = _CosmoBolognaLib.STR_NC_data_model_isDelta_Vir_set
    __swig_getmethods__["isDelta_Vir"] = _CosmoBolognaLib.STR_NC_data_model_isDelta_Vir_get
    if _newclass:
        isDelta_Vir = _swig_property(_CosmoBolognaLib.STR_NC_data_model_isDelta_Vir_get, _CosmoBolognaLib.STR_NC_data_model_isDelta_Vir_set)
    __swig_setmethods__["model_MF"] = _CosmoBolognaLib.STR_NC_data_model_model_MF_set
    __swig_getmethods__["model_MF"] = _CosmoBolognaLib.STR_NC_data_model_model_MF_get
    if _newclass:
        model_MF = _swig_property(_CosmoBolognaLib.STR_NC_data_model_model_MF_get, _CosmoBolognaLib.STR_NC_data_model_model_MF_set)
    __swig_setmethods__["z_min"] = _CosmoBolognaLib.STR_NC_data_model_z_min_set
    __swig_getmethods__["z_min"] = _CosmoBolognaLib.STR_NC_data_model_z_min_get
    if _newclass:
        z_min = _swig_property(_CosmoBolognaLib.STR_NC_data_model_z_min_get, _CosmoBolognaLib.STR_NC_data_model_z_min_set)
    __swig_setmethods__["z_max"] = _CosmoBolognaLib.STR_NC_data_model_z_max_set
    __swig_getmethods__["z_max"] = _CosmoBolognaLib.STR_NC_data_model_z_max_get
    if _newclass:
        z_max = _swig_property(_CosmoBolognaLib.STR_NC_data_model_z_max_get, _CosmoBolognaLib.STR_NC_data_model_z_max_set)
    __swig_setmethods__["z_step"] = _CosmoBolognaLib.STR_NC_data_model_z_step_set
    __swig_getmethods__["z_step"] = _CosmoBolognaLib.STR_NC_data_model_z_step_get
    if _newclass:
        z_step = _swig_property(_CosmoBolognaLib.STR_NC_data_model_z_step_get, _CosmoBolognaLib.STR_NC_data_model_z_step_set)
    __swig_setmethods__["z_vector"] = _CosmoBolognaLib.STR_NC_data_model_z_vector_set
    __swig_getmethods__["z_vector"] = _CosmoBolognaLib.STR_NC_data_model_z_vector_get
    if _newclass:
        z_vector = _swig_property(_CosmoBolognaLib.STR_NC_data_model_z_vector_get, _CosmoBolognaLib.STR_NC_data_model_z_vector_set)
    __swig_setmethods__["Mass_min"] = _CosmoBolognaLib.STR_NC_data_model_Mass_min_set
    __swig_getmethods__["Mass_min"] = _CosmoBolognaLib.STR_NC_data_model_Mass_min_get
    if _newclass:
        Mass_min = _swig_property(_CosmoBolognaLib.STR_NC_data_model_Mass_min_get, _CosmoBolognaLib.STR_NC_data_model_Mass_min_set)
    __swig_setmethods__["Mass_max"] = _CosmoBolognaLib.STR_NC_data_model_Mass_max_set
    __swig_getmethods__["Mass_max"] = _CosmoBolognaLib.STR_NC_data_model_Mass_max_get
    if _newclass:
        Mass_max = _swig_property(_CosmoBolognaLib.STR_NC_data_model_Mass_max_get, _CosmoBolognaLib.STR_NC_data_model_Mass_max_set)
    __swig_setmethods__["Mass_step"] = _CosmoBolognaLib.STR_NC_data_model_Mass_step_set
    __swig_getmethods__["Mass_step"] = _CosmoBolognaLib.STR_NC_data_model_Mass_step_get
    if _newclass:
        Mass_step = _swig_property(_CosmoBolognaLib.STR_NC_data_model_Mass_step_get, _CosmoBolognaLib.STR_NC_data_model_Mass_step_set)
    __swig_setmethods__["Mass_vector"] = _CosmoBolognaLib.STR_NC_data_model_Mass_vector_set
    __swig_getmethods__["Mass_vector"] = _CosmoBolognaLib.STR_NC_data_model_Mass_vector_get
    if _newclass:
        Mass_vector = _swig_property(_CosmoBolognaLib.STR_NC_data_model_Mass_vector_get, _CosmoBolognaLib.STR_NC_data_model_Mass_vector_set)
    __swig_setmethods__["area_rad"] = _CosmoBolognaLib.STR_NC_data_model_area_rad_set
    __swig_getmethods__["area_rad"] = _CosmoBolognaLib.STR_NC_data_model_area_rad_get
    if _newclass:
        area_rad = _swig_property(_CosmoBolognaLib.STR_NC_data_model_area_rad_get, _CosmoBolognaLib.STR_NC_data_model_area_rad_set)
    __swig_setmethods__["Volume"] = _CosmoBolognaLib.STR_NC_data_model_Volume_set
    __swig_getmethods__["Volume"] = _CosmoBolognaLib.STR_NC_data_model_Volume_get
    if _newclass:
        Volume = _swig_property(_CosmoBolognaLib.STR_NC_data_model_Volume_get, _CosmoBolognaLib.STR_NC_data_model_Volume_set)
    __swig_setmethods__["use_SF"] = _CosmoBolognaLib.STR_NC_data_model_use_SF_set
    __swig_getmethods__["use_SF"] = _CosmoBolognaLib.STR_NC_data_model_use_SF_get
    if _newclass:
        use_SF = _swig_property(_CosmoBolognaLib.STR_NC_data_model_use_SF_get, _CosmoBolognaLib.STR_NC_data_model_use_SF_set)
    __swig_setmethods__["interp_SelectionFunction"] = _CosmoBolognaLib.STR_NC_data_model_interp_SelectionFunction_set
    __swig_getmethods__["interp_SelectionFunction"] = _CosmoBolognaLib.STR_NC_data_model_interp_SelectionFunction_get
    if _newclass:
        interp_SelectionFunction = _swig_property(_CosmoBolognaLib.STR_NC_data_model_interp_SelectionFunction_get, _CosmoBolognaLib.STR_NC_data_model_interp_SelectionFunction_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_NC_data_model()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_NC_data_model
    __del__ = lambda self: None
STR_NC_data_model_swigregister = _CosmoBolognaLib.STR_NC_data_model_swigregister
STR_NC_data_model_swigregister(STR_NC_data_model)


def Filter_sigmaR(kk, radius):
    return _CosmoBolognaLib.Filter_sigmaR(kk, radius)
Filter_sigmaR = _CosmoBolognaLib.Filter_sigmaR

def Filter_dsigmaR(kk, radius):
    return _CosmoBolognaLib.Filter_dsigmaR(kk, radius)
Filter_dsigmaR = _CosmoBolognaLib.Filter_dsigmaR

def sigmaM_dlnsigmaM(*args):
    return _CosmoBolognaLib.sigmaM_dlnsigmaM(*args)
sigmaM_dlnsigmaM = _CosmoBolognaLib.sigmaM_dlnsigmaM

def mass_function(*args):
    return _CosmoBolognaLib.mass_function(*args)
mass_function = _CosmoBolognaLib.mass_function

def number_counts(redshift_min, redshift_max, Mass_min, Mass_max, cosmology, Area, model_MF, Delta, isDelta_vir, interp_sigmaM, interp_DlnsigmaM, npt_redshift=10, npt_mass=10):
    return _CosmoBolognaLib.number_counts(redshift_min, redshift_max, Mass_min, Mass_max, cosmology, Area, model_MF, Delta, isDelta_vir, interp_sigmaM, interp_DlnsigmaM, npt_redshift, npt_mass)
number_counts = _CosmoBolognaLib.number_counts

def number_density_redshift(redshift, inputs, parameter):
    return _CosmoBolognaLib.number_density_redshift(redshift, inputs, parameter)
number_density_redshift = _CosmoBolognaLib.number_density_redshift

def number_counts_redshift(redshift, inputs, parameter):
    return _CosmoBolognaLib.number_counts_redshift(redshift, inputs, parameter)
number_counts_redshift = _CosmoBolognaLib.number_counts_redshift

def mass_function_mass(mass, inputs, parameter):
    return _CosmoBolognaLib.mass_function_mass(mass, inputs, parameter)
mass_function_mass = _CosmoBolognaLib.mass_function_mass

def number_density_mass(mass, inputs, parameter):
    return _CosmoBolognaLib.number_density_mass(mass, inputs, parameter)
number_density_mass = _CosmoBolognaLib.number_density_mass

def number_counts_mass(mass, inputs, parameter):
    return _CosmoBolognaLib.number_counts_mass(mass, inputs, parameter)
number_counts_mass = _CosmoBolognaLib.number_counts_mass

def number_counts_mass_snapshot(mass, inputs, parameter):
    return _CosmoBolognaLib.number_counts_mass_snapshot(mass, inputs, parameter)
number_counts_mass_snapshot = _CosmoBolognaLib.number_counts_mass_snapshot

def mass_function_mass_redshift(redshift, mass, inputs, parameter):
    return _CosmoBolognaLib.mass_function_mass_redshift(redshift, mass, inputs, parameter)
mass_function_mass_redshift = _CosmoBolognaLib.mass_function_mass_redshift

def number_density_mass_redshift(redshift, mass, inputs, parameter):
    return _CosmoBolognaLib.number_density_mass_redshift(redshift, mass, inputs, parameter)
number_density_mass_redshift = _CosmoBolognaLib.number_density_mass_redshift

def number_counts_mass_redshift(redshift, mass, inputs, parameter):
    return _CosmoBolognaLib.number_counts_mass_redshift(redshift, mass, inputs, parameter)
number_counts_mass_redshift = _CosmoBolognaLib.number_counts_mass_redshift
class Modelling_NumberCounts(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modelling_NumberCounts, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Modelling_NumberCounts, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Modelling_NumberCounts(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Modelling_NumberCounts
    __del__ = lambda self: None

    def data_model(self):
        return _CosmoBolognaLib.Modelling_NumberCounts_data_model(self)

    def set_data_model(self, *args):
        return _CosmoBolognaLib.Modelling_NumberCounts_set_data_model(self, *args)

    def set_data_model_snapshot(self, *args):
        return _CosmoBolognaLib.Modelling_NumberCounts_set_data_model_snapshot(self, *args)
Modelling_NumberCounts_swigregister = _CosmoBolognaLib.Modelling_NumberCounts_swigregister
Modelling_NumberCounts_swigregister(Modelling_NumberCounts)

class Modelling_NumberCounts1D(Modelling1D, Modelling_NumberCounts):
    __swig_setmethods__ = {}
    for _s in [Modelling1D, Modelling_NumberCounts]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modelling_NumberCounts1D, name, value)
    __swig_getmethods__ = {}
    for _s in [Modelling1D, Modelling_NumberCounts]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Modelling_NumberCounts1D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Modelling_NumberCounts1D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Modelling_NumberCounts1D
    __del__ = lambda self: None
Modelling_NumberCounts1D_swigregister = _CosmoBolognaLib.Modelling_NumberCounts1D_swigregister
Modelling_NumberCounts1D_swigregister(Modelling_NumberCounts1D)

class Modelling_NumberCounts2D(Modelling_NumberCounts, Modelling2D):
    __swig_setmethods__ = {}
    for _s in [Modelling_NumberCounts, Modelling2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modelling_NumberCounts2D, name, value)
    __swig_getmethods__ = {}
    for _s in [Modelling_NumberCounts, Modelling2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Modelling_NumberCounts2D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Modelling_NumberCounts2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Modelling_NumberCounts2D
    __del__ = lambda self: None
Modelling_NumberCounts2D_swigregister = _CosmoBolognaLib.Modelling_NumberCounts2D_swigregister
Modelling_NumberCounts2D_swigregister(Modelling_NumberCounts2D)

class Modelling_NumberCounts1D_Redshift(Modelling_NumberCounts1D):
    __swig_setmethods__ = {}
    for _s in [Modelling_NumberCounts1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modelling_NumberCounts1D_Redshift, name, value)
    __swig_getmethods__ = {}
    for _s in [Modelling_NumberCounts1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Modelling_NumberCounts1D_Redshift, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Modelling_NumberCounts1D_Redshift(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Modelling_NumberCounts1D_Redshift
    __del__ = lambda self: None

    def set_model_NumberCounts_cosmology(self, *args):
        return _CosmoBolognaLib.Modelling_NumberCounts1D_Redshift_set_model_NumberCounts_cosmology(self, *args)
Modelling_NumberCounts1D_Redshift_swigregister = _CosmoBolognaLib.Modelling_NumberCounts1D_Redshift_swigregister
Modelling_NumberCounts1D_Redshift_swigregister(Modelling_NumberCounts1D_Redshift)

class Modelling_NumberCounts1D_Mass(Modelling_NumberCounts1D):
    __swig_setmethods__ = {}
    for _s in [Modelling_NumberCounts1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modelling_NumberCounts1D_Mass, name, value)
    __swig_getmethods__ = {}
    for _s in [Modelling_NumberCounts1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Modelling_NumberCounts1D_Mass, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Modelling_NumberCounts1D_Mass(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Modelling_NumberCounts1D_Mass
    __del__ = lambda self: None

    def set_data_model_snapshot(self, *args):
        return _CosmoBolognaLib.Modelling_NumberCounts1D_Mass_set_data_model_snapshot(self, *args)

    def set_model_NumberCounts_cosmology(self, *args):
        return _CosmoBolognaLib.Modelling_NumberCounts1D_Mass_set_model_NumberCounts_cosmology(self, *args)
Modelling_NumberCounts1D_Mass_swigregister = _CosmoBolognaLib.Modelling_NumberCounts1D_Mass_swigregister
Modelling_NumberCounts1D_Mass_swigregister(Modelling_NumberCounts1D_Mass)

class Modelling_NumberCounts2D_RedshiftMass(Modelling_NumberCounts2D):
    __swig_setmethods__ = {}
    for _s in [Modelling_NumberCounts2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modelling_NumberCounts2D_RedshiftMass, name, value)
    __swig_getmethods__ = {}
    for _s in [Modelling_NumberCounts2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Modelling_NumberCounts2D_RedshiftMass, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Modelling_NumberCounts2D_RedshiftMass(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Modelling_NumberCounts2D_RedshiftMass
    __del__ = lambda self: None

    def set_model_NumberCounts_cosmology(self, *args):
        return _CosmoBolognaLib.Modelling_NumberCounts2D_RedshiftMass_set_model_NumberCounts_cosmology(self, *args)
Modelling_NumberCounts2D_RedshiftMass_swigregister = _CosmoBolognaLib.Modelling_NumberCounts2D_RedshiftMass_swigregister
Modelling_NumberCounts2D_RedshiftMass_swigregister(Modelling_NumberCounts2D_RedshiftMass)

class STR_data_HOD(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_data_HOD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_data_HOD, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cosmology"] = _CosmoBolognaLib.STR_data_HOD_cosmology_set
    __swig_getmethods__["cosmology"] = _CosmoBolognaLib.STR_data_HOD_cosmology_get
    if _newclass:
        cosmology = _swig_property(_CosmoBolognaLib.STR_data_HOD_cosmology_get, _CosmoBolognaLib.STR_data_HOD_cosmology_set)
    __swig_setmethods__["redshift"] = _CosmoBolognaLib.STR_data_HOD_redshift_set
    __swig_getmethods__["redshift"] = _CosmoBolognaLib.STR_data_HOD_redshift_get
    if _newclass:
        redshift = _swig_property(_CosmoBolognaLib.STR_data_HOD_redshift_get, _CosmoBolognaLib.STR_data_HOD_redshift_set)
    __swig_setmethods__["model_MF"] = _CosmoBolognaLib.STR_data_HOD_model_MF_set
    __swig_getmethods__["model_MF"] = _CosmoBolognaLib.STR_data_HOD_model_MF_get
    if _newclass:
        model_MF = _swig_property(_CosmoBolognaLib.STR_data_HOD_model_MF_get, _CosmoBolognaLib.STR_data_HOD_model_MF_set)
    __swig_setmethods__["model_bias"] = _CosmoBolognaLib.STR_data_HOD_model_bias_set
    __swig_getmethods__["model_bias"] = _CosmoBolognaLib.STR_data_HOD_model_bias_get
    if _newclass:
        model_bias = _swig_property(_CosmoBolognaLib.STR_data_HOD_model_bias_get, _CosmoBolognaLib.STR_data_HOD_model_bias_set)
    __swig_setmethods__["Mh_min"] = _CosmoBolognaLib.STR_data_HOD_Mh_min_set
    __swig_getmethods__["Mh_min"] = _CosmoBolognaLib.STR_data_HOD_Mh_min_get
    if _newclass:
        Mh_min = _swig_property(_CosmoBolognaLib.STR_data_HOD_Mh_min_get, _CosmoBolognaLib.STR_data_HOD_Mh_min_set)
    __swig_setmethods__["Mh_max"] = _CosmoBolognaLib.STR_data_HOD_Mh_max_set
    __swig_getmethods__["Mh_max"] = _CosmoBolognaLib.STR_data_HOD_Mh_max_get
    if _newclass:
        Mh_max = _swig_property(_CosmoBolognaLib.STR_data_HOD_Mh_max_get, _CosmoBolognaLib.STR_data_HOD_Mh_max_set)
    __swig_setmethods__["pi_max"] = _CosmoBolognaLib.STR_data_HOD_pi_max_set
    __swig_getmethods__["pi_max"] = _CosmoBolognaLib.STR_data_HOD_pi_max_get
    if _newclass:
        pi_max = _swig_property(_CosmoBolognaLib.STR_data_HOD_pi_max_get, _CosmoBolognaLib.STR_data_HOD_pi_max_set)
    __swig_setmethods__["r_max_int"] = _CosmoBolognaLib.STR_data_HOD_r_max_int_set
    __swig_getmethods__["r_max_int"] = _CosmoBolognaLib.STR_data_HOD_r_max_int_get
    if _newclass:
        r_max_int = _swig_property(_CosmoBolognaLib.STR_data_HOD_r_max_int_get, _CosmoBolognaLib.STR_data_HOD_r_max_int_set)
    __swig_setmethods__["r_min"] = _CosmoBolognaLib.STR_data_HOD_r_min_set
    __swig_getmethods__["r_min"] = _CosmoBolognaLib.STR_data_HOD_r_min_get
    if _newclass:
        r_min = _swig_property(_CosmoBolognaLib.STR_data_HOD_r_min_get, _CosmoBolognaLib.STR_data_HOD_r_min_set)
    __swig_setmethods__["r_max"] = _CosmoBolognaLib.STR_data_HOD_r_max_set
    __swig_getmethods__["r_max"] = _CosmoBolognaLib.STR_data_HOD_r_max_get
    if _newclass:
        r_max = _swig_property(_CosmoBolognaLib.STR_data_HOD_r_max_get, _CosmoBolognaLib.STR_data_HOD_r_max_set)
    __swig_setmethods__["k_min"] = _CosmoBolognaLib.STR_data_HOD_k_min_set
    __swig_getmethods__["k_min"] = _CosmoBolognaLib.STR_data_HOD_k_min_get
    if _newclass:
        k_min = _swig_property(_CosmoBolognaLib.STR_data_HOD_k_min_get, _CosmoBolognaLib.STR_data_HOD_k_min_set)
    __swig_setmethods__["k_max"] = _CosmoBolognaLib.STR_data_HOD_k_max_set
    __swig_getmethods__["k_max"] = _CosmoBolognaLib.STR_data_HOD_k_max_get
    if _newclass:
        k_max = _swig_property(_CosmoBolognaLib.STR_data_HOD_k_max_get, _CosmoBolognaLib.STR_data_HOD_k_max_set)
    __swig_setmethods__["step"] = _CosmoBolognaLib.STR_data_HOD_step_set
    __swig_getmethods__["step"] = _CosmoBolognaLib.STR_data_HOD_step_get
    if _newclass:
        step = _swig_property(_CosmoBolognaLib.STR_data_HOD_step_get, _CosmoBolognaLib.STR_data_HOD_step_set)
    __swig_setmethods__["kkvec"] = _CosmoBolognaLib.STR_data_HOD_kkvec_set
    __swig_getmethods__["kkvec"] = _CosmoBolognaLib.STR_data_HOD_kkvec_get
    if _newclass:
        kkvec = _swig_property(_CosmoBolognaLib.STR_data_HOD_kkvec_get, _CosmoBolognaLib.STR_data_HOD_kkvec_set)
    __swig_setmethods__["method_Pk"] = _CosmoBolognaLib.STR_data_HOD_method_Pk_set
    __swig_getmethods__["method_Pk"] = _CosmoBolognaLib.STR_data_HOD_method_Pk_get
    if _newclass:
        method_Pk = _swig_property(_CosmoBolognaLib.STR_data_HOD_method_Pk_get, _CosmoBolognaLib.STR_data_HOD_method_Pk_set)
    __swig_setmethods__["NL"] = _CosmoBolognaLib.STR_data_HOD_NL_set
    __swig_getmethods__["NL"] = _CosmoBolognaLib.STR_data_HOD_NL_get
    if _newclass:
        NL = _swig_property(_CosmoBolognaLib.STR_data_HOD_NL_get, _CosmoBolognaLib.STR_data_HOD_NL_set)
    __swig_setmethods__["output_root"] = _CosmoBolognaLib.STR_data_HOD_output_root_set
    __swig_getmethods__["output_root"] = _CosmoBolognaLib.STR_data_HOD_output_root_get
    if _newclass:
        output_root = _swig_property(_CosmoBolognaLib.STR_data_HOD_output_root_get, _CosmoBolognaLib.STR_data_HOD_output_root_set)
    __swig_setmethods__["Delta"] = _CosmoBolognaLib.STR_data_HOD_Delta_set
    __swig_getmethods__["Delta"] = _CosmoBolognaLib.STR_data_HOD_Delta_get
    if _newclass:
        Delta = _swig_property(_CosmoBolognaLib.STR_data_HOD_Delta_get, _CosmoBolognaLib.STR_data_HOD_Delta_set)
    __swig_setmethods__["kk"] = _CosmoBolognaLib.STR_data_HOD_kk_set
    __swig_getmethods__["kk"] = _CosmoBolognaLib.STR_data_HOD_kk_get
    if _newclass:
        kk = _swig_property(_CosmoBolognaLib.STR_data_HOD_kk_get, _CosmoBolognaLib.STR_data_HOD_kk_set)
    __swig_setmethods__["interpType"] = _CosmoBolognaLib.STR_data_HOD_interpType_set
    __swig_getmethods__["interpType"] = _CosmoBolognaLib.STR_data_HOD_interpType_get
    if _newclass:
        interpType = _swig_property(_CosmoBolognaLib.STR_data_HOD_interpType_get, _CosmoBolognaLib.STR_data_HOD_interpType_set)
    __swig_setmethods__["norm"] = _CosmoBolognaLib.STR_data_HOD_norm_set
    __swig_getmethods__["norm"] = _CosmoBolognaLib.STR_data_HOD_norm_get
    if _newclass:
        norm = _swig_property(_CosmoBolognaLib.STR_data_HOD_norm_get, _CosmoBolognaLib.STR_data_HOD_norm_set)
    __swig_setmethods__["prec"] = _CosmoBolognaLib.STR_data_HOD_prec_set
    __swig_getmethods__["prec"] = _CosmoBolognaLib.STR_data_HOD_prec_get
    if _newclass:
        prec = _swig_property(_CosmoBolognaLib.STR_data_HOD_prec_get, _CosmoBolognaLib.STR_data_HOD_prec_set)
    __swig_setmethods__["input_file"] = _CosmoBolognaLib.STR_data_HOD_input_file_set
    __swig_getmethods__["input_file"] = _CosmoBolognaLib.STR_data_HOD_input_file_get
    if _newclass:
        input_file = _swig_property(_CosmoBolognaLib.STR_data_HOD_input_file_get, _CosmoBolognaLib.STR_data_HOD_input_file_set)
    __swig_setmethods__["is_parameter_file"] = _CosmoBolognaLib.STR_data_HOD_is_parameter_file_set
    __swig_getmethods__["is_parameter_file"] = _CosmoBolognaLib.STR_data_HOD_is_parameter_file_get
    if _newclass:
        is_parameter_file = _swig_property(_CosmoBolognaLib.STR_data_HOD_is_parameter_file_get, _CosmoBolognaLib.STR_data_HOD_is_parameter_file_set)
    __swig_setmethods__["model_cM"] = _CosmoBolognaLib.STR_data_HOD_model_cM_set
    __swig_getmethods__["model_cM"] = _CosmoBolognaLib.STR_data_HOD_model_cM_get
    if _newclass:
        model_cM = _swig_property(_CosmoBolognaLib.STR_data_HOD_model_cM_get, _CosmoBolognaLib.STR_data_HOD_model_cM_set)
    __swig_setmethods__["profile"] = _CosmoBolognaLib.STR_data_HOD_profile_set
    __swig_getmethods__["profile"] = _CosmoBolognaLib.STR_data_HOD_profile_get
    if _newclass:
        profile = _swig_property(_CosmoBolognaLib.STR_data_HOD_profile_get, _CosmoBolognaLib.STR_data_HOD_profile_set)
    __swig_setmethods__["halo_def"] = _CosmoBolognaLib.STR_data_HOD_halo_def_set
    __swig_getmethods__["halo_def"] = _CosmoBolognaLib.STR_data_HOD_halo_def_get
    if _newclass:
        halo_def = _swig_property(_CosmoBolognaLib.STR_data_HOD_halo_def_get, _CosmoBolognaLib.STR_data_HOD_halo_def_set)
    __swig_setmethods__["func_Pk"] = _CosmoBolognaLib.STR_data_HOD_func_Pk_set
    __swig_getmethods__["func_Pk"] = _CosmoBolognaLib.STR_data_HOD_func_Pk_get
    if _newclass:
        func_Pk = _swig_property(_CosmoBolognaLib.STR_data_HOD_func_Pk_get, _CosmoBolognaLib.STR_data_HOD_func_Pk_set)
    __swig_setmethods__["func_sigma"] = _CosmoBolognaLib.STR_data_HOD_func_sigma_set
    __swig_getmethods__["func_sigma"] = _CosmoBolognaLib.STR_data_HOD_func_sigma_get
    if _newclass:
        func_sigma = _swig_property(_CosmoBolognaLib.STR_data_HOD_func_sigma_get, _CosmoBolognaLib.STR_data_HOD_func_sigma_set)
    __swig_setmethods__["func_dlnsigma"] = _CosmoBolognaLib.STR_data_HOD_func_dlnsigma_set
    __swig_getmethods__["func_dlnsigma"] = _CosmoBolognaLib.STR_data_HOD_func_dlnsigma_get
    if _newclass:
        func_dlnsigma = _swig_property(_CosmoBolognaLib.STR_data_HOD_func_dlnsigma_get, _CosmoBolognaLib.STR_data_HOD_func_dlnsigma_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_data_HOD()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_data_HOD
    __del__ = lambda self: None
STR_data_HOD_swigregister = _CosmoBolognaLib.STR_data_HOD_swigregister
STR_data_HOD_swigregister(STR_data_HOD)


def xi0_BAO_sigmaNL(rad, inputs, parameter):
    return _CosmoBolognaLib.xi0_BAO_sigmaNL(rad, inputs, parameter)
xi0_BAO_sigmaNL = _CosmoBolognaLib.xi0_BAO_sigmaNL

def xi0_linear(rad, inputs, parameter):
    return _CosmoBolognaLib.xi0_linear(rad, inputs, parameter)
xi0_linear = _CosmoBolognaLib.xi0_linear

def xi0_linear_LinearPoint(rad, inputs, parameter):
    return _CosmoBolognaLib.xi0_linear_LinearPoint(rad, inputs, parameter)
xi0_linear_LinearPoint = _CosmoBolognaLib.xi0_linear_LinearPoint

def xi0_polynomial_LinearPoint(rad, inputs, parameter):
    return _CosmoBolognaLib.xi0_polynomial_LinearPoint(rad, inputs, parameter)
xi0_polynomial_LinearPoint = _CosmoBolognaLib.xi0_polynomial_LinearPoint

def xi0_linear_sigma8_bias(rad, inputs, parameter):
    return _CosmoBolognaLib.xi0_linear_sigma8_bias(rad, inputs, parameter)
xi0_linear_sigma8_bias = _CosmoBolognaLib.xi0_linear_sigma8_bias

def xi0_linear_cosmology(rad, inputs, parameter):
    return _CosmoBolognaLib.xi0_linear_cosmology(rad, inputs, parameter)
xi0_linear_cosmology = _CosmoBolognaLib.xi0_linear_cosmology

def xi0_damped_bias_sigmaz(rad, inputs, parameter):
    return _CosmoBolognaLib.xi0_damped_bias_sigmaz(rad, inputs, parameter)
xi0_damped_bias_sigmaz = _CosmoBolognaLib.xi0_damped_bias_sigmaz

def xi0_damped_scaling_relation_sigmaz(rad, inputs, parameter):
    return _CosmoBolognaLib.xi0_damped_scaling_relation_sigmaz(rad, inputs, parameter)
xi0_damped_scaling_relation_sigmaz = _CosmoBolognaLib.xi0_damped_scaling_relation_sigmaz

def xi0_linear_sigma8_clusters(rad, inputs, parameter):
    return _CosmoBolognaLib.xi0_linear_sigma8_clusters(rad, inputs, parameter)
xi0_linear_sigma8_clusters = _CosmoBolognaLib.xi0_linear_sigma8_clusters

def xi0_linear_one_cosmo_par_clusters(rad, inputs, parameter):
    return _CosmoBolognaLib.xi0_linear_one_cosmo_par_clusters(rad, inputs, parameter)
xi0_linear_one_cosmo_par_clusters = _CosmoBolognaLib.xi0_linear_one_cosmo_par_clusters

def xi0_linear_two_cosmo_pars_clusters(rad, inputs, parameter):
    return _CosmoBolognaLib.xi0_linear_two_cosmo_pars_clusters(rad, inputs, parameter)
xi0_linear_two_cosmo_pars_clusters = _CosmoBolognaLib.xi0_linear_two_cosmo_pars_clusters

def xi0_linear_cosmology_clusters(rad, inputs, parameter):
    return _CosmoBolognaLib.xi0_linear_cosmology_clusters(rad, inputs, parameter)
xi0_linear_cosmology_clusters = _CosmoBolognaLib.xi0_linear_cosmology_clusters

def xi0_linear_bias_cosmology(rad, inputs, parameter):
    return _CosmoBolognaLib.xi0_linear_bias_cosmology(rad, inputs, parameter)
xi0_linear_bias_cosmology = _CosmoBolognaLib.xi0_linear_bias_cosmology

def xi0_linear_cosmology_clusters_selection_function(rad, inputs, parameter):
    return _CosmoBolognaLib.xi0_linear_cosmology_clusters_selection_function(rad, inputs, parameter)
xi0_linear_cosmology_clusters_selection_function = _CosmoBolognaLib.xi0_linear_cosmology_clusters_selection_function

def Ncen(Mass, Mmin, sigmalgM):
    return _CosmoBolognaLib.Ncen(Mass, Mmin, sigmalgM)
Ncen = _CosmoBolognaLib.Ncen

def Nsat(Mass, Mmin, sigmalgM, M0, M1, alpha):
    return _CosmoBolognaLib.Nsat(Mass, Mmin, sigmalgM, M0, M1, alpha)
Nsat = _CosmoBolognaLib.Nsat

def Navg(Mass, Mmin, sigmalgM, M0, M1, alpha):
    return _CosmoBolognaLib.Navg(Mass, Mmin, sigmalgM, M0, M1, alpha)
Navg = _CosmoBolognaLib.Navg

def ng_integrand(mass, Mmin, sigmalgM, M0, M1, alpha, inputs):
    return _CosmoBolognaLib.ng_integrand(mass, Mmin, sigmalgM, M0, M1, alpha, inputs)
ng_integrand = _CosmoBolognaLib.ng_integrand

def ng(Mmin, sigmalgM, M0, M1, alpha, inputs):
    return _CosmoBolognaLib.ng(Mmin, sigmalgM, M0, M1, alpha, inputs)
ng = _CosmoBolognaLib.ng

def bias(Mmin, sigmalgM, M0, M1, alpha, inputs):
    return _CosmoBolognaLib.bias(Mmin, sigmalgM, M0, M1, alpha, inputs)
bias = _CosmoBolognaLib.bias

def NcNs(Mass, Mmin, sigmalgM, M0, M1, alpha):
    return _CosmoBolognaLib.NcNs(Mass, Mmin, sigmalgM, M0, M1, alpha)
NcNs = _CosmoBolognaLib.NcNs

def NsNs1(Mass, Mmin, sigmalgM, M0, M1, alpha):
    return _CosmoBolognaLib.NsNs1(Mass, Mmin, sigmalgM, M0, M1, alpha)
NsNs1 = _CosmoBolognaLib.NsNs1

def Pk_cs_numerator_integrand(mass, kk, inputs, parameter):
    return _CosmoBolognaLib.Pk_cs_numerator_integrand(mass, kk, inputs, parameter)
Pk_cs_numerator_integrand = _CosmoBolognaLib.Pk_cs_numerator_integrand

def Pk_cs(kk, inputs, parameter):
    return _CosmoBolognaLib.Pk_cs(kk, inputs, parameter)
Pk_cs = _CosmoBolognaLib.Pk_cs

def Pk_ss_numerator_integrand(mass, kk, inputs, parameter):
    return _CosmoBolognaLib.Pk_ss_numerator_integrand(mass, kk, inputs, parameter)
Pk_ss_numerator_integrand = _CosmoBolognaLib.Pk_ss_numerator_integrand

def Pk_ss(kk, inputs, parameter):
    return _CosmoBolognaLib.Pk_ss(kk, inputs, parameter)
Pk_ss = _CosmoBolognaLib.Pk_ss

def Pk_1halo(kk, inputs, parameter):
    return _CosmoBolognaLib.Pk_1halo(kk, inputs, parameter)
Pk_1halo = _CosmoBolognaLib.Pk_1halo

def Pk_2halo(kk, inputs, parameter):
    return _CosmoBolognaLib.Pk_2halo(kk, inputs, parameter)
Pk_2halo = _CosmoBolognaLib.Pk_2halo

def Pk_HOD(kk, inputs, parameter):
    return _CosmoBolognaLib.Pk_HOD(kk, inputs, parameter)
Pk_HOD = _CosmoBolognaLib.Pk_HOD

def xi_1halo(rad, inputs, parameter):
    return _CosmoBolognaLib.xi_1halo(rad, inputs, parameter)
xi_1halo = _CosmoBolognaLib.xi_1halo

def func_2halo(kk, inputs, parameter):
    return _CosmoBolognaLib.func_2halo(kk, inputs, parameter)
func_2halo = _CosmoBolognaLib.func_2halo

def xi_2halo(rad, inputs, parameter):
    return _CosmoBolognaLib.xi_2halo(rad, inputs, parameter)
xi_2halo = _CosmoBolognaLib.xi_2halo

def xi_HOD(rad, inputs, parameter):
    return _CosmoBolognaLib.xi_HOD(rad, inputs, parameter)
xi_HOD = _CosmoBolognaLib.xi_HOD

def xi_zspace(func, rp, pi, inputs, parameter):
    return _CosmoBolognaLib.xi_zspace(func, rp, pi, inputs, parameter)
xi_zspace = _CosmoBolognaLib.xi_zspace

def xi_1halo_zspace(rp, pi, inputs, parameter):
    return _CosmoBolognaLib.xi_1halo_zspace(rp, pi, inputs, parameter)
xi_1halo_zspace = _CosmoBolognaLib.xi_1halo_zspace

def xi_2halo_zspace(rp, pi, inputs, parameter):
    return _CosmoBolognaLib.xi_2halo_zspace(rp, pi, inputs, parameter)
xi_2halo_zspace = _CosmoBolognaLib.xi_2halo_zspace

def xi_HOD_zspace(rp, pi, inputs, parameter):
    return _CosmoBolognaLib.xi_HOD_zspace(rp, pi, inputs, parameter)
xi_HOD_zspace = _CosmoBolognaLib.xi_HOD_zspace

def xi2D_dispersionModel(rp, pi, inputs, parameter):
    return _CosmoBolognaLib.xi2D_dispersionModel(rp, pi, inputs, parameter)
xi2D_dispersionModel = _CosmoBolognaLib.xi2D_dispersionModel
class STR_data_model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_data_model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_data_model, name)
    __repr__ = _swig_repr
    __swig_setmethods__["poly_order"] = _CosmoBolognaLib.STR_data_model_poly_order_set
    __swig_getmethods__["poly_order"] = _CosmoBolognaLib.STR_data_model_poly_order_get
    if _newclass:
        poly_order = _swig_property(_CosmoBolognaLib.STR_data_model_poly_order_get, _CosmoBolognaLib.STR_data_model_poly_order_set)
    __swig_setmethods__["cosmology"] = _CosmoBolognaLib.STR_data_model_cosmology_set
    __swig_getmethods__["cosmology"] = _CosmoBolognaLib.STR_data_model_cosmology_get
    if _newclass:
        cosmology = _swig_property(_CosmoBolognaLib.STR_data_model_cosmology_get, _CosmoBolognaLib.STR_data_model_cosmology_set)
    __swig_setmethods__["test_cosmology"] = _CosmoBolognaLib.STR_data_model_test_cosmology_set
    __swig_getmethods__["test_cosmology"] = _CosmoBolognaLib.STR_data_model_test_cosmology_get
    if _newclass:
        test_cosmology = _swig_property(_CosmoBolognaLib.STR_data_model_test_cosmology_get, _CosmoBolognaLib.STR_data_model_test_cosmology_set)
    __swig_setmethods__["redshift"] = _CosmoBolognaLib.STR_data_model_redshift_set
    __swig_getmethods__["redshift"] = _CosmoBolognaLib.STR_data_model_redshift_get
    if _newclass:
        redshift = _swig_property(_CosmoBolognaLib.STR_data_model_redshift_get, _CosmoBolognaLib.STR_data_model_redshift_set)
    __swig_setmethods__["method_Pk"] = _CosmoBolognaLib.STR_data_model_method_Pk_set
    __swig_getmethods__["method_Pk"] = _CosmoBolognaLib.STR_data_model_method_Pk_get
    if _newclass:
        method_Pk = _swig_property(_CosmoBolognaLib.STR_data_model_method_Pk_get, _CosmoBolognaLib.STR_data_model_method_Pk_set)
    __swig_setmethods__["output_dir"] = _CosmoBolognaLib.STR_data_model_output_dir_set
    __swig_getmethods__["output_dir"] = _CosmoBolognaLib.STR_data_model_output_dir_get
    if _newclass:
        output_dir = _swig_property(_CosmoBolognaLib.STR_data_model_output_dir_get, _CosmoBolognaLib.STR_data_model_output_dir_set)
    __swig_setmethods__["output_root"] = _CosmoBolognaLib.STR_data_model_output_root_set
    __swig_getmethods__["output_root"] = _CosmoBolognaLib.STR_data_model_output_root_get
    if _newclass:
        output_root = _swig_property(_CosmoBolognaLib.STR_data_model_output_root_get, _CosmoBolognaLib.STR_data_model_output_root_set)
    __swig_setmethods__["NL"] = _CosmoBolognaLib.STR_data_model_NL_set
    __swig_getmethods__["NL"] = _CosmoBolognaLib.STR_data_model_NL_get
    if _newclass:
        NL = _swig_property(_CosmoBolognaLib.STR_data_model_NL_get, _CosmoBolognaLib.STR_data_model_NL_set)
    __swig_setmethods__["sigmaNL"] = _CosmoBolognaLib.STR_data_model_sigmaNL_set
    __swig_getmethods__["sigmaNL"] = _CosmoBolognaLib.STR_data_model_sigmaNL_get
    if _newclass:
        sigmaNL = _swig_property(_CosmoBolognaLib.STR_data_model_sigmaNL_get, _CosmoBolognaLib.STR_data_model_sigmaNL_set)
    __swig_setmethods__["sigmaNL_perp"] = _CosmoBolognaLib.STR_data_model_sigmaNL_perp_set
    __swig_getmethods__["sigmaNL_perp"] = _CosmoBolognaLib.STR_data_model_sigmaNL_perp_get
    if _newclass:
        sigmaNL_perp = _swig_property(_CosmoBolognaLib.STR_data_model_sigmaNL_perp_get, _CosmoBolognaLib.STR_data_model_sigmaNL_perp_set)
    __swig_setmethods__["sigmaNL_par"] = _CosmoBolognaLib.STR_data_model_sigmaNL_par_set
    __swig_getmethods__["sigmaNL_par"] = _CosmoBolognaLib.STR_data_model_sigmaNL_par_get
    if _newclass:
        sigmaNL_par = _swig_property(_CosmoBolognaLib.STR_data_model_sigmaNL_par_get, _CosmoBolognaLib.STR_data_model_sigmaNL_par_set)
    __swig_setmethods__["norm"] = _CosmoBolognaLib.STR_data_model_norm_set
    __swig_getmethods__["norm"] = _CosmoBolognaLib.STR_data_model_norm_get
    if _newclass:
        norm = _swig_property(_CosmoBolognaLib.STR_data_model_norm_get, _CosmoBolognaLib.STR_data_model_norm_set)
    __swig_setmethods__["k_min"] = _CosmoBolognaLib.STR_data_model_k_min_set
    __swig_getmethods__["k_min"] = _CosmoBolognaLib.STR_data_model_k_min_get
    if _newclass:
        k_min = _swig_property(_CosmoBolognaLib.STR_data_model_k_min_get, _CosmoBolognaLib.STR_data_model_k_min_set)
    __swig_setmethods__["k_max"] = _CosmoBolognaLib.STR_data_model_k_max_set
    __swig_getmethods__["k_max"] = _CosmoBolognaLib.STR_data_model_k_max_get
    if _newclass:
        k_max = _swig_property(_CosmoBolognaLib.STR_data_model_k_max_get, _CosmoBolognaLib.STR_data_model_k_max_set)
    __swig_setmethods__["aa"] = _CosmoBolognaLib.STR_data_model_aa_set
    __swig_getmethods__["aa"] = _CosmoBolognaLib.STR_data_model_aa_get
    if _newclass:
        aa = _swig_property(_CosmoBolognaLib.STR_data_model_aa_get, _CosmoBolognaLib.STR_data_model_aa_set)
    __swig_setmethods__["GSL"] = _CosmoBolognaLib.STR_data_model_GSL_set
    __swig_getmethods__["GSL"] = _CosmoBolognaLib.STR_data_model_GSL_get
    if _newclass:
        GSL = _swig_property(_CosmoBolognaLib.STR_data_model_GSL_get, _CosmoBolognaLib.STR_data_model_GSL_set)
    __swig_setmethods__["prec"] = _CosmoBolognaLib.STR_data_model_prec_set
    __swig_getmethods__["prec"] = _CosmoBolognaLib.STR_data_model_prec_get
    if _newclass:
        prec = _swig_property(_CosmoBolognaLib.STR_data_model_prec_get, _CosmoBolognaLib.STR_data_model_prec_set)
    __swig_setmethods__["file_par"] = _CosmoBolognaLib.STR_data_model_file_par_set
    __swig_getmethods__["file_par"] = _CosmoBolognaLib.STR_data_model_file_par_get
    if _newclass:
        file_par = _swig_property(_CosmoBolognaLib.STR_data_model_file_par_get, _CosmoBolognaLib.STR_data_model_file_par_set)
    __swig_setmethods__["func_xi"] = _CosmoBolognaLib.STR_data_model_func_xi_set
    __swig_getmethods__["func_xi"] = _CosmoBolognaLib.STR_data_model_func_xi_get
    if _newclass:
        func_xi = _swig_property(_CosmoBolognaLib.STR_data_model_func_xi_get, _CosmoBolognaLib.STR_data_model_func_xi_set)
    __swig_setmethods__["func_xi_"] = _CosmoBolognaLib.STR_data_model_func_xi__set
    __swig_getmethods__["func_xi_"] = _CosmoBolognaLib.STR_data_model_func_xi__get
    if _newclass:
        func_xi_ = _swig_property(_CosmoBolognaLib.STR_data_model_func_xi__get, _CosmoBolognaLib.STR_data_model_func_xi__set)
    __swig_setmethods__["func_xi__"] = _CosmoBolognaLib.STR_data_model_func_xi___set
    __swig_getmethods__["func_xi__"] = _CosmoBolognaLib.STR_data_model_func_xi___get
    if _newclass:
        func_xi__ = _swig_property(_CosmoBolognaLib.STR_data_model_func_xi___get, _CosmoBolognaLib.STR_data_model_func_xi___set)
    __swig_setmethods__["pi_max"] = _CosmoBolognaLib.STR_data_model_pi_max_set
    __swig_getmethods__["pi_max"] = _CosmoBolognaLib.STR_data_model_pi_max_get
    if _newclass:
        pi_max = _swig_property(_CosmoBolognaLib.STR_data_model_pi_max_get, _CosmoBolognaLib.STR_data_model_pi_max_set)
    __swig_setmethods__["r_min"] = _CosmoBolognaLib.STR_data_model_r_min_set
    __swig_getmethods__["r_min"] = _CosmoBolognaLib.STR_data_model_r_min_get
    if _newclass:
        r_min = _swig_property(_CosmoBolognaLib.STR_data_model_r_min_get, _CosmoBolognaLib.STR_data_model_r_min_set)
    __swig_setmethods__["r_max"] = _CosmoBolognaLib.STR_data_model_r_max_set
    __swig_getmethods__["r_max"] = _CosmoBolognaLib.STR_data_model_r_max_get
    if _newclass:
        r_max = _swig_property(_CosmoBolognaLib.STR_data_model_r_max_get, _CosmoBolognaLib.STR_data_model_r_max_set)
    __swig_setmethods__["step"] = _CosmoBolognaLib.STR_data_model_step_set
    __swig_getmethods__["step"] = _CosmoBolognaLib.STR_data_model_step_get
    if _newclass:
        step = _swig_property(_CosmoBolognaLib.STR_data_model_step_get, _CosmoBolognaLib.STR_data_model_step_set)
    __swig_setmethods__["linear_growth_rate_z"] = _CosmoBolognaLib.STR_data_model_linear_growth_rate_z_set
    __swig_getmethods__["linear_growth_rate_z"] = _CosmoBolognaLib.STR_data_model_linear_growth_rate_z_get
    if _newclass:
        linear_growth_rate_z = _swig_property(_CosmoBolognaLib.STR_data_model_linear_growth_rate_z_get, _CosmoBolognaLib.STR_data_model_linear_growth_rate_z_set)
    __swig_setmethods__["sigma8_z"] = _CosmoBolognaLib.STR_data_model_sigma8_z_set
    __swig_getmethods__["sigma8_z"] = _CosmoBolognaLib.STR_data_model_sigma8_z_get
    if _newclass:
        sigma8_z = _swig_property(_CosmoBolognaLib.STR_data_model_sigma8_z_get, _CosmoBolognaLib.STR_data_model_sigma8_z_set)
    __swig_setmethods__["var"] = _CosmoBolognaLib.STR_data_model_var_set
    __swig_getmethods__["var"] = _CosmoBolognaLib.STR_data_model_var_get
    if _newclass:
        var = _swig_property(_CosmoBolognaLib.STR_data_model_var_get, _CosmoBolognaLib.STR_data_model_var_set)
    __swig_setmethods__["Cpar"] = _CosmoBolognaLib.STR_data_model_Cpar_set
    __swig_getmethods__["Cpar"] = _CosmoBolognaLib.STR_data_model_Cpar_get
    if _newclass:
        Cpar = _swig_property(_CosmoBolognaLib.STR_data_model_Cpar_get, _CosmoBolognaLib.STR_data_model_Cpar_set)
    __swig_setmethods__["FV"] = _CosmoBolognaLib.STR_data_model_FV_set
    __swig_getmethods__["FV"] = _CosmoBolognaLib.STR_data_model_FV_get
    if _newclass:
        FV = _swig_property(_CosmoBolognaLib.STR_data_model_FV_get, _CosmoBolognaLib.STR_data_model_FV_set)
    __swig_setmethods__["bias_nl"] = _CosmoBolognaLib.STR_data_model_bias_nl_set
    __swig_getmethods__["bias_nl"] = _CosmoBolognaLib.STR_data_model_bias_nl_get
    if _newclass:
        bias_nl = _swig_property(_CosmoBolognaLib.STR_data_model_bias_nl_get, _CosmoBolognaLib.STR_data_model_bias_nl_set)
    __swig_setmethods__["bA"] = _CosmoBolognaLib.STR_data_model_bA_set
    __swig_getmethods__["bA"] = _CosmoBolognaLib.STR_data_model_bA_get
    if _newclass:
        bA = _swig_property(_CosmoBolognaLib.STR_data_model_bA_get, _CosmoBolognaLib.STR_data_model_bA_set)
    __swig_setmethods__["xiType"] = _CosmoBolognaLib.STR_data_model_xiType_set
    __swig_getmethods__["xiType"] = _CosmoBolognaLib.STR_data_model_xiType_get
    if _newclass:
        xiType = _swig_property(_CosmoBolognaLib.STR_data_model_xiType_get, _CosmoBolognaLib.STR_data_model_xiType_set)
    __swig_setmethods__["k_star"] = _CosmoBolognaLib.STR_data_model_k_star_set
    __swig_getmethods__["k_star"] = _CosmoBolognaLib.STR_data_model_k_star_get
    if _newclass:
        k_star = _swig_property(_CosmoBolognaLib.STR_data_model_k_star_get, _CosmoBolognaLib.STR_data_model_k_star_set)
    __swig_setmethods__["xiNL"] = _CosmoBolognaLib.STR_data_model_xiNL_set
    __swig_getmethods__["xiNL"] = _CosmoBolognaLib.STR_data_model_xiNL_get
    if _newclass:
        xiNL = _swig_property(_CosmoBolognaLib.STR_data_model_xiNL_get, _CosmoBolognaLib.STR_data_model_xiNL_set)
    __swig_setmethods__["v_min"] = _CosmoBolognaLib.STR_data_model_v_min_set
    __swig_getmethods__["v_min"] = _CosmoBolognaLib.STR_data_model_v_min_get
    if _newclass:
        v_min = _swig_property(_CosmoBolognaLib.STR_data_model_v_min_get, _CosmoBolognaLib.STR_data_model_v_min_set)
    __swig_setmethods__["v_max"] = _CosmoBolognaLib.STR_data_model_v_max_set
    __swig_getmethods__["v_max"] = _CosmoBolognaLib.STR_data_model_v_max_get
    if _newclass:
        v_max = _swig_property(_CosmoBolognaLib.STR_data_model_v_max_get, _CosmoBolognaLib.STR_data_model_v_max_set)
    __swig_setmethods__["step_v"] = _CosmoBolognaLib.STR_data_model_step_v_set
    __swig_getmethods__["step_v"] = _CosmoBolognaLib.STR_data_model_step_v_get
    if _newclass:
        step_v = _swig_property(_CosmoBolognaLib.STR_data_model_step_v_get, _CosmoBolognaLib.STR_data_model_step_v_set)
    __swig_setmethods__["xi_real_index"] = _CosmoBolognaLib.STR_data_model_xi_real_index_set
    __swig_getmethods__["xi_real_index"] = _CosmoBolognaLib.STR_data_model_xi_real_index_get
    if _newclass:
        xi_real_index = _swig_property(_CosmoBolognaLib.STR_data_model_xi_real_index_get, _CosmoBolognaLib.STR_data_model_xi_real_index_set)
    __swig_setmethods__["use_pole"] = _CosmoBolognaLib.STR_data_model_use_pole_set
    __swig_getmethods__["use_pole"] = _CosmoBolognaLib.STR_data_model_use_pole_get
    if _newclass:
        use_pole = _swig_property(_CosmoBolognaLib.STR_data_model_use_pole_get, _CosmoBolognaLib.STR_data_model_use_pole_set)
    __swig_setmethods__["dataset_order"] = _CosmoBolognaLib.STR_data_model_dataset_order_set
    __swig_getmethods__["dataset_order"] = _CosmoBolognaLib.STR_data_model_dataset_order_get
    if _newclass:
        dataset_order = _swig_property(_CosmoBolognaLib.STR_data_model_dataset_order_get, _CosmoBolognaLib.STR_data_model_dataset_order_set)
    __swig_setmethods__["nmultipoles"] = _CosmoBolognaLib.STR_data_model_nmultipoles_set
    __swig_getmethods__["nmultipoles"] = _CosmoBolognaLib.STR_data_model_nmultipoles_get
    if _newclass:
        nmultipoles = _swig_property(_CosmoBolognaLib.STR_data_model_nmultipoles_get, _CosmoBolognaLib.STR_data_model_nmultipoles_set)
    __swig_setmethods__["nwedges"] = _CosmoBolognaLib.STR_data_model_nwedges_set
    __swig_getmethods__["nwedges"] = _CosmoBolognaLib.STR_data_model_nwedges_get
    if _newclass:
        nwedges = _swig_property(_CosmoBolognaLib.STR_data_model_nwedges_get, _CosmoBolognaLib.STR_data_model_nwedges_set)
    __swig_setmethods__["kk"] = _CosmoBolognaLib.STR_data_model_kk_set
    __swig_getmethods__["kk"] = _CosmoBolognaLib.STR_data_model_kk_get
    if _newclass:
        kk = _swig_property(_CosmoBolognaLib.STR_data_model_kk_get, _CosmoBolognaLib.STR_data_model_kk_set)
    __swig_setmethods__["rr"] = _CosmoBolognaLib.STR_data_model_rr_set
    __swig_getmethods__["rr"] = _CosmoBolognaLib.STR_data_model_rr_get
    if _newclass:
        rr = _swig_property(_CosmoBolognaLib.STR_data_model_rr_get, _CosmoBolognaLib.STR_data_model_rr_set)
    __swig_setmethods__["func_Pk"] = _CosmoBolognaLib.STR_data_model_func_Pk_set
    __swig_getmethods__["func_Pk"] = _CosmoBolognaLib.STR_data_model_func_Pk_get
    if _newclass:
        func_Pk = _swig_property(_CosmoBolognaLib.STR_data_model_func_Pk_get, _CosmoBolognaLib.STR_data_model_func_Pk_set)
    __swig_setmethods__["func_Pk_NW"] = _CosmoBolognaLib.STR_data_model_func_Pk_NW_set
    __swig_getmethods__["func_Pk_NW"] = _CosmoBolognaLib.STR_data_model_func_Pk_NW_get
    if _newclass:
        func_Pk_NW = _swig_property(_CosmoBolognaLib.STR_data_model_func_Pk_NW_get, _CosmoBolognaLib.STR_data_model_func_Pk_NW_set)
    __swig_setmethods__["func_Pk1loop"] = _CosmoBolognaLib.STR_data_model_func_Pk1loop_set
    __swig_getmethods__["func_Pk1loop"] = _CosmoBolognaLib.STR_data_model_func_Pk1loop_get
    if _newclass:
        func_Pk1loop = _swig_property(_CosmoBolognaLib.STR_data_model_func_Pk1loop_get, _CosmoBolognaLib.STR_data_model_func_Pk1loop_set)
    __swig_setmethods__["func_multipoles"] = _CosmoBolognaLib.STR_data_model_func_multipoles_set
    __swig_getmethods__["func_multipoles"] = _CosmoBolognaLib.STR_data_model_func_multipoles_get
    if _newclass:
        func_multipoles = _swig_property(_CosmoBolognaLib.STR_data_model_func_multipoles_get, _CosmoBolognaLib.STR_data_model_func_multipoles_set)
    __swig_setmethods__["func_wedges"] = _CosmoBolognaLib.STR_data_model_func_wedges_set
    __swig_getmethods__["func_wedges"] = _CosmoBolognaLib.STR_data_model_func_wedges_get
    if _newclass:
        func_wedges = _swig_property(_CosmoBolognaLib.STR_data_model_func_wedges_get, _CosmoBolognaLib.STR_data_model_func_wedges_set)
    __swig_setmethods__["Pk_mu_model"] = _CosmoBolognaLib.STR_data_model_Pk_mu_model_set
    __swig_getmethods__["Pk_mu_model"] = _CosmoBolognaLib.STR_data_model_Pk_mu_model_get
    if _newclass:
        Pk_mu_model = _swig_property(_CosmoBolognaLib.STR_data_model_Pk_mu_model_get, _CosmoBolognaLib.STR_data_model_Pk_mu_model_set)
    __swig_setmethods__["bias"] = _CosmoBolognaLib.STR_data_model_bias_set
    __swig_getmethods__["bias"] = _CosmoBolognaLib.STR_data_model_bias_get
    if _newclass:
        bias = _swig_property(_CosmoBolognaLib.STR_data_model_bias_get, _CosmoBolognaLib.STR_data_model_bias_set)
    __swig_setmethods__["DVfid"] = _CosmoBolognaLib.STR_data_model_DVfid_set
    __swig_getmethods__["DVfid"] = _CosmoBolognaLib.STR_data_model_DVfid_get
    if _newclass:
        DVfid = _swig_property(_CosmoBolognaLib.STR_data_model_DVfid_get, _CosmoBolognaLib.STR_data_model_DVfid_set)
    __swig_setmethods__["DAfid"] = _CosmoBolognaLib.STR_data_model_DAfid_set
    __swig_getmethods__["DAfid"] = _CosmoBolognaLib.STR_data_model_DAfid_get
    if _newclass:
        DAfid = _swig_property(_CosmoBolognaLib.STR_data_model_DAfid_get, _CosmoBolognaLib.STR_data_model_DAfid_set)
    __swig_setmethods__["HHfid"] = _CosmoBolognaLib.STR_data_model_HHfid_set
    __swig_getmethods__["HHfid"] = _CosmoBolognaLib.STR_data_model_HHfid_get
    if _newclass:
        HHfid = _swig_property(_CosmoBolognaLib.STR_data_model_HHfid_get, _CosmoBolognaLib.STR_data_model_HHfid_set)
    __swig_setmethods__["Delta"] = _CosmoBolognaLib.STR_data_model_Delta_set
    __swig_getmethods__["Delta"] = _CosmoBolognaLib.STR_data_model_Delta_get
    if _newclass:
        Delta = _swig_property(_CosmoBolognaLib.STR_data_model_Delta_get, _CosmoBolognaLib.STR_data_model_Delta_set)
    __swig_setmethods__["isDelta_Vir"] = _CosmoBolognaLib.STR_data_model_isDelta_Vir_set
    __swig_getmethods__["isDelta_Vir"] = _CosmoBolognaLib.STR_data_model_isDelta_Vir_get
    if _newclass:
        isDelta_Vir = _swig_property(_CosmoBolognaLib.STR_data_model_isDelta_Vir_get, _CosmoBolognaLib.STR_data_model_isDelta_Vir_set)
    __swig_setmethods__["gau_ran"] = _CosmoBolognaLib.STR_data_model_gau_ran_set
    __swig_getmethods__["gau_ran"] = _CosmoBolognaLib.STR_data_model_gau_ran_get
    if _newclass:
        gau_ran = _swig_property(_CosmoBolognaLib.STR_data_model_gau_ran_get, _CosmoBolognaLib.STR_data_model_gau_ran_set)
    __swig_setmethods__["cluster_mass_proxy"] = _CosmoBolognaLib.STR_data_model_cluster_mass_proxy_set
    __swig_getmethods__["cluster_mass_proxy"] = _CosmoBolognaLib.STR_data_model_cluster_mass_proxy_get
    if _newclass:
        cluster_mass_proxy = _swig_property(_CosmoBolognaLib.STR_data_model_cluster_mass_proxy_get, _CosmoBolognaLib.STR_data_model_cluster_mass_proxy_set)
    __swig_setmethods__["cluster_mass_proxy_error"] = _CosmoBolognaLib.STR_data_model_cluster_mass_proxy_error_set
    __swig_getmethods__["cluster_mass_proxy_error"] = _CosmoBolognaLib.STR_data_model_cluster_mass_proxy_error_get
    if _newclass:
        cluster_mass_proxy_error = _swig_property(_CosmoBolognaLib.STR_data_model_cluster_mass_proxy_error_get, _CosmoBolognaLib.STR_data_model_cluster_mass_proxy_error_set)
    __swig_setmethods__["model_MF"] = _CosmoBolognaLib.STR_data_model_model_MF_set
    __swig_getmethods__["model_MF"] = _CosmoBolognaLib.STR_data_model_model_MF_get
    if _newclass:
        model_MF = _swig_property(_CosmoBolognaLib.STR_data_model_model_MF_get, _CosmoBolognaLib.STR_data_model_model_MF_set)
    __swig_setmethods__["model_bias"] = _CosmoBolognaLib.STR_data_model_model_bias_set
    __swig_getmethods__["model_bias"] = _CosmoBolognaLib.STR_data_model_model_bias_get
    if _newclass:
        model_bias = _swig_property(_CosmoBolognaLib.STR_data_model_model_bias_get, _CosmoBolognaLib.STR_data_model_model_bias_set)
    __swig_setmethods__["meanType"] = _CosmoBolognaLib.STR_data_model_meanType_set
    __swig_getmethods__["meanType"] = _CosmoBolognaLib.STR_data_model_meanType_get
    if _newclass:
        meanType = _swig_property(_CosmoBolognaLib.STR_data_model_meanType_get, _CosmoBolognaLib.STR_data_model_meanType_set)
    __swig_setmethods__["func_sigma"] = _CosmoBolognaLib.STR_data_model_func_sigma_set
    __swig_getmethods__["func_sigma"] = _CosmoBolognaLib.STR_data_model_func_sigma_get
    if _newclass:
        func_sigma = _swig_property(_CosmoBolognaLib.STR_data_model_func_sigma_get, _CosmoBolognaLib.STR_data_model_func_sigma_set)
    __swig_setmethods__["cosmopar_bias_interp_1D"] = _CosmoBolognaLib.STR_data_model_cosmopar_bias_interp_1D_set
    __swig_getmethods__["cosmopar_bias_interp_1D"] = _CosmoBolognaLib.STR_data_model_cosmopar_bias_interp_1D_get
    if _newclass:
        cosmopar_bias_interp_1D = _swig_property(_CosmoBolognaLib.STR_data_model_cosmopar_bias_interp_1D_get, _CosmoBolognaLib.STR_data_model_cosmopar_bias_interp_1D_set)
    __swig_setmethods__["cosmopar_bias_interp_2D"] = _CosmoBolognaLib.STR_data_model_cosmopar_bias_interp_2D_set
    __swig_getmethods__["cosmopar_bias_interp_2D"] = _CosmoBolognaLib.STR_data_model_cosmopar_bias_interp_2D_get
    if _newclass:
        cosmopar_bias_interp_2D = _swig_property(_CosmoBolognaLib.STR_data_model_cosmopar_bias_interp_2D_get, _CosmoBolognaLib.STR_data_model_cosmopar_bias_interp_2D_set)
    __swig_setmethods__["interp_SelectionFunction_cut"] = _CosmoBolognaLib.STR_data_model_interp_SelectionFunction_cut_set
    __swig_getmethods__["interp_SelectionFunction_cut"] = _CosmoBolognaLib.STR_data_model_interp_SelectionFunction_cut_get
    if _newclass:
        interp_SelectionFunction_cut = _swig_property(_CosmoBolognaLib.STR_data_model_interp_SelectionFunction_cut_get, _CosmoBolognaLib.STR_data_model_interp_SelectionFunction_cut_set)
    __swig_setmethods__["interp_SelectionFunction"] = _CosmoBolognaLib.STR_data_model_interp_SelectionFunction_set
    __swig_getmethods__["interp_SelectionFunction"] = _CosmoBolognaLib.STR_data_model_interp_SelectionFunction_get
    if _newclass:
        interp_SelectionFunction = _swig_property(_CosmoBolognaLib.STR_data_model_interp_SelectionFunction_get, _CosmoBolognaLib.STR_data_model_interp_SelectionFunction_set)
    __swig_setmethods__["z_min"] = _CosmoBolognaLib.STR_data_model_z_min_set
    __swig_getmethods__["z_min"] = _CosmoBolognaLib.STR_data_model_z_min_get
    if _newclass:
        z_min = _swig_property(_CosmoBolognaLib.STR_data_model_z_min_get, _CosmoBolognaLib.STR_data_model_z_min_set)
    __swig_setmethods__["z_max"] = _CosmoBolognaLib.STR_data_model_z_max_set
    __swig_getmethods__["z_max"] = _CosmoBolognaLib.STR_data_model_z_max_get
    if _newclass:
        z_max = _swig_property(_CosmoBolognaLib.STR_data_model_z_max_get, _CosmoBolognaLib.STR_data_model_z_max_set)
    __swig_setmethods__["mass_step"] = _CosmoBolognaLib.STR_data_model_mass_step_set
    __swig_getmethods__["mass_step"] = _CosmoBolognaLib.STR_data_model_mass_step_get
    if _newclass:
        mass_step = _swig_property(_CosmoBolognaLib.STR_data_model_mass_step_get, _CosmoBolognaLib.STR_data_model_mass_step_set)
    __swig_setmethods__["Mass_min"] = _CosmoBolognaLib.STR_data_model_Mass_min_set
    __swig_getmethods__["Mass_min"] = _CosmoBolognaLib.STR_data_model_Mass_min_get
    if _newclass:
        Mass_min = _swig_property(_CosmoBolognaLib.STR_data_model_Mass_min_get, _CosmoBolognaLib.STR_data_model_Mass_min_set)
    __swig_setmethods__["Mass_max"] = _CosmoBolognaLib.STR_data_model_Mass_max_set
    __swig_getmethods__["Mass_max"] = _CosmoBolognaLib.STR_data_model_Mass_max_get
    if _newclass:
        Mass_max = _swig_property(_CosmoBolognaLib.STR_data_model_Mass_max_get, _CosmoBolognaLib.STR_data_model_Mass_max_set)
    __swig_setmethods__["mass"] = _CosmoBolognaLib.STR_data_model_mass_set
    __swig_getmethods__["mass"] = _CosmoBolognaLib.STR_data_model_mass_get
    if _newclass:
        mass = _swig_property(_CosmoBolognaLib.STR_data_model_mass_get, _CosmoBolognaLib.STR_data_model_mass_set)
    __swig_setmethods__["cosmology_mass"] = _CosmoBolognaLib.STR_data_model_cosmology_mass_set
    __swig_getmethods__["cosmology_mass"] = _CosmoBolognaLib.STR_data_model_cosmology_mass_get
    if _newclass:
        cosmology_mass = _swig_property(_CosmoBolognaLib.STR_data_model_cosmology_mass_get, _CosmoBolognaLib.STR_data_model_cosmology_mass_set)
    __swig_setmethods__["redshift_source"] = _CosmoBolognaLib.STR_data_model_redshift_source_set
    __swig_getmethods__["redshift_source"] = _CosmoBolognaLib.STR_data_model_redshift_source_get
    if _newclass:
        redshift_source = _swig_property(_CosmoBolognaLib.STR_data_model_redshift_source_get, _CosmoBolognaLib.STR_data_model_redshift_source_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_data_model()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_data_model
    __del__ = lambda self: None
STR_data_model_swigregister = _CosmoBolognaLib.STR_data_model_swigregister
STR_data_model_swigregister(STR_data_model)


def Pkmu_DeWiggled(kk, mu, alpha_perp, alpha_par, sigmaNL_perp, sigmaNL_par, linear_growth_rate, bias, SigmaS, Pk, Pk_NW):
    return _CosmoBolognaLib.Pkmu_DeWiggled(kk, mu, alpha_perp, alpha_par, sigmaNL_perp, sigmaNL_par, linear_growth_rate, bias, SigmaS, Pk, Pk_NW)
Pkmu_DeWiggled = _CosmoBolognaLib.Pkmu_DeWiggled

def Pkmu_ModeCoupling(kk, mu, alpha_perp, alpha_par, linear_growth_rate, bias, sigmav, AMC, PkLin, PkMC):
    return _CosmoBolognaLib.Pkmu_ModeCoupling(kk, mu, alpha_perp, alpha_par, linear_growth_rate, bias, sigmav, AMC, PkLin, PkMC)
Pkmu_ModeCoupling = _CosmoBolognaLib.Pkmu_ModeCoupling

def Pkmu(kk, mu, model, parameter, pk_interp):
    return _CosmoBolognaLib.Pkmu(kk, mu, model, parameter, pk_interp)
Pkmu = _CosmoBolognaLib.Pkmu

def Pk_l(*args):
    return _CosmoBolognaLib.Pk_l(*args)
Pk_l = _CosmoBolognaLib.Pk_l

def Xil_interp(kk, l, model, parameter, pk_interp, prec=1.e-5):
    return _CosmoBolognaLib.Xil_interp(kk, l, model, parameter, pk_interp, prec)
Xil_interp = _CosmoBolognaLib.Xil_interp

def Xi_l(*args):
    return _CosmoBolognaLib.Xi_l(*args)
Xi_l = _CosmoBolognaLib.Xi_l

def Xi_rppi(rp, pi, model, parameter, pk_interp, prec=1.e-5):
    return _CosmoBolognaLib.Xi_rppi(rp, pi, model, parameter, pk_interp, prec)
Xi_rppi = _CosmoBolognaLib.Xi_rppi

def wp_from_Xi_rppi(rp, pimax, model, parameter, pk_interp, prec=1.e-5):
    return _CosmoBolognaLib.wp_from_Xi_rppi(rp, pimax, model, parameter, pk_interp, prec)
wp_from_Xi_rppi = _CosmoBolognaLib.wp_from_Xi_rppi

def damped_Pk_terms(kk, linear_growth_rate, SigmaS, PkDM):
    return _CosmoBolognaLib.damped_Pk_terms(kk, linear_growth_rate, SigmaS, PkDM)
damped_Pk_terms = _CosmoBolognaLib.damped_Pk_terms

def damped_Xi(ss, bias, linear_growth_rate, SigmaS, kk, PkDM):
    return _CosmoBolognaLib.damped_Xi(ss, bias, linear_growth_rate, SigmaS, kk, PkDM)
damped_Xi = _CosmoBolognaLib.damped_Xi

def xiMultipoles(rad, inputs, parameter):
    return _CosmoBolognaLib.xiMultipoles(rad, inputs, parameter)
xiMultipoles = _CosmoBolognaLib.xiMultipoles

def xiMultipoles_BAO(rad, inputs, parameter):
    return _CosmoBolognaLib.xiMultipoles_BAO(rad, inputs, parameter)
xiMultipoles_BAO = _CosmoBolognaLib.xiMultipoles_BAO

def xiMultipoles_sigma8_bias(rad, inputs, parameter):
    return _CosmoBolognaLib.xiMultipoles_sigma8_bias(rad, inputs, parameter)
xiMultipoles_sigma8_bias = _CosmoBolognaLib.xiMultipoles_sigma8_bias

def wp_from_xi_approx(func, rp, inputs, parameter):
    return _CosmoBolognaLib.wp_from_xi_approx(func, rp, inputs, parameter)
wp_from_xi_approx = _CosmoBolognaLib.wp_from_xi_approx

def wp_1halo_approx(rp, inputs, parameter):
    return _CosmoBolognaLib.wp_1halo_approx(rp, inputs, parameter)
wp_1halo_approx = _CosmoBolognaLib.wp_1halo_approx

def wp_2halo_approx(rp, inputs, parameter):
    return _CosmoBolognaLib.wp_2halo_approx(rp, inputs, parameter)
wp_2halo_approx = _CosmoBolognaLib.wp_2halo_approx

def wp_HOD_approx(rp, inputs, parameter):
    return _CosmoBolognaLib.wp_HOD_approx(rp, inputs, parameter)
wp_HOD_approx = _CosmoBolognaLib.wp_HOD_approx

def wp_from_xi(func, rp, inputs, parameter):
    return _CosmoBolognaLib.wp_from_xi(func, rp, inputs, parameter)
wp_from_xi = _CosmoBolognaLib.wp_from_xi

def wp_1halo(rp, inputs, parameter):
    return _CosmoBolognaLib.wp_1halo(rp, inputs, parameter)
wp_1halo = _CosmoBolognaLib.wp_1halo

def wp_2halo(rp, inputs, parameter):
    return _CosmoBolognaLib.wp_2halo(rp, inputs, parameter)
wp_2halo = _CosmoBolognaLib.wp_2halo

def wp_HOD(rp, inputs, parameter):
    return _CosmoBolognaLib.wp_HOD(rp, inputs, parameter)
wp_HOD = _CosmoBolognaLib.wp_HOD

def xi_Wedges(*args):
    return _CosmoBolognaLib.xi_Wedges(*args)
xi_Wedges = _CosmoBolognaLib.xi_Wedges

def xiWedges(rad, inputs, parameter):
    return _CosmoBolognaLib.xiWedges(rad, inputs, parameter)
xiWedges = _CosmoBolognaLib.xiWedges

def xiWedges_BAO(rad, inputs, parameter):
    return _CosmoBolognaLib.xiWedges_BAO(rad, inputs, parameter)
xiWedges_BAO = _CosmoBolognaLib.xiWedges_BAO
class Modelling_TwoPointCorrelation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modelling_TwoPointCorrelation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Modelling_TwoPointCorrelation, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CosmoBolognaLib.new_Modelling_TwoPointCorrelation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Modelling_TwoPointCorrelation
    __del__ = lambda self: None
    if _newclass:
        Create = staticmethod(_CosmoBolognaLib.Modelling_TwoPointCorrelation_Create)
    else:
        Create = _CosmoBolognaLib.Modelling_TwoPointCorrelation_Create

    def twoPType(self):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation_twoPType(self)

    def data_model(self):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation_data_model(self)
Modelling_TwoPointCorrelation_swigregister = _CosmoBolognaLib.Modelling_TwoPointCorrelation_swigregister
Modelling_TwoPointCorrelation_swigregister(Modelling_TwoPointCorrelation)

def Modelling_TwoPointCorrelation_Create(*args):
    return _CosmoBolognaLib.Modelling_TwoPointCorrelation_Create(*args)
Modelling_TwoPointCorrelation_Create = _CosmoBolognaLib.Modelling_TwoPointCorrelation_Create

class Modelling_TwoPointCorrelation1D(Modelling1D, Modelling_TwoPointCorrelation):
    __swig_setmethods__ = {}
    for _s in [Modelling1D, Modelling_TwoPointCorrelation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modelling_TwoPointCorrelation1D, name, value)
    __swig_getmethods__ = {}
    for _s in [Modelling1D, Modelling_TwoPointCorrelation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Modelling_TwoPointCorrelation1D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Modelling_TwoPointCorrelation1D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Modelling_TwoPointCorrelation1D
    __del__ = lambda self: None

    def data_HOD(self):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_data_HOD(self)

    def set_data_model(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_set_data_model(self, *args)

    def set_data_HOD(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_set_data_HOD(self, *args)

    def set_data_model_cluster_selection_function(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_set_data_model_cluster_selection_function(self, *args)
Modelling_TwoPointCorrelation1D_swigregister = _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_swigregister
Modelling_TwoPointCorrelation1D_swigregister(Modelling_TwoPointCorrelation1D)

class Modelling_TwoPointCorrelation1D_monopole(Modelling_TwoPointCorrelation1D):
    __swig_setmethods__ = {}
    for _s in [Modelling_TwoPointCorrelation1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modelling_TwoPointCorrelation1D_monopole, name, value)
    __swig_getmethods__ = {}
    for _s in [Modelling_TwoPointCorrelation1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Modelling_TwoPointCorrelation1D_monopole, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Modelling_TwoPointCorrelation1D_monopole(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Modelling_TwoPointCorrelation1D_monopole
    __del__ = lambda self: None

    def set_fiducial_xiDM(self):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_monopole_set_fiducial_xiDM(self)

    def set_fiducial_PkDM(self):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_monopole_set_fiducial_PkDM(self)

    def set_fiducial_sigma_data_model(self):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_monopole_set_fiducial_sigma_data_model(self)

    def set_fiducial_sigma(self):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_monopole_set_fiducial_sigma(self)

    def set_bias_eff_grid(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_monopole_set_bias_eff_grid(self, *args)

    def set_model_linear(self, alpha_prior, fsigma8_prior, bsigma8_prior, polynomial_prior):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_monopole_set_model_linear(self, alpha_prior, fsigma8_prior, bsigma8_prior, polynomial_prior)

    def set_model_linear_LinearPoint(self, alpha_prior, fsigma8_prior, bsigma8_prior, polynomial_prior):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_monopole_set_model_linear_LinearPoint(self, alpha_prior, fsigma8_prior, bsigma8_prior, polynomial_prior)

    def set_model_polynomial_LinearPoint(self, polynomial_prior):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_monopole_set_model_polynomial_LinearPoint(self, polynomial_prior)

    def set_model_Kaiser(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_monopole_set_model_Kaiser(self, *args)

    def set_model_sigma8_bias(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_monopole_set_model_sigma8_bias(self, *args)

    def set_model_linear_bias_cosmology(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_monopole_set_model_linear_bias_cosmology(self, *args)

    def set_model_linear_sigma8_clusters(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_monopole_set_model_linear_sigma8_clusters(self, *args)

    def set_model_linear_cosmology_clusters_grid(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_monopole_set_model_linear_cosmology_clusters_grid(self, *args)

    def set_model_linear_cosmology_cluster_selection_function(self, alpha_prior, cosmo_param, cosmo_param_prior):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_monopole_set_model_linear_cosmology_cluster_selection_function(self, alpha_prior, cosmo_param, cosmo_param_prior)

    def set_model_linear_cosmology_clusters(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_monopole_set_model_linear_cosmology_clusters(self, *args)

    def set_model_BAO(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_monopole_set_model_BAO(self, *args)

    def set_model_BAO_sigmaNL(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_monopole_set_model_BAO_sigmaNL(self, *args)

    def set_model_BAO_LinearPoint(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_monopole_set_model_BAO_LinearPoint(self, *args)

    def set_model_HOD(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_monopole_set_model_HOD(self, *args)

    def set_model_bias_sigmaz(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_monopole_set_model_bias_sigmaz(self, *args)

    def set_model_scaling_relation_sigmaz(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_monopole_set_model_scaling_relation_sigmaz(self, *args)
Modelling_TwoPointCorrelation1D_monopole_swigregister = _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_monopole_swigregister
Modelling_TwoPointCorrelation1D_monopole_swigregister(Modelling_TwoPointCorrelation1D_monopole)

class Modelling_TwoPointCorrelation1D_angular(Modelling_TwoPointCorrelation1D):
    __swig_setmethods__ = {}
    for _s in [Modelling_TwoPointCorrelation1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modelling_TwoPointCorrelation1D_angular, name, value)
    __swig_getmethods__ = {}
    for _s in [Modelling_TwoPointCorrelation1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Modelling_TwoPointCorrelation1D_angular, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Modelling_TwoPointCorrelation1D_angular(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Modelling_TwoPointCorrelation1D_angular
    __del__ = lambda self: None
Modelling_TwoPointCorrelation1D_angular_swigregister = _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_angular_swigregister
Modelling_TwoPointCorrelation1D_angular_swigregister(Modelling_TwoPointCorrelation1D_angular)

class Modelling_TwoPointCorrelation1D_filtered(Modelling_TwoPointCorrelation1D_monopole):
    __swig_setmethods__ = {}
    for _s in [Modelling_TwoPointCorrelation1D_monopole]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modelling_TwoPointCorrelation1D_filtered, name, value)
    __swig_getmethods__ = {}
    for _s in [Modelling_TwoPointCorrelation1D_monopole]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Modelling_TwoPointCorrelation1D_filtered, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Modelling_TwoPointCorrelation1D_filtered(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Modelling_TwoPointCorrelation1D_filtered
    __del__ = lambda self: None
Modelling_TwoPointCorrelation1D_filtered_swigregister = _CosmoBolognaLib.Modelling_TwoPointCorrelation1D_filtered_swigregister
Modelling_TwoPointCorrelation1D_filtered_swigregister(Modelling_TwoPointCorrelation1D_filtered)

class Modelling_TwoPointCorrelation2D(Modelling2D, Modelling_TwoPointCorrelation):
    __swig_setmethods__ = {}
    for _s in [Modelling2D, Modelling_TwoPointCorrelation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modelling_TwoPointCorrelation2D, name, value)
    __swig_getmethods__ = {}
    for _s in [Modelling2D, Modelling_TwoPointCorrelation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Modelling_TwoPointCorrelation2D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Modelling_TwoPointCorrelation2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Modelling_TwoPointCorrelation2D
    __del__ = lambda self: None

    def set_data_model(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation2D_set_data_model(self, *args)
Modelling_TwoPointCorrelation2D_swigregister = _CosmoBolognaLib.Modelling_TwoPointCorrelation2D_swigregister
Modelling_TwoPointCorrelation2D_swigregister(Modelling_TwoPointCorrelation2D)

class Modelling_TwoPointCorrelation2D_cartesian(Modelling_TwoPointCorrelation2D):
    __swig_setmethods__ = {}
    for _s in [Modelling_TwoPointCorrelation2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modelling_TwoPointCorrelation2D_cartesian, name, value)
    __swig_getmethods__ = {}
    for _s in [Modelling_TwoPointCorrelation2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Modelling_TwoPointCorrelation2D_cartesian, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Modelling_TwoPointCorrelation2D_cartesian(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Modelling_TwoPointCorrelation2D_cartesian
    __del__ = lambda self: None

    def set_fiducial_xiDM(self):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation2D_cartesian_set_fiducial_xiDM(self)

    def set_model_dispersionModel_AP(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation2D_cartesian_set_model_dispersionModel_AP(self, *args)

    def set_model_dispersionModel(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation2D_cartesian_set_model_dispersionModel(self, *args)
Modelling_TwoPointCorrelation2D_cartesian_swigregister = _CosmoBolognaLib.Modelling_TwoPointCorrelation2D_cartesian_swigregister
Modelling_TwoPointCorrelation2D_cartesian_swigregister(Modelling_TwoPointCorrelation2D_cartesian)

class Modelling_TwoPointCorrelation2D_polar(Modelling_TwoPointCorrelation2D):
    __swig_setmethods__ = {}
    for _s in [Modelling_TwoPointCorrelation2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modelling_TwoPointCorrelation2D_polar, name, value)
    __swig_getmethods__ = {}
    for _s in [Modelling_TwoPointCorrelation2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Modelling_TwoPointCorrelation2D_polar, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Modelling_TwoPointCorrelation2D_polar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Modelling_TwoPointCorrelation2D_polar
    __del__ = lambda self: None
Modelling_TwoPointCorrelation2D_polar_swigregister = _CosmoBolognaLib.Modelling_TwoPointCorrelation2D_polar_swigregister
Modelling_TwoPointCorrelation2D_polar_swigregister(Modelling_TwoPointCorrelation2D_polar)

class Modelling_TwoPointCorrelation_multipoles(Modelling_TwoPointCorrelation1D_monopole):
    __swig_setmethods__ = {}
    for _s in [Modelling_TwoPointCorrelation1D_monopole]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modelling_TwoPointCorrelation_multipoles, name, value)
    __swig_getmethods__ = {}
    for _s in [Modelling_TwoPointCorrelation1D_monopole]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Modelling_TwoPointCorrelation_multipoles, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Modelling_TwoPointCorrelation_multipoles(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Modelling_TwoPointCorrelation_multipoles
    __del__ = lambda self: None

    def set_fit_range(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation_multipoles_set_fit_range(self, *args)

    def set_fiducial_PkDM(self):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation_multipoles_set_fiducial_PkDM(self)

    def set_fiducial_xiDM(self):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation_multipoles_set_fiducial_xiDM(self)

    def set_model_fullShape_DeWiggled(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation_multipoles_set_model_fullShape_DeWiggled(self, *args)

    def set_model_fullShape_ModeCoupling(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation_multipoles_set_model_fullShape_ModeCoupling(self, *args)

    def set_model_fullShape_sigma8_bias(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation_multipoles_set_model_fullShape_sigma8_bias(self, *args)

    def set_model_BAO(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation_multipoles_set_model_BAO(self, *args)

    def write_model(self, output_dir, output_file, nmultipoles, xx, parameters):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation_multipoles_write_model(self, output_dir, output_file, nmultipoles, xx, parameters)

    def write_model_at_bestfit(self, output_dir, output_file, nmultipoles, xx):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation_multipoles_write_model_at_bestfit(self, output_dir, output_file, nmultipoles, xx)

    def write_model_from_chains(self, output_dir, output_file, nmultipoles, xx, start=0, thin=1):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation_multipoles_write_model_from_chains(self, output_dir, output_file, nmultipoles, xx, start, thin)
Modelling_TwoPointCorrelation_multipoles_swigregister = _CosmoBolognaLib.Modelling_TwoPointCorrelation_multipoles_swigregister
Modelling_TwoPointCorrelation_multipoles_swigregister(Modelling_TwoPointCorrelation_multipoles)

class Modelling_TwoPointCorrelation_projected(Modelling_TwoPointCorrelation1D_monopole):
    __swig_setmethods__ = {}
    for _s in [Modelling_TwoPointCorrelation1D_monopole]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modelling_TwoPointCorrelation_projected, name, value)
    __swig_getmethods__ = {}
    for _s in [Modelling_TwoPointCorrelation1D_monopole]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Modelling_TwoPointCorrelation_projected, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Modelling_TwoPointCorrelation_projected(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Modelling_TwoPointCorrelation_projected
    __del__ = lambda self: None

    def set_fiducial_wpDM(self):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation_projected_set_fiducial_wpDM(self)

    def set_model_linearBias(self, bsigma8_prior):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation_projected_set_model_linearBias(self, bsigma8_prior)

    def set_model_HOD(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation_projected_set_model_HOD(self, *args)
Modelling_TwoPointCorrelation_projected_swigregister = _CosmoBolognaLib.Modelling_TwoPointCorrelation_projected_swigregister
Modelling_TwoPointCorrelation_projected_swigregister(Modelling_TwoPointCorrelation_projected)

class Modelling_TwoPointCorrelation_deprojected(Modelling_TwoPointCorrelation_projected):
    __swig_setmethods__ = {}
    for _s in [Modelling_TwoPointCorrelation_projected]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modelling_TwoPointCorrelation_deprojected, name, value)
    __swig_getmethods__ = {}
    for _s in [Modelling_TwoPointCorrelation_projected]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Modelling_TwoPointCorrelation_deprojected, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Modelling_TwoPointCorrelation_deprojected(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Modelling_TwoPointCorrelation_deprojected
    __del__ = lambda self: None
Modelling_TwoPointCorrelation_deprojected_swigregister = _CosmoBolognaLib.Modelling_TwoPointCorrelation_deprojected_swigregister
Modelling_TwoPointCorrelation_deprojected_swigregister(Modelling_TwoPointCorrelation_deprojected)

class Modelling_TwoPointCorrelation_wedges(Modelling_TwoPointCorrelation1D_monopole):
    __swig_setmethods__ = {}
    for _s in [Modelling_TwoPointCorrelation1D_monopole]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modelling_TwoPointCorrelation_wedges, name, value)
    __swig_getmethods__ = {}
    for _s in [Modelling_TwoPointCorrelation1D_monopole]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Modelling_TwoPointCorrelation_wedges, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Modelling_TwoPointCorrelation_wedges(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Modelling_TwoPointCorrelation_wedges
    __del__ = lambda self: None

    def set_fiducial_PkDM(self):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation_wedges_set_fiducial_PkDM(self)

    def set_fiducial_xiDM(self):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation_wedges_set_fiducial_xiDM(self)

    def set_fit_range(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation_wedges_set_fit_range(self, *args)

    def set_model_fullShape_DeWiggled(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation_wedges_set_model_fullShape_DeWiggled(self, *args)

    def set_model_fullShape_ModeCoupling(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation_wedges_set_model_fullShape_ModeCoupling(self, *args)

    def set_model_BAO(self, *args):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation_wedges_set_model_BAO(self, *args)

    def write_model(self, output_dir, output_file, xx, parameters):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation_wedges_write_model(self, output_dir, output_file, xx, parameters)

    def write_model_at_bestfit(self, output_dir, output_file, xx):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation_wedges_write_model_at_bestfit(self, output_dir, output_file, xx)

    def write_model_from_chains(self, output_dir, output_file, xx, start=0, thin=1):
        return _CosmoBolognaLib.Modelling_TwoPointCorrelation_wedges_write_model_from_chains(self, output_dir, output_file, xx, start, thin)
Modelling_TwoPointCorrelation_wedges_swigregister = _CosmoBolognaLib.Modelling_TwoPointCorrelation_wedges_swigregister
Modelling_TwoPointCorrelation_wedges_swigregister(Modelling_TwoPointCorrelation_wedges)


def zeta_RSD(theta, inputs, parameter):
    return _CosmoBolognaLib.zeta_RSD(theta, inputs, parameter)
zeta_RSD = _CosmoBolognaLib.zeta_RSD

def Q_nonlinear_localbias(theta, inputs, parameter):
    return _CosmoBolognaLib.Q_nonlinear_localbias(theta, inputs, parameter)
Q_nonlinear_localbias = _CosmoBolognaLib.Q_nonlinear_localbias

def Q_nonlinear_nonlocalbias(theta, inputs, parameter):
    return _CosmoBolognaLib.Q_nonlinear_nonlocalbias(theta, inputs, parameter)
Q_nonlinear_nonlocalbias = _CosmoBolognaLib.Q_nonlinear_nonlocalbias

def Q_nonlinear_nonlocalbias_alpha(theta, inputs, parameter):
    return _CosmoBolognaLib.Q_nonlinear_nonlocalbias_alpha(theta, inputs, parameter)
Q_nonlinear_nonlocalbias_alpha = _CosmoBolognaLib.Q_nonlinear_nonlocalbias_alpha
class STR_data_model_threept(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_data_model_threept, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_data_model_threept, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Q_DM"] = _CosmoBolognaLib.STR_data_model_threept_Q_DM_set
    __swig_getmethods__["Q_DM"] = _CosmoBolognaLib.STR_data_model_threept_Q_DM_get
    if _newclass:
        Q_DM = _swig_property(_CosmoBolognaLib.STR_data_model_threept_Q_DM_get, _CosmoBolognaLib.STR_data_model_threept_Q_DM_set)
    __swig_setmethods__["cosmology"] = _CosmoBolognaLib.STR_data_model_threept_cosmology_set
    __swig_getmethods__["cosmology"] = _CosmoBolognaLib.STR_data_model_threept_cosmology_get
    if _newclass:
        cosmology = _swig_property(_CosmoBolognaLib.STR_data_model_threept_cosmology_get, _CosmoBolognaLib.STR_data_model_threept_cosmology_set)
    __swig_setmethods__["r1"] = _CosmoBolognaLib.STR_data_model_threept_r1_set
    __swig_getmethods__["r1"] = _CosmoBolognaLib.STR_data_model_threept_r1_get
    if _newclass:
        r1 = _swig_property(_CosmoBolognaLib.STR_data_model_threept_r1_get, _CosmoBolognaLib.STR_data_model_threept_r1_set)
    __swig_setmethods__["r2"] = _CosmoBolognaLib.STR_data_model_threept_r2_set
    __swig_getmethods__["r2"] = _CosmoBolognaLib.STR_data_model_threept_r2_get
    if _newclass:
        r2 = _swig_property(_CosmoBolognaLib.STR_data_model_threept_r2_get, _CosmoBolognaLib.STR_data_model_threept_r2_set)
    __swig_setmethods__["theta"] = _CosmoBolognaLib.STR_data_model_threept_theta_set
    __swig_getmethods__["theta"] = _CosmoBolognaLib.STR_data_model_threept_theta_get
    if _newclass:
        theta = _swig_property(_CosmoBolognaLib.STR_data_model_threept_theta_get, _CosmoBolognaLib.STR_data_model_threept_theta_set)
    __swig_setmethods__["model"] = _CosmoBolognaLib.STR_data_model_threept_model_set
    __swig_getmethods__["model"] = _CosmoBolognaLib.STR_data_model_threept_model_get
    if _newclass:
        model = _swig_property(_CosmoBolognaLib.STR_data_model_threept_model_get, _CosmoBolognaLib.STR_data_model_threept_model_set)
    __swig_setmethods__["kk"] = _CosmoBolognaLib.STR_data_model_threept_kk_set
    __swig_getmethods__["kk"] = _CosmoBolognaLib.STR_data_model_threept_kk_get
    if _newclass:
        kk = _swig_property(_CosmoBolognaLib.STR_data_model_threept_kk_get, _CosmoBolognaLib.STR_data_model_threept_kk_set)
    __swig_setmethods__["Pk_DM"] = _CosmoBolognaLib.STR_data_model_threept_Pk_DM_set
    __swig_getmethods__["Pk_DM"] = _CosmoBolognaLib.STR_data_model_threept_Pk_DM_get
    if _newclass:
        Pk_DM = _swig_property(_CosmoBolognaLib.STR_data_model_threept_Pk_DM_get, _CosmoBolognaLib.STR_data_model_threept_Pk_DM_set)
    __swig_setmethods__["redshift"] = _CosmoBolognaLib.STR_data_model_threept_redshift_set
    __swig_getmethods__["redshift"] = _CosmoBolognaLib.STR_data_model_threept_redshift_get
    if _newclass:
        redshift = _swig_property(_CosmoBolognaLib.STR_data_model_threept_redshift_get, _CosmoBolognaLib.STR_data_model_threept_redshift_set)
    __swig_setmethods__["method_Pk"] = _CosmoBolognaLib.STR_data_model_threept_method_Pk_set
    __swig_getmethods__["method_Pk"] = _CosmoBolognaLib.STR_data_model_threept_method_Pk_get
    if _newclass:
        method_Pk = _swig_property(_CosmoBolognaLib.STR_data_model_threept_method_Pk_get, _CosmoBolognaLib.STR_data_model_threept_method_Pk_set)
    __swig_setmethods__["NL"] = _CosmoBolognaLib.STR_data_model_threept_NL_set
    __swig_getmethods__["NL"] = _CosmoBolognaLib.STR_data_model_threept_NL_get
    if _newclass:
        NL = _swig_property(_CosmoBolognaLib.STR_data_model_threept_NL_get, _CosmoBolognaLib.STR_data_model_threept_NL_set)
    __swig_setmethods__["k_min"] = _CosmoBolognaLib.STR_data_model_threept_k_min_set
    __swig_getmethods__["k_min"] = _CosmoBolognaLib.STR_data_model_threept_k_min_get
    if _newclass:
        k_min = _swig_property(_CosmoBolognaLib.STR_data_model_threept_k_min_get, _CosmoBolognaLib.STR_data_model_threept_k_min_set)
    __swig_setmethods__["k_max"] = _CosmoBolognaLib.STR_data_model_threept_k_max_set
    __swig_getmethods__["k_max"] = _CosmoBolognaLib.STR_data_model_threept_k_max_get
    if _newclass:
        k_max = _swig_property(_CosmoBolognaLib.STR_data_model_threept_k_max_get, _CosmoBolognaLib.STR_data_model_threept_k_max_set)
    __swig_setmethods__["step_k"] = _CosmoBolognaLib.STR_data_model_threept_step_k_set
    __swig_getmethods__["step_k"] = _CosmoBolognaLib.STR_data_model_threept_step_k_get
    if _newclass:
        step_k = _swig_property(_CosmoBolognaLib.STR_data_model_threept_step_k_get, _CosmoBolognaLib.STR_data_model_threept_step_k_set)
    __swig_setmethods__["r_min"] = _CosmoBolognaLib.STR_data_model_threept_r_min_set
    __swig_getmethods__["r_min"] = _CosmoBolognaLib.STR_data_model_threept_r_min_get
    if _newclass:
        r_min = _swig_property(_CosmoBolognaLib.STR_data_model_threept_r_min_get, _CosmoBolognaLib.STR_data_model_threept_r_min_set)
    __swig_setmethods__["r_max"] = _CosmoBolognaLib.STR_data_model_threept_r_max_set
    __swig_getmethods__["r_max"] = _CosmoBolognaLib.STR_data_model_threept_r_max_get
    if _newclass:
        r_max = _swig_property(_CosmoBolognaLib.STR_data_model_threept_r_max_get, _CosmoBolognaLib.STR_data_model_threept_r_max_set)
    __swig_setmethods__["step_r"] = _CosmoBolognaLib.STR_data_model_threept_step_r_set
    __swig_getmethods__["step_r"] = _CosmoBolognaLib.STR_data_model_threept_step_r_get
    if _newclass:
        step_r = _swig_property(_CosmoBolognaLib.STR_data_model_threept_step_r_get, _CosmoBolognaLib.STR_data_model_threept_step_r_set)
    __swig_setmethods__["rr"] = _CosmoBolognaLib.STR_data_model_threept_rr_set
    __swig_getmethods__["rr"] = _CosmoBolognaLib.STR_data_model_threept_rr_get
    if _newclass:
        rr = _swig_property(_CosmoBolognaLib.STR_data_model_threept_rr_get, _CosmoBolognaLib.STR_data_model_threept_rr_set)
    __swig_setmethods__["output_dir"] = _CosmoBolognaLib.STR_data_model_threept_output_dir_set
    __swig_getmethods__["output_dir"] = _CosmoBolognaLib.STR_data_model_threept_output_dir_get
    if _newclass:
        output_dir = _swig_property(_CosmoBolognaLib.STR_data_model_threept_output_dir_get, _CosmoBolognaLib.STR_data_model_threept_output_dir_set)
    __swig_setmethods__["output_root"] = _CosmoBolognaLib.STR_data_model_threept_output_root_set
    __swig_getmethods__["output_root"] = _CosmoBolognaLib.STR_data_model_threept_output_root_get
    if _newclass:
        output_root = _swig_property(_CosmoBolognaLib.STR_data_model_threept_output_root_get, _CosmoBolognaLib.STR_data_model_threept_output_root_set)
    __swig_setmethods__["norm"] = _CosmoBolognaLib.STR_data_model_threept_norm_set
    __swig_getmethods__["norm"] = _CosmoBolognaLib.STR_data_model_threept_norm_get
    if _newclass:
        norm = _swig_property(_CosmoBolognaLib.STR_data_model_threept_norm_get, _CosmoBolognaLib.STR_data_model_threept_norm_set)
    __swig_setmethods__["prec"] = _CosmoBolognaLib.STR_data_model_threept_prec_set
    __swig_getmethods__["prec"] = _CosmoBolognaLib.STR_data_model_threept_prec_get
    if _newclass:
        prec = _swig_property(_CosmoBolognaLib.STR_data_model_threept_prec_get, _CosmoBolognaLib.STR_data_model_threept_prec_set)
    __swig_setmethods__["force_realSpace"] = _CosmoBolognaLib.STR_data_model_threept_force_realSpace_set
    __swig_getmethods__["force_realSpace"] = _CosmoBolognaLib.STR_data_model_threept_force_realSpace_get
    if _newclass:
        force_realSpace = _swig_property(_CosmoBolognaLib.STR_data_model_threept_force_realSpace_get, _CosmoBolognaLib.STR_data_model_threept_force_realSpace_set)
    __swig_setmethods__["max_ll"] = _CosmoBolognaLib.STR_data_model_threept_max_ll_set
    __swig_getmethods__["max_ll"] = _CosmoBolognaLib.STR_data_model_threept_max_ll_get
    if _newclass:
        max_ll = _swig_property(_CosmoBolognaLib.STR_data_model_threept_max_ll_get, _CosmoBolognaLib.STR_data_model_threept_max_ll_set)
    __swig_setmethods__["use_k"] = _CosmoBolognaLib.STR_data_model_threept_use_k_set
    __swig_getmethods__["use_k"] = _CosmoBolognaLib.STR_data_model_threept_use_k_get
    if _newclass:
        use_k = _swig_property(_CosmoBolognaLib.STR_data_model_threept_use_k_get, _CosmoBolognaLib.STR_data_model_threept_use_k_set)
    __swig_setmethods__["sigma8_z"] = _CosmoBolognaLib.STR_data_model_threept_sigma8_z_set
    __swig_getmethods__["sigma8_z"] = _CosmoBolognaLib.STR_data_model_threept_sigma8_z_get
    if _newclass:
        sigma8_z = _swig_property(_CosmoBolognaLib.STR_data_model_threept_sigma8_z_get, _CosmoBolognaLib.STR_data_model_threept_sigma8_z_set)
    __swig_setmethods__["linear_growth_rate_z"] = _CosmoBolognaLib.STR_data_model_threept_linear_growth_rate_z_set
    __swig_getmethods__["linear_growth_rate_z"] = _CosmoBolognaLib.STR_data_model_threept_linear_growth_rate_z_get
    if _newclass:
        linear_growth_rate_z = _swig_property(_CosmoBolognaLib.STR_data_model_threept_linear_growth_rate_z_get, _CosmoBolognaLib.STR_data_model_threept_linear_growth_rate_z_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_data_model_threept()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_data_model_threept
    __del__ = lambda self: None
STR_data_model_threept_swigregister = _CosmoBolognaLib.STR_data_model_threept_swigregister
STR_data_model_threept_swigregister(STR_data_model_threept)

class Modelling_ThreePointCorrelation(Modelling1D):
    __swig_setmethods__ = {}
    for _s in [Modelling1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modelling_ThreePointCorrelation, name, value)
    __swig_getmethods__ = {}
    for _s in [Modelling1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Modelling_ThreePointCorrelation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Modelling_ThreePointCorrelation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Modelling_ThreePointCorrelation
    __del__ = lambda self: None
    if _newclass:
        Create = staticmethod(_CosmoBolognaLib.Modelling_ThreePointCorrelation_Create)
    else:
        Create = _CosmoBolognaLib.Modelling_ThreePointCorrelation_Create

    def threePType(self):
        return _CosmoBolognaLib.Modelling_ThreePointCorrelation_threePType(self)

    def set_data_model(self, Q_DM):
        return _CosmoBolognaLib.Modelling_ThreePointCorrelation_set_data_model(self, Q_DM)

    def set_data_model_zeta_RSD(self, *args):
        return _CosmoBolognaLib.Modelling_ThreePointCorrelation_set_data_model_zeta_RSD(self, *args)

    def set_data_Q_nonlocal(self, cosmology, r1, r2, theta, model, kk, Pk_DM):
        return _CosmoBolognaLib.Modelling_ThreePointCorrelation_set_data_Q_nonlocal(self, cosmology, r1, r2, theta, model, kk, Pk_DM)
Modelling_ThreePointCorrelation_swigregister = _CosmoBolognaLib.Modelling_ThreePointCorrelation_swigregister
Modelling_ThreePointCorrelation_swigregister(Modelling_ThreePointCorrelation)

def Modelling_ThreePointCorrelation_Create(*args):
    return _CosmoBolognaLib.Modelling_ThreePointCorrelation_Create(*args)
Modelling_ThreePointCorrelation_Create = _CosmoBolognaLib.Modelling_ThreePointCorrelation_Create

class Modelling_ThreePointCorrelation_angular_connected(Modelling_ThreePointCorrelation):
    __swig_setmethods__ = {}
    for _s in [Modelling_ThreePointCorrelation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modelling_ThreePointCorrelation_angular_connected, name, value)
    __swig_getmethods__ = {}
    for _s in [Modelling_ThreePointCorrelation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Modelling_ThreePointCorrelation_angular_connected, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Modelling_ThreePointCorrelation_angular_connected(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Modelling_ThreePointCorrelation_angular_connected
    __del__ = lambda self: None
Modelling_ThreePointCorrelation_angular_connected_swigregister = _CosmoBolognaLib.Modelling_ThreePointCorrelation_angular_connected_swigregister
Modelling_ThreePointCorrelation_angular_connected_swigregister(Modelling_ThreePointCorrelation_angular_connected)

class Modelling_ThreePointCorrelation_angular_reduced(Modelling_ThreePointCorrelation_angular_connected):
    __swig_setmethods__ = {}
    for _s in [Modelling_ThreePointCorrelation_angular_connected]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modelling_ThreePointCorrelation_angular_reduced, name, value)
    __swig_getmethods__ = {}
    for _s in [Modelling_ThreePointCorrelation_angular_connected]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Modelling_ThreePointCorrelation_angular_reduced, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Modelling_ThreePointCorrelation_angular_reduced(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Modelling_ThreePointCorrelation_angular_reduced
    __del__ = lambda self: None
Modelling_ThreePointCorrelation_angular_reduced_swigregister = _CosmoBolognaLib.Modelling_ThreePointCorrelation_angular_reduced_swigregister
Modelling_ThreePointCorrelation_angular_reduced_swigregister(Modelling_ThreePointCorrelation_angular_reduced)

class Modelling_ThreePointCorrelation_comoving_connected(Modelling_ThreePointCorrelation):
    __swig_setmethods__ = {}
    for _s in [Modelling_ThreePointCorrelation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modelling_ThreePointCorrelation_comoving_connected, name, value)
    __swig_getmethods__ = {}
    for _s in [Modelling_ThreePointCorrelation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Modelling_ThreePointCorrelation_comoving_connected, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Modelling_ThreePointCorrelation_comoving_connected(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Modelling_ThreePointCorrelation_comoving_connected
    __del__ = lambda self: None

    def set_model_RSD(self, b1_prior, b2_prior, bt_prior, beta_prior):
        return _CosmoBolognaLib.Modelling_ThreePointCorrelation_comoving_connected_set_model_RSD(self, b1_prior, b2_prior, bt_prior, beta_prior)
Modelling_ThreePointCorrelation_comoving_connected_swigregister = _CosmoBolognaLib.Modelling_ThreePointCorrelation_comoving_connected_swigregister
Modelling_ThreePointCorrelation_comoving_connected_swigregister(Modelling_ThreePointCorrelation_comoving_connected)

class Modelling_ThreePointCorrelation_comoving_reduced(Modelling_ThreePointCorrelation_comoving_connected):
    __swig_setmethods__ = {}
    for _s in [Modelling_ThreePointCorrelation_comoving_connected]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modelling_ThreePointCorrelation_comoving_reduced, name, value)
    __swig_getmethods__ = {}
    for _s in [Modelling_ThreePointCorrelation_comoving_connected]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Modelling_ThreePointCorrelation_comoving_reduced, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Modelling_ThreePointCorrelation_comoving_reduced(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Modelling_ThreePointCorrelation_comoving_reduced
    __del__ = lambda self: None

    def set_model_nonlinear_localbias(self, *args):
        return _CosmoBolognaLib.Modelling_ThreePointCorrelation_comoving_reduced_set_model_nonlinear_localbias(self, *args)

    def set_model_nonlinear_nonlocalbias(self, *args):
        return _CosmoBolognaLib.Modelling_ThreePointCorrelation_comoving_reduced_set_model_nonlinear_nonlocalbias(self, *args)

    def set_model_nonlinear_nonlocalbias_alpha(self, *args):
        return _CosmoBolognaLib.Modelling_ThreePointCorrelation_comoving_reduced_set_model_nonlinear_nonlocalbias_alpha(self, *args)
Modelling_ThreePointCorrelation_comoving_reduced_swigregister = _CosmoBolognaLib.Modelling_ThreePointCorrelation_comoving_reduced_swigregister
Modelling_ThreePointCorrelation_comoving_reduced_swigregister(Modelling_ThreePointCorrelation_comoving_reduced)


def __add__(c1, c2):
    return _CosmoBolognaLib.__add__(c1, c2)
__add__ = _CosmoBolognaLib.__add__

def Vmax_DC_distribution(*args):
    return _CosmoBolognaLib.Vmax_DC_distribution(*args)
Vmax_DC_distribution = _CosmoBolognaLib.Vmax_DC_distribution

def AP_shift_r(redshift, cosm1, cosm2):
    return _CosmoBolognaLib.AP_shift_r(redshift, cosm1, cosm2)
AP_shift_r = _CosmoBolognaLib.AP_shift_r

def AP_shift_rp(redshift, cosm1, cosm2):
    return _CosmoBolognaLib.AP_shift_rp(redshift, cosm1, cosm2)
AP_shift_rp = _CosmoBolognaLib.AP_shift_rp

def AP_shift_pi(redshift, cosm1, cosm2):
    return _CosmoBolognaLib.AP_shift_pi(redshift, cosm1, cosm2)
AP_shift_pi = _CosmoBolognaLib.AP_shift_pi

def max_separations_AP(Rp_max, Pi_max, redshift, cosm1, cosm2, rpM_AP, piM_AP, rM_AP):
    return _CosmoBolognaLib.max_separations_AP(Rp_max, Pi_max, redshift, cosm1, cosm2, rpM_AP, piM_AP, rM_AP)
max_separations_AP = _CosmoBolognaLib.max_separations_AP

def converted_xi(*args):
    return _CosmoBolognaLib.converted_xi(*args)
converted_xi = _CosmoBolognaLib.converted_xi

def redshift_range(mean_redshift, boxSide, real_cosm, redshift_min, redshift_max):
    return _CosmoBolognaLib.redshift_range(mean_redshift, boxSide, real_cosm, redshift_min, redshift_max)
redshift_range = _CosmoBolognaLib.redshift_range

def volume(boxSize, frac, Bord, mean_redshift, real_cosm):
    return _CosmoBolognaLib.volume(boxSize, frac, Bord, mean_redshift, real_cosm)
volume = _CosmoBolognaLib.volume

def coord_zSpace(ra, dec, redshift, xx, yy, zz, vx, vy, vz, sigmaV, real_cosm, mean_redshift, redshift_min, redshift_max, seed=3213):
    return _CosmoBolognaLib.coord_zSpace(ra, dec, redshift, xx, yy, zz, vx, vy, vz, sigmaV, real_cosm, mean_redshift, redshift_min, redshift_max, seed)
coord_zSpace = _CosmoBolognaLib.coord_zSpace

def create_mocks(xx, yy, zz, vx, vy, vz, var1, var2, var3, output_dir, boxSize, frac, Bord, mean_redshift, real_cosm, REAL, sigmaV, idum, Volume):
    return _CosmoBolognaLib.create_mocks(xx, yy, zz, vx, vy, vz, var1, var2, var3, output_dir, boxSize, frac, Bord, mean_redshift, real_cosm, REAL, sigmaV, idum, Volume)
create_mocks = _CosmoBolognaLib.create_mocks

def set_ObjectRegion_SubBoxes(*args):
    return _CosmoBolognaLib.set_ObjectRegion_SubBoxes(*args)
set_ObjectRegion_SubBoxes = _CosmoBolognaLib.set_ObjectRegion_SubBoxes

def set_ObjectRegion_RaDec(*args):
    return _CosmoBolognaLib.set_ObjectRegion_RaDec(*args)
set_ObjectRegion_RaDec = _CosmoBolognaLib.set_ObjectRegion_RaDec

def set_ObjectRegion_mangle(*args):
    return _CosmoBolognaLib.set_ObjectRegion_mangle(*args)
set_ObjectRegion_mangle = _CosmoBolognaLib.set_ObjectRegion_mangle

def set_ObjectRegion_SDSS_stripes(data, random):
    return _CosmoBolognaLib.set_ObjectRegion_SDSS_stripes(data, random)
set_ObjectRegion_SDSS_stripes = _CosmoBolognaLib.set_ObjectRegion_SDSS_stripes

def check_regions(data, random):
    return _CosmoBolognaLib.check_regions(data, random)
check_regions = _CosmoBolognaLib.check_regions

def reconstruction_fourier_space(data, random, random_RSD, cosmology, redshift, bias, cell_size, smoothing_radius, interpolation_type=0):
    return _CosmoBolognaLib.reconstruction_fourier_space(data, random, random_RSD, cosmology, redshift, bias, cell_size, smoothing_radius, interpolation_type)
reconstruction_fourier_space = _CosmoBolognaLib.reconstruction_fourier_space

def displaced_catalogue(input_catalogue):
    return _CosmoBolognaLib.displaced_catalogue(input_catalogue)
displaced_catalogue = _CosmoBolognaLib.displaced_catalogue

def fit_covariance_matrix_2PCF_monopole(*args):
    return _CosmoBolognaLib.fit_covariance_matrix_2PCF_monopole(*args)
fit_covariance_matrix_2PCF_monopole = _CosmoBolognaLib.fit_covariance_matrix_2PCF_monopole

def generate_mock_2PCF_monopole(*args):
    return _CosmoBolognaLib.generate_mock_2PCF_monopole(*args)
generate_mock_2PCF_monopole = _CosmoBolognaLib.generate_mock_2PCF_monopole

def generate_mock_2PCF_multipoles(*args):
    return _CosmoBolognaLib.generate_mock_2PCF_multipoles(*args)
generate_mock_2PCF_multipoles = _CosmoBolognaLib.generate_mock_2PCF_multipoles
class spherical_harmonics_coeff(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, spherical_harmonics_coeff, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, spherical_harmonics_coeff, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_spherical_harmonics_coeff(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_spherical_harmonics_coeff
    __del__ = lambda self: None

    def real(self, n, bin=0):
        return _CosmoBolognaLib.spherical_harmonics_coeff_real(self, n, bin)

    def imag(self, n, bin=0):
        return _CosmoBolognaLib.spherical_harmonics_coeff_imag(self, n, bin)

    def initialize(self, norder, nbins=1):
        return _CosmoBolognaLib.spherical_harmonics_coeff_initialize(self, norder, nbins)

    def reset(self):
        return _CosmoBolognaLib.spherical_harmonics_coeff_reset(self)

    def alm(self, xx, yy, zz):
        return _CosmoBolognaLib.spherical_harmonics_coeff_alm(self, xx, yy, zz)

    def add(self, *args):
        return _CosmoBolognaLib.spherical_harmonics_coeff_add(self, *args)

    def power(self, l, bin1, bin2):
        return _CosmoBolognaLib.spherical_harmonics_coeff_power(self, l, bin1, bin2)
spherical_harmonics_coeff_swigregister = _CosmoBolognaLib.spherical_harmonics_coeff_swigregister
spherical_harmonics_coeff_swigregister(spherical_harmonics_coeff)


def zeta_SphericalHarmonics(*args):
    return _CosmoBolognaLib.zeta_SphericalHarmonics(*args)
zeta_SphericalHarmonics = _CosmoBolognaLib.zeta_SphericalHarmonics

def count_triplets_SphericalHarmonics(*args):
    return _CosmoBolognaLib.count_triplets_SphericalHarmonics(*args)
count_triplets_SphericalHarmonics = _CosmoBolognaLib.count_triplets_SphericalHarmonics

def zeta_SphericalHarmonics_AllInOne(*args):
    return _CosmoBolognaLib.zeta_SphericalHarmonics_AllInOne(*args)
zeta_SphericalHarmonics_AllInOne = _CosmoBolognaLib.zeta_SphericalHarmonics_AllInOne

def count_triplets_classic(r12_min, r12_max, r13_min, r13_max, nbins, catalogue, tripletType):
    return _CosmoBolognaLib.count_triplets_classic(r12_min, r12_max, r13_min, r13_max, nbins, catalogue, tripletType)
count_triplets_classic = _CosmoBolognaLib.count_triplets_classic

def zeta_SphericalHarmonics_edgeCorrection(NNN, RRR, normalization=1.):
    return _CosmoBolognaLib.zeta_SphericalHarmonics_edgeCorrection(NNN, RRR, normalization)
zeta_SphericalHarmonics_edgeCorrection = _CosmoBolognaLib.zeta_SphericalHarmonics_edgeCorrection
class ReadParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReadParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_ReadParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_ReadParameters
    __del__ = lambda self: None

    def findString(self, *args):
        return _CosmoBolognaLib.ReadParameters_findString(self, *args)

    def findBool(self, *args):
        return _CosmoBolognaLib.ReadParameters_findBool(self, *args)

    def findInt(self, *args):
        return _CosmoBolognaLib.ReadParameters_findInt(self, *args)

    def findLong(self, *args):
        return _CosmoBolognaLib.ReadParameters_findLong(self, *args)

    def findFloat(self, *args):
        return _CosmoBolognaLib.ReadParameters_findFloat(self, *args)

    def findDouble(self, *args):
        return _CosmoBolognaLib.ReadParameters_findDouble(self, *args)

    def findVectorString(self, *args):
        return _CosmoBolognaLib.ReadParameters_findVectorString(self, *args)

    def findVectorBool(self, *args):
        return _CosmoBolognaLib.ReadParameters_findVectorBool(self, *args)

    def findVectorInt(self, *args):
        return _CosmoBolognaLib.ReadParameters_findVectorInt(self, *args)

    def findVectorLong(self, *args):
        return _CosmoBolognaLib.ReadParameters_findVectorLong(self, *args)

    def findVectorFloat(self, *args):
        return _CosmoBolognaLib.ReadParameters_findVectorFloat(self, *args)

    def findVectorDouble(self, *args):
        return _CosmoBolognaLib.ReadParameters_findVectorDouble(self, *args)
ReadParameters_swigregister = _CosmoBolognaLib.ReadParameters_swigregister
ReadParameters_swigregister(ReadParameters)

# This file is compatible with both classic and new-style classes.


