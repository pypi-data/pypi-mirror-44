#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# zfit documentation build configuration file, created by
# sphinx-quickstart on Fri Jun  9 13:47:02 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration value are present in this
# autogenerated file.
#
# All configuration value have a default; value that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another
# directory, add these directories to sys.path here. If the directory is
# relative to the documentation root, use os.path.abspath to make it
# absolute, like shown here.
#
import os
import sys

sys.path.insert(0, os.path.abspath('..'))

import zfit
import sphinx_rtd_theme

here = os.path.abspath(os.path.dirname(__file__))

# -- General configuration ---------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ['sphinx.ext.autodoc',
              'sphinx.ext.viewcode',
              'sphinx.ext.intersphinx',
              'sphinx.ext.coverage',
              'sphinx.ext.mathjax',
              'sphinx.ext.githubpages',
              'sphinx.ext.napoleon'
              ]

using_numpy_style = False  # False -> google style

# Napoleon settings (convert numpy/google docstrings to proper ReST
napoleon_google_docstring = not using_numpy_style
napoleon_numpy_docstring = using_numpy_style
napoleon_include_init_with_doc = False
napoleon_include_private_with_doc = False
napoleon_include_special_with_doc = True
napoleon_use_admonition_for_examples = False
napoleon_use_admonition_for_notes = False
napoleon_use_admonition_for_references = False
napoleon_use_ivar = False
napoleon_use_param = True
napoleon_use_rtype = True

# also doc __init__ docstrings
autoclass_content = 'both'

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'zfit'
copyright = u"2018, zfit"
author = u"zfit"

# The version info for the project you're documenting, acts as replacement
# for |version| and |release|, also used in various other places throughout
# the built documents.
#
# The short X.Y version.
version = zfit.__version__
# The full version, including alpha/beta/rc tags.
release = zfit.__version__

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False

# -- Options for HTML output -------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_rtd_theme"
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# Theme options are theme-specific and customize the look and feel of a
# theme further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# -- Options for HTMLHelp output ---------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'zfitdoc'

# -- Options for LaTeX output ------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
    }

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass
# [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'zfit.tex',
     u'zfit Documentation',
     u'zfit', 'manual'),
    ]

# -- Options for manual page output ------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'zfit',
     u'zfit Documentation',
     [author], 1)
    ]

# -- Options for Texinfo output ----------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'zfit',
     u'zfit Documentation',
     author,
     'zfit',
     'One line description of project.',
     'Miscellaneous'),
    ]

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'https://docs.python.org/': None}

rst_epilog = """
.. |range_init| replace:: This is the range object description

.. |limits_init| replace:: A tuple containing the limits (as tuple) per dimension. So a tuple of the shape (n_obs, 
n_lower_upper) is expected. The limits within one dimension are specified by a tuple like (lower1, upper1, lower2, 
upper2,...). This example contains two ranges, from lower1 to upper1 and from lower2 to upper 2 (+ ,... more). 
Example: ((-1, 5), (-4, 1, 2, 5)) translates to: first dimension goes from -1 to 5, the second dimension from -4 to 1 
and from 2 to 5.

.. |limits_arg_descr| replace:: If a :py:class:~`zfit.core.base.limits.Range` is given, it is used as limits. 
Otherwise arguments to instantiate a Range class can be given as follows.|limits_init|

.. |lower_arg_descr| replace:: The lower bounds of the intervall. Has to be of the form (n_intervalls, n_obs). The 
intervall is the differenz to the upper bounds. Example: ((-1, 4), (1, 6), (3, 10),...)  # 2-d function

.. |upper_arg_descr| replace:: The upper bounds of the intervall. Has to be of the form (n_intervalls, n_obs). The 
intervall is the differenz to the lower bounds. Example: ((-0.1, 5), (2, 8), (7, 14),...)  # 2-d function

.. |dims_arg_descr| replace:: The dimensions given as a tuple of integers.

.. |dtype_arg_descr| replace:: The DType of the return value. Defaults to the zfit default (usually float64).

.. |norm_range_arg_descr| replace:: The normalization range over which the function will be normalized (to 1).
"""
