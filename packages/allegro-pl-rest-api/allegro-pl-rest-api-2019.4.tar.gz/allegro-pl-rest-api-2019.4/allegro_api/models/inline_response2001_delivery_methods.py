# coding: utf-8

"""
    Allegro REST API

    https://developer.allegro.pl/about  # noqa: E501

    OpenAPI spec version: latest
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2001DeliveryMethods(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'payment_policy': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'payment_policy': 'paymentPolicy'
    }

    def __init__(self, id=None, name=None, payment_policy=None):  # noqa: E501
        """InlineResponse2001DeliveryMethods - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._name = None
        self._payment_policy = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if payment_policy is not None:
            self.payment_policy = payment_policy

    @property
    def id(self):
        """Gets the id of this InlineResponse2001DeliveryMethods.  # noqa: E501

        Delivery method ID  # noqa: E501

        :return: The id of this InlineResponse2001DeliveryMethods.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2001DeliveryMethods.

        Delivery method ID  # noqa: E501

        :param id: The id of this InlineResponse2001DeliveryMethods.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse2001DeliveryMethods.  # noqa: E501

        Delivery method name  # noqa: E501

        :return: The name of this InlineResponse2001DeliveryMethods.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse2001DeliveryMethods.

        Delivery method name  # noqa: E501

        :param name: The name of this InlineResponse2001DeliveryMethods.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def payment_policy(self):
        """Gets the payment_policy of this InlineResponse2001DeliveryMethods.  # noqa: E501

        Whether the payment is to be collected in advance or on delivery  # noqa: E501

        :return: The payment_policy of this InlineResponse2001DeliveryMethods.  # noqa: E501
        :rtype: str
        """
        return self._payment_policy

    @payment_policy.setter
    def payment_policy(self, payment_policy):
        """Sets the payment_policy of this InlineResponse2001DeliveryMethods.

        Whether the payment is to be collected in advance or on delivery  # noqa: E501

        :param payment_policy: The payment_policy of this InlineResponse2001DeliveryMethods.  # noqa: E501
        :type: str
        """
        allowed_values = ["IN_ADVANCE", "CASH_ON_DELIVERY"]  # noqa: E501
        if payment_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_policy, allowed_values)
            )

        self._payment_policy = payment_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001DeliveryMethods):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
