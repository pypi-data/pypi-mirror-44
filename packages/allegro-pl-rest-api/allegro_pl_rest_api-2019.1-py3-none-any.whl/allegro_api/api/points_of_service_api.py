# coding: utf-8

"""
    Allegro REST API

    https://developer.allegro.pl/about  # noqa: E501

    OpenAPI spec version: latest
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from allegro_api.api_client import ApiClient


class PointsOfServiceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_pos_using_post(self, pos, **kwargs):  # noqa: E501
        """Create a point of service  # noqa: E501

        Use this resource to create a point of service. More information about this resource you can find <a href=\"../../news/2017-08-11-punkty_odbioru/#1\" target=\"_blank\">here</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_pos_using_post(pos, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Pos pos: Point of service (required)
        :return: Pos
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_pos_using_post_with_http_info(pos, **kwargs)  # noqa: E501
        else:
            (data) = self.create_pos_using_post_with_http_info(pos, **kwargs)  # noqa: E501
            return data

    def create_pos_using_post_with_http_info(self, pos, **kwargs):  # noqa: E501
        """Create a point of service  # noqa: E501

        Use this resource to create a point of service. More information about this resource you can find <a href=\"../../news/2017-08-11-punkty_odbioru/#1\" target=\"_blank\">here</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_pos_using_post_with_http_info(pos, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Pos pos: Point of service (required)
        :return: Pos
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pos']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_pos_using_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pos' is set
        if ('pos' not in local_var_params or
                local_var_params['pos'] is None):
            raise ValueError("Missing the required parameter `pos` when calling `create_pos_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pos' in local_var_params:
            body_params = local_var_params['pos']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.allegro.public.v1+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.allegro.public.v1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer-token-for-user']  # noqa: E501

        return self.api_client.call_api(
            '/points-of-service', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Pos',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pos_using_delete(self, id, **kwargs):  # noqa: E501
        """Delete a point of service  # noqa: E501

        Use this resource to delete a point of service. More information about this resource you can find <a href=\"../../news/2017-08-11-punkty_odbioru/#5\" target=\"_blank\">here.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pos_using_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Point of service ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pos_using_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pos_using_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_pos_using_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a point of service  # noqa: E501

        Use this resource to delete a point of service. More information about this resource you can find <a href=\"../../news/2017-08-11-punkty_odbioru/#5\" target=\"_blank\">here.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pos_using_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Point of service ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pos_using_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_pos_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.allegro.public.v1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer-token-for-user']  # noqa: E501

        return self.api_client.call_api(
            '/points-of-service/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pos_data_using_get(self, id, **kwargs):  # noqa: E501
        """Get the details of a point of service  # noqa: E501

        Use this resource to get a details of a point of service for a given ID. More information about this resource you can find <a href=\"../../news/2017-08-11-punkty_odbioru/#4\" target=\"_blank\">here.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pos_data_using_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Point of service ID (required)
        :return: Pos
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pos_data_using_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pos_data_using_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_pos_data_using_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the details of a point of service  # noqa: E501

        Use this resource to get a details of a point of service for a given ID. More information about this resource you can find <a href=\"../../news/2017-08-11-punkty_odbioru/#4\" target=\"_blank\">here.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pos_data_using_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Point of service ID (required)
        :return: Pos
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pos_data_using_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_pos_data_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.allegro.public.v1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer-token-for-user']  # noqa: E501

        return self.api_client.call_api(
            '/points-of-service/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Pos',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pos_list_using_get(self, seller_id, **kwargs):  # noqa: E501
        """Get the user's points of service  # noqa: E501

        Use this resource to get a list of points of service by seller ID. More information about this resource you can find <a href=\"../../news/2017-08-11-punkty_odbioru/#3\" target=\"_blank\">here</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pos_list_using_get(seller_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str seller_id: User ID (required)
        :return: SearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pos_list_using_get_with_http_info(seller_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pos_list_using_get_with_http_info(seller_id, **kwargs)  # noqa: E501
            return data

    def get_pos_list_using_get_with_http_info(self, seller_id, **kwargs):  # noqa: E501
        """Get the user's points of service  # noqa: E501

        Use this resource to get a list of points of service by seller ID. More information about this resource you can find <a href=\"../../news/2017-08-11-punkty_odbioru/#3\" target=\"_blank\">here</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pos_list_using_get_with_http_info(seller_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str seller_id: User ID (required)
        :return: SearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['seller_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pos_list_using_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'seller_id' is set
        if ('seller_id' not in local_var_params or
                local_var_params['seller_id'] is None):
            raise ValueError("Missing the required parameter `seller_id` when calling `get_pos_list_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'seller_id' in local_var_params:
            query_params.append(('seller.id', local_var_params['seller_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.allegro.public.v1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer-token-for-user']  # noqa: E501

        return self.api_client.call_api(
            '/points-of-service', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_pos_using_put(self, id, pos, **kwargs):  # noqa: E501
        """Modify a point of service  # noqa: E501

        Use this resource to modify a point of service. More information about this resource you can find <a href=\"../../news/2017-08-11-punkty_odbioru/#2\" target=\"_blank\">here.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_pos_using_put(id, pos, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Point of service ID. Must match values with 'id' property from the body. (required)
        :param Pos pos: Point of service (required)
        :return: Pos
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_pos_using_put_with_http_info(id, pos, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_pos_using_put_with_http_info(id, pos, **kwargs)  # noqa: E501
            return data

    def modify_pos_using_put_with_http_info(self, id, pos, **kwargs):  # noqa: E501
        """Modify a point of service  # noqa: E501

        Use this resource to modify a point of service. More information about this resource you can find <a href=\"../../news/2017-08-11-punkty_odbioru/#2\" target=\"_blank\">here.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_pos_using_put_with_http_info(id, pos, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Point of service ID. Must match values with 'id' property from the body. (required)
        :param Pos pos: Point of service (required)
        :return: Pos
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'pos']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_pos_using_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `modify_pos_using_put`")  # noqa: E501
        # verify the required parameter 'pos' is set
        if ('pos' not in local_var_params or
                local_var_params['pos'] is None):
            raise ValueError("Missing the required parameter `pos` when calling `modify_pos_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pos' in local_var_params:
            body_params = local_var_params['pos']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.allegro.public.v1+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.allegro.public.v1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer-token-for-user']  # noqa: E501

        return self.api_client.call_api(
            '/points-of-service/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Pos',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
