# coding: utf-8

"""
    Allegro REST API

    https://developer.allegro.pl/about  # noqa: E501

    OpenAPI spec version: latest
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SellerRebateDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'benefits': 'list[Benefit]',
        'created_at': 'str',
        'id': 'str',
        'offer_criteria': 'list[OfferCriterion]',
        'status': 'str'
    }

    attribute_map = {
        'benefits': 'benefits',
        'created_at': 'createdAt',
        'id': 'id',
        'offer_criteria': 'offerCriteria',
        'status': 'status'
    }

    def __init__(self, benefits=None, created_at=None, id=None, offer_criteria=None, status=None):  # noqa: E501
        """SellerRebateDto - a model defined in OpenAPI"""  # noqa: E501

        self._benefits = None
        self._created_at = None
        self._id = None
        self._offer_criteria = None
        self._status = None
        self.discriminator = None

        self.benefits = benefits
        if created_at is not None:
            self.created_at = created_at
        self.id = id
        self.offer_criteria = offer_criteria
        self.status = status

    @property
    def benefits(self):
        """Gets the benefits of this SellerRebateDto.  # noqa: E501


        :return: The benefits of this SellerRebateDto.  # noqa: E501
        :rtype: list[Benefit]
        """
        return self._benefits

    @benefits.setter
    def benefits(self, benefits):
        """Sets the benefits of this SellerRebateDto.


        :param benefits: The benefits of this SellerRebateDto.  # noqa: E501
        :type: list[Benefit]
        """
        if benefits is None:
            raise ValueError("Invalid value for `benefits`, must not be `None`")  # noqa: E501

        self._benefits = benefits

    @property
    def created_at(self):
        """Gets the created_at of this SellerRebateDto.  # noqa: E501


        :return: The created_at of this SellerRebateDto.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SellerRebateDto.


        :param created_at: The created_at of this SellerRebateDto.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this SellerRebateDto.  # noqa: E501


        :return: The id of this SellerRebateDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SellerRebateDto.


        :param id: The id of this SellerRebateDto.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def offer_criteria(self):
        """Gets the offer_criteria of this SellerRebateDto.  # noqa: E501


        :return: The offer_criteria of this SellerRebateDto.  # noqa: E501
        :rtype: list[OfferCriterion]
        """
        return self._offer_criteria

    @offer_criteria.setter
    def offer_criteria(self, offer_criteria):
        """Sets the offer_criteria of this SellerRebateDto.


        :param offer_criteria: The offer_criteria of this SellerRebateDto.  # noqa: E501
        :type: list[OfferCriterion]
        """
        if offer_criteria is None:
            raise ValueError("Invalid value for `offer_criteria`, must not be `None`")  # noqa: E501

        self._offer_criteria = offer_criteria

    @property
    def status(self):
        """Gets the status of this SellerRebateDto.  # noqa: E501


        :return: The status of this SellerRebateDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SellerRebateDto.


        :param status: The status of this SellerRebateDto.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["ACTIVE", "INACTIVE", "SUSPENDED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SellerRebateDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
