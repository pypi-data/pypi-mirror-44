# coding: utf-8

"""
    Allegro REST API

    https://developer.allegro.pl/about  # noqa: E501

    OpenAPI spec version: latest
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DisputeAuthor(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'login': 'str',
        'role': 'DisputeAuthorRole'
    }

    attribute_map = {
        'login': 'login',
        'role': 'role'
    }

    def __init__(self, login=None, role=None):  # noqa: E501
        """DisputeAuthor - a model defined in OpenAPI"""  # noqa: E501

        self._login = None
        self._role = None
        self.discriminator = None

        if login is not None:
            self.login = login
        self.role = role

    @property
    def login(self):
        """Gets the login of this DisputeAuthor.  # noqa: E501

        Not present if role is ADMIN  # noqa: E501

        :return: The login of this DisputeAuthor.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this DisputeAuthor.

        Not present if role is ADMIN  # noqa: E501

        :param login: The login of this DisputeAuthor.  # noqa: E501
        :type: str
        """

        self._login = login

    @property
    def role(self):
        """Gets the role of this DisputeAuthor.  # noqa: E501


        :return: The role of this DisputeAuthor.  # noqa: E501
        :rtype: DisputeAuthorRole
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this DisputeAuthor.


        :param role: The role of this DisputeAuthor.  # noqa: E501
        :type: DisputeAuthorRole
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501

        self._role = role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DisputeAuthor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
