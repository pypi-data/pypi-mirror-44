import os
import sys
from sysdm.utils import get_output


def get_cmd_from_filename(fname):
    cmd = None
    if fname.endswith(".py"):
        cmd = get_output("which python") + " -u"
    elif fname.endswith(".sh"):
        cmd = get_output("which bash")
    else:
        raise ValueError("File extension of file '{fname}' not supported".format(fname=fname))
    return cmd.strip()


def get_extensions_from_filename(fname):
    cmd = None
    if fname.endswith(".py"):
        cmd = [".py"]
    elif fname.endswith(".sh"):
        cmd = [".sh"]
    else:
        raise ValueError("File extension of file '{fname}' not supported".format(fname=fname))
    return cmd


def get_exclusions_from_filename(fname):
    cmd = None
    if fname.endswith(".py"):
        cmd = ["flycheck_", "$", "#"]
    elif fname.endswith(".sh"):
        cmd = []
    else:
        raise ValueError("File extension of file '{fname}' not supported".format(fname=fname))
    return cmd


def create_service_template(args):
    user = get_output("echo $SUDO_USER")
    user_group = get_output("""getent group | grep $SUDO_GID: | awk -F ":" '{ print $1}'""").split(
        "\n"
    )[0]
    extra_args = " ".join(args.extra_args)
    cmd = get_cmd_from_filename(args.fname)
    here = os.path.abspath(".")
    service = (
        """
    [Unit]
    Description={desc} service (generated by sysdm)
    After=network-online.target
    PartOf={serv}_monitor.service

    [Service]
    User={user}
    Group={user_group}
    Type=simple
    Restart=always
    RestartSec=0
    ExecStart={cmd} {fname} {extra_args}
    WorkingDirectory={here}

    [Install]
    WantedBy=multi-user.target
    """.replace(
            "\n    ", "\n"
        )
        .format(
            desc=args.fname.replace(".", "_"),
            serv=args.fname.replace(".", "_"),
            user=user,
            user_group=user_group,
            cmd=cmd,
            fname=args.fname,
            extra_args=extra_args,
            here=here,
        )
        .strip()
    )
    return service


def create_service_monitor_template(args):
    user = get_output("echo $SUDO_USER")
    user_group = get_output("""getent group | grep $SUDO_GID: | awk -F ":" '{ print $1}'""")
    cmd = get_output("which sysdm")
    here = os.path.abspath(".")
    extensions = args.extensions or get_extensions_from_filename(args.fname)
    extensions = " ".join(extensions)
    exclude_patterns = args.exclude_patterns or get_exclusions_from_filename(args.fname)
    exclude_patterns = " ".join(exclude_patterns)
    exclude_patterns = "--exclude_patterns " + exclude_patterns if exclude_patterns else ""
    service = (
        """
    [Unit]
    Description={desc}.monitor service (generated by sysdm)
    After=network-online.target

    [Service]
    User={user}
    Group={user_group}
    Type=simple
    Restart=always
    RestartSec=0
    ExecStart={cmd} watch {extensions} {exclude_patterns}
    WorkingDirectory={here}

    [Install]
    WantedBy=multi-user.target
    """.replace(
            "\n    ", "\n"
        )
        .format(
            desc=args.fname.replace(".", "_"),
            user=user,
            user_group=user_group,
            cmd=cmd,
            extensions=extensions,
            exclude_patterns=exclude_patterns,
            here=here,
        )
        .strip()
    )
    return service


def install(args):
    service = create_service_template(args)
    service_name = args.fname.replace(".", "_")
    try:
        with open(args.systempath + "/" + service_name + ".service", "w") as f:
            f.write(service)
    except PermissionError:
        print("Need sudo to create systemd unit service file.")
        sys.exit(1)
    service = create_service_monitor_template(args)
    service_name = args.fname.replace(".", "_")
    with open(args.systempath + "/" + service_name + "_monitor.service", "w") as f:
        f.write(service)
    print("Created systemd unit file. It's contents:")
    _ = get_output("systemctl daemon-reload")
    _ = get_output("systemctl enable {service_name}".format(service_name=service_name))
    _ = get_output("systemctl start {service_name}".format(service_name=service_name))
    _ = get_output("systemctl enable {service_name}_monitor".format(service_name=service_name))
    _ = get_output("systemctl start {service_name}_monitor".format(service_name=service_name))
    return service_name


def show(args):
    service_name = args.fname.replace(".", "_")
    with open(args.systempath + "/" + service_name + ".service", "r") as f:
        print(f.read())
    with open(args.systempath + "/" + service_name + "_monitor.service", "r") as f:
        print(f.read())


def ls(args):
    units = []
    for fname in os.listdir(args.systempath):
        if "_monitor.s" in fname:
            continue
        fpath = args.systempath + "/" + fname
        if os.path.isdir(fpath):
            continue
        with open(fpath) as f:
            if "generated by " in f.read():
                units.append(fname.replace(".service", ""))
    return units
