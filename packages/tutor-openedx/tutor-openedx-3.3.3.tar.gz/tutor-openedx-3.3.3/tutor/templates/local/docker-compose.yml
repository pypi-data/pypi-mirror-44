version: "3"
services:

  ############# External services

  {% if ACTIVATE_MEMCACHED %}
  memcached:
    image: {{ DOCKER_REGISTRY }}{{ DOCKER_IMAGE_MEMCACHED }}
    restart: unless-stopped
  {% endif %}

  {% if ACTIVATE_MONGODB %}
  mongodb:
    image: {{ DOCKER_REGISTRY }}{{ DOCKER_IMAGE_MONGODB }}
    # Use WiredTiger in all environments, just like at edx.org
    command: mongod --smallfiles --nojournal --storageEngine wiredTiger
    restart: unless-stopped
    volumes:
      - ../../data/mongodb:/data/db
  {% endif %}

  {% if ACTIVATE_MYSQL %}
  mysql:
    image: {{ DOCKER_REGISTRY }}{{ DOCKER_IMAGE_MYSQL }}
    command: mysqld --character-set-server=utf8 --collation-server=utf8_general_ci
    restart: unless-stopped
    volumes:
      - ../../data/mysql:/var/lib/mysql
    env_file: ../apps/mysql/auth.env
  {% endif %}

  {% if ACTIVATE_ELASTICSEARCH %}
  elasticsearch:
    image: {{ DOCKER_REGISTRY }}{{ DOCKER_IMAGE_ELASTICSEARCH }}
    environment:
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - "cluster.name=openedx"
      - "bootstrap.memory_lock=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    restart: unless-stopped
    volumes:
      - ../../data/elasticsearch:/usr/share/elasticsearch/data
  {% endif %}

  openedx-assets:
    image: {{ DOCKER_REGISTRY }}{{ DOCKER_IMAGE_OPENEDX }}
    volumes:
      - ../../data/openedx:/var/www/openedx
    command: bash -c "rm -rf /var/www/openedx/staticfiles && cp -r /openedx/staticfiles/ /var/www/openedx/"

  nginx:
    image: {{ DOCKER_REGISTRY }}{{ DOCKER_IMAGE_NGINX }}
    restart: unless-stopped
    ports:
      - "{{ NGINX_HTTP_PORT }}:80"
      - "{{ NGINX_HTTPS_PORT }}:443"
    volumes:
      - ../apps/nginx:/etc/nginx/conf.d/
      - ../../data/openedx:/var/www/openedx:ro
      - ../../data/cms:/openedx/data/cms/:ro
      - ../../data/lms:/openedx/data/lms/:ro
      - ../../data/letsencrypt:/etc/letsencrypt/:ro
    depends_on:
      - lms
      - cms
      {% if ACTIVATE_NOTES %}- notes{% endif %}

  {% if ACTIVATE_RABBITMQ %}
  rabbitmq:
    image: {{ DOCKER_REGISTRY }}{{ DOCKER_IMAGE_RABBITMQ }}
    volumes:
      - ../../data/rabbitmq:/var/lib/rabbitmq
    restart: unless-stopped
  {% endif %}

  {% if ACTIVATE_SMTP %}
  smtp:
    image: {{ DOCKER_REGISTRY }}{{ DOCKER_IMAGE_SMTP }}
    restart: unless-stopped
  {% endif %}

  ############# Forum

  forum:
    image: {{ DOCKER_REGISTRY }}{{ DOCKER_IMAGE_FORUM }}
    environment:
      SEARCH_SERVER: "http://{{ ELASTICSEARCH_HOST }}:{{ ELASTICSEARCH_PORT }}"
      MONGOHQ_URL: "mongodb://{% if MONGODB_USERNAME and MONGODB_PASSWORD %}{{ MONGODB_USERNAME}}:{{ MONGODB_PASSWORD }}@{% endif %}{{ MONGODB_HOST }}:{{ MONGODB_PORT }}/cs_comments_service"
    restart: unless-stopped
    depends_on:
      {% if ACTIVATE_ELASTICSEARCH %}- elasticsearch{% endif %}
      {% if ACTIVATE_MONGODB %}- mongodb{% endif %}

  ############# LMS and CMS

  lms:
    image: {{ DOCKER_REGISTRY }}{{ DOCKER_IMAGE_OPENEDX }}
    environment:
      SERVICE_VARIANT: lms
      SETTINGS: ${EDX_PLATFORM_SETTINGS:-tutor.production}
    restart: unless-stopped
    volumes:
      - ../apps/openedx/settings/lms/:/openedx/edx-platform/lms/envs/tutor/
      - ../apps/openedx/settings/cms/:/openedx/edx-platform/cms/envs/tutor/
      - ../apps/openedx/config/:/openedx/config/
      - ../../data/lms:/openedx/data
    depends_on:
      {% if ACTIVATE_ELASTICSEARCH %}- elasticsearch{% endif %}
      - forum
      {% if ACTIVATE_MEMCACHED %}- memcached{% endif %}
      {% if ACTIVATE_MONGODB %}- mongodb{% endif %}
      {% if ACTIVATE_MYSQL %}- mysql{% endif %}
      {% if ACTIVATE_RABBITMQ %}- rabbitmq{% endif %}
      {% if ACTIVATE_SMTP %}- smtp{% endif %}

  cms:
    image: {{ DOCKER_REGISTRY }}{{ DOCKER_IMAGE_OPENEDX }}
    environment:
      SERVICE_VARIANT: cms
      SETTINGS: ${EDX_PLATFORM_SETTINGS:-tutor.production}
    restart: unless-stopped
    volumes:
      - ../apps/openedx/settings/lms/:/openedx/edx-platform/lms/envs/tutor/
      - ../apps/openedx/settings/cms/:/openedx/edx-platform/cms/envs/tutor/
      - ../apps/openedx/config/:/openedx/config/
      - ../../data/cms:/openedx/data
    depends_on:
      {% if ACTIVATE_ELASTICSEARCH %}- elasticsearch{% endif %}
      {% if ACTIVATE_MEMCACHED %}- memcached{% endif %}
      {% if ACTIVATE_MONGODB %}- mongodb{% endif %}
      {% if ACTIVATE_MYSQL %}- mysql{% endif %}
      {% if ACTIVATE_RABBITMQ %}- rabbitmq{% endif %}
      {% if ACTIVATE_SMTP %}- smtp{% endif %}

  ############# LMS and CMS workers

  # We could probably create one service per queue here. For small instances, it is not necessary.
  lms_worker:
    image: {{ DOCKER_REGISTRY }}{{ DOCKER_IMAGE_OPENEDX }}
    environment:
      SERVICE_VARIANT: lms
      SETTINGS: ${EDX_PLATFORM_SETTINGS:-tutor.production}
      C_FORCE_ROOT: "1" # run celery tasks as root #nofear
    command: ./manage.py lms celery worker --loglevel=info --hostname=edx.lms.core.default.%%h --maxtasksperchild 100
    restart: unless-stopped
    volumes:
      - ../apps/openedx/settings/lms/:/openedx/edx-platform/lms/envs/tutor/
      - ../apps/openedx/settings/cms/:/openedx/edx-platform/cms/envs/tutor/
      - ../apps/openedx/config/:/openedx/config/
      - ../../data/lms:/openedx/data
    depends_on:
      - lms

  cms_worker:
    image: {{ DOCKER_REGISTRY }}{{ DOCKER_IMAGE_OPENEDX }}
    environment:
      SERVICE_VARIANT: cms
      SETTINGS: ${EDX_PLATFORM_SETTINGS:-tutor.production}
      C_FORCE_ROOT: "1" # run celery tasks as root #nofear
    command: ./manage.py cms celery worker --loglevel=info --hostname=edx.cms.core.default.%%h --maxtasksperchild 100
    restart: unless-stopped
    volumes:
      - ../apps/openedx/settings/lms/:/openedx/edx-platform/lms/envs/tutor/
      - ../apps/openedx/settings/cms/:/openedx/edx-platform/cms/envs/tutor/
      - ../apps/openedx/config/:/openedx/config/
      - ../../data/cms:/openedx/data
    depends_on:
      - cms

  {% if ACTIVATE_NOTES %}
  ############# Notes: backend store for edX Student Notes
  notes:
    image: {{ DOCKER_REGISTRY }}{{ DOCKER_IMAGE_NOTES }}
    networks:
      default:
        aliases:
          - notes.openedx
    environment:
      DJANGO_SETTINGS_MODULE: notesserver.settings.tutor
    volumes:
      - ../apps/notes/settings/tutor.py:/openedx/edx-notes-api/notesserver/settings/tutor.py
      - ../../data/notes:/openedx/data
    restart: unless-stopped
    depends_on:
      {% if ACTIVATE_MYSQL %}- mysql{% endif %}
  {% endif %}

  {% if ACTIVATE_XQUEUE %}
  ############# Xqueue: external grading of Open edX problems
  xqueue:
    image: {{ DOCKER_REGISTRY }}{{ DOCKER_IMAGE_XQUEUE }}
    volumes:
      - ../apps/xqueue/settings/tutor.py:/openedx/xqueue/xqueue/tutor.py
      - ../../data/xqueue:/openedx/data
    environment:
      DJANGO_SETTINGS_MODULE: xqueue.tutor
    restart: unless-stopped
    depends_on:
      {% if ACTIVATE_MYSQL %}- mysql{% endif %}

  xqueue_consumer:
    image: {{ DOCKER_REGISTRY }}{{ DOCKER_IMAGE_XQUEUE }}
    volumes:
      - ../apps/xqueue/settings/tutor.py:/openedx/xqueue/xqueue/tutor.py
      - ../../data/xqueue:/openedx/data
    environment:
      DJANGO_SETTINGS_MODULE: xqueue.tutor
    restart: unless-stopped
    command: ./manage.py run_consumer
    depends_on:
      {% if ACTIVATE_MYSQL %}- mysql{% endif %}
  {% endif %}
