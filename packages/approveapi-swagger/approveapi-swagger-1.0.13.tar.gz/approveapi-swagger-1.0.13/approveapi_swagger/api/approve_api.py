# coding: utf-8

"""
    ApproveAPISwagger

    The simple API to request a user's approval on anything via email + sms.  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: dev@approveapi.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from approveapi_swagger.api_client import ApiClient


class ApproveApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_prompt(self, create_prompt_request, **kwargs):  # noqa: E501
        """Sending a prompt  # noqa: E501

        Creates a prompt and pushes it to the user (sends via email, sms, or other supported protocols).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_prompt(create_prompt_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreatePromptRequest create_prompt_request: (required)
        :return: Prompt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_prompt_with_http_info(create_prompt_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_prompt_with_http_info(create_prompt_request, **kwargs)  # noqa: E501
            return data

    def create_prompt_with_http_info(self, create_prompt_request, **kwargs):  # noqa: E501
        """Sending a prompt  # noqa: E501

        Creates a prompt and pushes it to the user (sends via email, sms, or other supported protocols).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_prompt_with_http_info(create_prompt_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreatePromptRequest create_prompt_request: (required)
        :return: Prompt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['create_prompt_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_prompt" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'create_prompt_request' is set
        if ('create_prompt_request' not in local_var_params or
                local_var_params['create_prompt_request'] is None):
            raise ValueError("Missing the required parameter `create_prompt_request` when calling `create_prompt`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_prompt_request' in local_var_params:
            body_params = local_var_params['create_prompt_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/prompt', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Prompt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_prompt(self, id, **kwargs):  # noqa: E501
        """Retrieve a prompt  # noqa: E501

        Retrieve the prompt object with the given ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_prompt(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The identifier for a pending or completed prompt. This is returned when you create a prompt. (required)
        :param bool long_poll: If true, the request waits (long-polls) until the user responds to the prompt or more than 10 minutes pass. Defaults to false.
        :return: Prompt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_prompt_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_prompt_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_prompt_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve a prompt  # noqa: E501

        Retrieve the prompt object with the given ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_prompt_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The identifier for a pending or completed prompt. This is returned when you create a prompt. (required)
        :param bool long_poll: If true, the request waits (long-polls) until the user responds to the prompt or more than 10 minutes pass. Defaults to false.
        :return: Prompt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'long_poll']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_prompt" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_prompt`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'long_poll' in local_var_params:
            query_params.append(('long_poll', local_var_params['long_poll']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/prompt/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Prompt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_prompt_status(self, id, **kwargs):  # noqa: E501
        """Check prompt status  # noqa: E501

        Returns whether a prompt has been completed by the user. This request does not require authentication, and so can be used client-side without sharing API credentials.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_prompt_status(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The prompt identifier. (required)
        :return: PromptStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_prompt_status_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_prompt_status_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_prompt_status_with_http_info(self, id, **kwargs):  # noqa: E501
        """Check prompt status  # noqa: E501

        Returns whether a prompt has been completed by the user. This request does not require authentication, and so can be used client-side without sharing API credentials.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_prompt_status_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The prompt identifier. (required)
        :return: PromptStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_prompt_status" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_prompt_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/prompt/{id}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PromptStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
