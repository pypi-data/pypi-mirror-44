# coding: utf-8

"""
    ApproveAPISwagger

    The simple API to request a user's approval on anything via email + sms.  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: dev@approveapi.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AnswerMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'slack_real_name': 'str',
        'operating_system': 'str',
        'slack_username': 'str',
        'ip_address': 'str',
        'slack_email': 'str',
        'browser': 'str'
    }

    attribute_map = {
        'slack_real_name': 'slack_real_name',
        'operating_system': 'operating_system',
        'slack_username': 'slack_username',
        'ip_address': 'ip_address',
        'slack_email': 'slack_email',
        'browser': 'browser'
    }

    def __init__(self, slack_real_name=None, operating_system=None, slack_username=None, ip_address=None, slack_email=None, browser=None):  # noqa: E501
        """AnswerMetadata - a model defined in OpenAPI"""  # noqa: E501

        self._slack_real_name = None
        self._operating_system = None
        self._slack_username = None
        self._ip_address = None
        self._slack_email = None
        self._browser = None
        self.discriminator = None

        if slack_real_name is not None:
            self.slack_real_name = slack_real_name
        if operating_system is not None:
            self.operating_system = operating_system
        if slack_username is not None:
            self.slack_username = slack_username
        if ip_address is not None:
            self.ip_address = ip_address
        if slack_email is not None:
            self.slack_email = slack_email
        if browser is not None:
            self.browser = browser

    @property
    def slack_real_name(self):
        """Gets the slack_real_name of this AnswerMetadata.  # noqa: E501


        :return: The slack_real_name of this AnswerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._slack_real_name

    @slack_real_name.setter
    def slack_real_name(self, slack_real_name):
        """Sets the slack_real_name of this AnswerMetadata.


        :param slack_real_name: The slack_real_name of this AnswerMetadata.  # noqa: E501
        :type: str
        """

        self._slack_real_name = slack_real_name

    @property
    def operating_system(self):
        """Gets the operating_system of this AnswerMetadata.  # noqa: E501


        :return: The operating_system of this AnswerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this AnswerMetadata.


        :param operating_system: The operating_system of this AnswerMetadata.  # noqa: E501
        :type: str
        """

        self._operating_system = operating_system

    @property
    def slack_username(self):
        """Gets the slack_username of this AnswerMetadata.  # noqa: E501


        :return: The slack_username of this AnswerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._slack_username

    @slack_username.setter
    def slack_username(self, slack_username):
        """Sets the slack_username of this AnswerMetadata.


        :param slack_username: The slack_username of this AnswerMetadata.  # noqa: E501
        :type: str
        """

        self._slack_username = slack_username

    @property
    def ip_address(self):
        """Gets the ip_address of this AnswerMetadata.  # noqa: E501


        :return: The ip_address of this AnswerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this AnswerMetadata.


        :param ip_address: The ip_address of this AnswerMetadata.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def slack_email(self):
        """Gets the slack_email of this AnswerMetadata.  # noqa: E501


        :return: The slack_email of this AnswerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._slack_email

    @slack_email.setter
    def slack_email(self, slack_email):
        """Sets the slack_email of this AnswerMetadata.


        :param slack_email: The slack_email of this AnswerMetadata.  # noqa: E501
        :type: str
        """

        self._slack_email = slack_email

    @property
    def browser(self):
        """Gets the browser of this AnswerMetadata.  # noqa: E501


        :return: The browser of this AnswerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._browser

    @browser.setter
    def browser(self, browser):
        """Sets the browser of this AnswerMetadata.


        :param browser: The browser of this AnswerMetadata.  # noqa: E501
        :type: str
        """

        self._browser = browser

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnswerMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
