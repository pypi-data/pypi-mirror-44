# coding: utf-8

"""
    ApproveAPISwagger

    The simple API to request a user's approval on anything via email + sms.  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: dev@approveapi.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PromptAnswer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'result': 'bool',
        'time': 'float',
        'metadata': 'AnswerMetadata'
    }

    attribute_map = {
        'result': 'result',
        'time': 'time',
        'metadata': 'metadata'
    }

    def __init__(self, result=None, time=None, metadata=None):  # noqa: E501
        """PromptAnswer - a model defined in OpenAPI"""  # noqa: E501

        self._result = None
        self._time = None
        self._metadata = None
        self.discriminator = None

        self.result = result
        self.time = time
        if metadata is not None:
            self.metadata = metadata

    @property
    def result(self):
        """Gets the result of this PromptAnswer.  # noqa: E501

        The user's answer to whether or not they approve this prompt.  # noqa: E501

        :return: The result of this PromptAnswer.  # noqa: E501
        :rtype: bool
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this PromptAnswer.

        The user's answer to whether or not they approve this prompt.  # noqa: E501

        :param result: The result of this PromptAnswer.  # noqa: E501
        :type: bool
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def time(self):
        """Gets the time of this PromptAnswer.  # noqa: E501

        The unix timestamp when the user answered the prompt.  # noqa: E501

        :return: The time of this PromptAnswer.  # noqa: E501
        :rtype: float
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this PromptAnswer.

        The unix timestamp when the user answered the prompt.  # noqa: E501

        :param time: The time of this PromptAnswer.  # noqa: E501
        :type: float
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def metadata(self):
        """Gets the metadata of this PromptAnswer.  # noqa: E501


        :return: The metadata of this PromptAnswer.  # noqa: E501
        :rtype: AnswerMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PromptAnswer.


        :param metadata: The metadata of this PromptAnswer.  # noqa: E501
        :type: AnswerMetadata
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PromptAnswer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
