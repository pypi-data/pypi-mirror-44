# coding: utf-8

"""
    ApproveAPISwagger

    The simple API to request a user's approval on anything via email + sms.  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: dev@approveapi.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PromptMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'location': 'str',
        'time': 'str',
        'ip_address': 'str',
        'browser': 'str',
        'operating_system': 'str'
    }

    attribute_map = {
        'location': 'location',
        'time': 'time',
        'ip_address': 'ip_address',
        'browser': 'browser',
        'operating_system': 'operating_system'
    }

    def __init__(self, location=None, time=None, ip_address=None, browser=None, operating_system=None):  # noqa: E501
        """PromptMetadata - a model defined in OpenAPI"""  # noqa: E501

        self._location = None
        self._time = None
        self._ip_address = None
        self._browser = None
        self._operating_system = None
        self.discriminator = None

        if location is not None:
            self.location = location
        if time is not None:
            self.time = time
        if ip_address is not None:
            self.ip_address = ip_address
        if browser is not None:
            self.browser = browser
        if operating_system is not None:
            self.operating_system = operating_system

    @property
    def location(self):
        """Gets the location of this PromptMetadata.  # noqa: E501

        The physical location, like Oakland, CA, of the action.  # noqa: E501

        :return: The location of this PromptMetadata.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PromptMetadata.

        The physical location, like Oakland, CA, of the action.  # noqa: E501

        :param location: The location of this PromptMetadata.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def time(self):
        """Gets the time of this PromptMetadata.  # noqa: E501

        The date/time of the action.  # noqa: E501

        :return: The time of this PromptMetadata.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this PromptMetadata.

        The date/time of the action.  # noqa: E501

        :param time: The time of this PromptMetadata.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def ip_address(self):
        """Gets the ip_address of this PromptMetadata.  # noqa: E501

        The IP address of the computer initiating the action.  # noqa: E501

        :return: The ip_address of this PromptMetadata.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this PromptMetadata.

        The IP address of the computer initiating the action.  # noqa: E501

        :param ip_address: The ip_address of this PromptMetadata.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def browser(self):
        """Gets the browser of this PromptMetadata.  # noqa: E501

        The web browser initiating the action, i.e. Chrome.  # noqa: E501

        :return: The browser of this PromptMetadata.  # noqa: E501
        :rtype: str
        """
        return self._browser

    @browser.setter
    def browser(self, browser):
        """Sets the browser of this PromptMetadata.

        The web browser initiating the action, i.e. Chrome.  # noqa: E501

        :param browser: The browser of this PromptMetadata.  # noqa: E501
        :type: str
        """

        self._browser = browser

    @property
    def operating_system(self):
        """Gets the operating_system of this PromptMetadata.  # noqa: E501

        The operating system initiating the action, i.e. Mac OS X.  # noqa: E501

        :return: The operating_system of this PromptMetadata.  # noqa: E501
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this PromptMetadata.

        The operating system initiating the action, i.e. Mac OS X.  # noqa: E501

        :param operating_system: The operating_system of this PromptMetadata.  # noqa: E501
        :type: str
        """

        self._operating_system = operating_system

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PromptMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
