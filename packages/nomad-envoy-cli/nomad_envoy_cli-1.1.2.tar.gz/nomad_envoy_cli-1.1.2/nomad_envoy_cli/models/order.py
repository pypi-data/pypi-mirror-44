# coding: utf-8

"""
    Nomad Envoy

    This is the API descriptor for the Nomad Envoy API, responsible for order creation and product lists.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: paul@samarkand.global
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Order(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'order_id': 'str',
        'client_order_ref': 'str',
        'items': 'list[OrderProduct]',
        'customer': 'Address',
        'status': 'str'
    }

    attribute_map = {
        'order_id': 'orderId',
        'client_order_ref': 'clientOrderRef',
        'items': 'items',
        'customer': 'customer',
        'status': 'status'
    }

    def __init__(self, order_id=None, client_order_ref=None, items=None, customer=None, status=None):  # noqa: E501
        """Order - a model defined in OpenAPI"""  # noqa: E501

        self._order_id = None
        self._client_order_ref = None
        self._items = None
        self._customer = None
        self._status = None
        self.discriminator = None

        if order_id is not None:
            self.order_id = order_id
        if client_order_ref is not None:
            self.client_order_ref = client_order_ref
        if items is not None:
            self.items = items
        if customer is not None:
            self.customer = customer
        if status is not None:
            self.status = status

    @property
    def order_id(self):
        """Gets the order_id of this Order.  # noqa: E501

        Order ID ref (Odoo platform).  # noqa: E501

        :return: The order_id of this Order.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this Order.

        Order ID ref (Odoo platform).  # noqa: E501

        :param order_id: The order_id of this Order.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def client_order_ref(self):
        """Gets the client_order_ref of this Order.  # noqa: E501

        Client order ref (third party platform)  # noqa: E501

        :return: The client_order_ref of this Order.  # noqa: E501
        :rtype: str
        """
        return self._client_order_ref

    @client_order_ref.setter
    def client_order_ref(self, client_order_ref):
        """Sets the client_order_ref of this Order.

        Client order ref (third party platform)  # noqa: E501

        :param client_order_ref: The client_order_ref of this Order.  # noqa: E501
        :type: str
        """

        self._client_order_ref = client_order_ref

    @property
    def items(self):
        """Gets the items of this Order.  # noqa: E501

        Products in order.  # noqa: E501

        :return: The items of this Order.  # noqa: E501
        :rtype: list[OrderProduct]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Order.

        Products in order.  # noqa: E501

        :param items: The items of this Order.  # noqa: E501
        :type: list[OrderProduct]
        """

        self._items = items

    @property
    def customer(self):
        """Gets the customer of this Order.  # noqa: E501


        :return: The customer of this Order.  # noqa: E501
        :rtype: Address
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this Order.


        :param customer: The customer of this Order.  # noqa: E501
        :type: Address
        """

        self._customer = customer

    @property
    def status(self):
        """Gets the status of this Order.  # noqa: E501

        View valid status at get /order query params  # noqa: E501

        :return: The status of this Order.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Order.

        View valid status at get /order query params  # noqa: E501

        :param status: The status of this Order.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Order):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
