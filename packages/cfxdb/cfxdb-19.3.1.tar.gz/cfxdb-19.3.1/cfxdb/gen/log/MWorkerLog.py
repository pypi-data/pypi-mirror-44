# automatically generated by the FlatBuffers compiler, do not modify

# namespace: log

import flatbuffers

# /// Logs of runs (from worker start to end) of managed node workers.
class MWorkerLog(object):
    __slots__ = ['_tab']

    # MWorkerLog
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

# /// Unix time in ns.
    # MWorkerLog
    def Timestamp(self): return self._tab.Get(flatbuffers.number_types.Uint64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
# /// Type of worker.
    # MWorkerLog
    def Type(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))
# /// Current state of worker.
    # MWorkerLog
    def State(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(9))
# /// Process ID on the host running the worker (native OS PID).
    # MWorkerLog
    def Pid(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(12))
# /// Process state, eg sleeping or running.
    # MWorkerLog
    def Pstate(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(16))
    # MWorkerLog
    def Counter(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(20))
# /// Current load.
    # MWorkerLog
    def NumFds(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(24))
    # MWorkerLog
    def NumThreads(self): return self._tab.Get(flatbuffers.number_types.Uint16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(28))
    # MWorkerLog
    def NumCtxSwitchesInvoluntary(self): return self._tab.Get(flatbuffers.number_types.Uint64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(32))
    # MWorkerLog
    def NumCtxSwitchesInvoluntaryPerSec(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(40))
    # MWorkerLog
    def NumCtxSwitchesVoluntary(self): return self._tab.Get(flatbuffers.number_types.Uint64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(48))
    # MWorkerLog
    def NumCtxSwitchesVoluntaryPerSec(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(56))
# /// CPU load
    # MWorkerLog
    def CpuSystem(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(60))
    # MWorkerLog
    def CpuSystemPerSec(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(64))
    # MWorkerLog
    def CpuWait(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(68))
    # MWorkerLog
    def CpuWaitPerSec(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(72))
    # MWorkerLog
    def CpuUser(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(76))
    # MWorkerLog
    def CpuUserPerSec(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(80))
# /// Disk load
    # MWorkerLog
    def ReadBytes(self): return self._tab.Get(flatbuffers.number_types.Uint64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(88))
    # MWorkerLog
    def ReadBytesPerSec(self): return self._tab.Get(flatbuffers.number_types.Uint64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(96))
    # MWorkerLog
    def ReadIos(self): return self._tab.Get(flatbuffers.number_types.Uint64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(104))
    # MWorkerLog
    def ReadIosPerSec(self): return self._tab.Get(flatbuffers.number_types.Uint64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(112))
    # MWorkerLog
    def WriteBytes(self): return self._tab.Get(flatbuffers.number_types.Uint64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(120))
    # MWorkerLog
    def WriteBytesPerSec(self): return self._tab.Get(flatbuffers.number_types.Uint64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(128))
    # MWorkerLog
    def WriteIos(self): return self._tab.Get(flatbuffers.number_types.Uint64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(136))
    # MWorkerLog
    def WriteIosPerSec(self): return self._tab.Get(flatbuffers.number_types.Uint64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(144))
# /// Network load
    # MWorkerLog
    def SentBytes(self): return self._tab.Get(flatbuffers.number_types.Uint64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(152))
    # MWorkerLog
    def SentBytesPerSec(self): return self._tab.Get(flatbuffers.number_types.Uint64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(160))
    # MWorkerLog
    def SentIos(self): return self._tab.Get(flatbuffers.number_types.Uint64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(168))
    # MWorkerLog
    def SentIosPerSec(self): return self._tab.Get(flatbuffers.number_types.Uint64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(176))
    # MWorkerLog
    def RecvBytes(self): return self._tab.Get(flatbuffers.number_types.Uint64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(184))
    # MWorkerLog
    def RecvBytesPerSec(self): return self._tab.Get(flatbuffers.number_types.Uint64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(192))
    # MWorkerLog
    def RecvIos(self): return self._tab.Get(flatbuffers.number_types.Uint64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(200))
    # MWorkerLog
    def RecvIosPerSec(self): return self._tab.Get(flatbuffers.number_types.Uint64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(208))

def CreateMWorkerLog(builder, timestamp, type, state, pid, pstate, counter, numFds, numThreads, numCtxSwitchesInvoluntary, numCtxSwitchesInvoluntaryPerSec, numCtxSwitchesVoluntary, numCtxSwitchesVoluntaryPerSec, cpuSystem, cpuSystemPerSec, cpuWait, cpuWaitPerSec, cpuUser, cpuUserPerSec, readBytes, readBytesPerSec, readIos, readIosPerSec, writeBytes, writeBytesPerSec, writeIos, writeIosPerSec, sentBytes, sentBytesPerSec, sentIos, sentIosPerSec, recvBytes, recvBytesPerSec, recvIos, recvIosPerSec):
    builder.Prep(8, 216)
    builder.PrependUint64(recvIosPerSec)
    builder.PrependUint64(recvIos)
    builder.PrependUint64(recvBytesPerSec)
    builder.PrependUint64(recvBytes)
    builder.PrependUint64(sentIosPerSec)
    builder.PrependUint64(sentIos)
    builder.PrependUint64(sentBytesPerSec)
    builder.PrependUint64(sentBytes)
    builder.PrependUint64(writeIosPerSec)
    builder.PrependUint64(writeIos)
    builder.PrependUint64(writeBytesPerSec)
    builder.PrependUint64(writeBytes)
    builder.PrependUint64(readIosPerSec)
    builder.PrependUint64(readIos)
    builder.PrependUint64(readBytesPerSec)
    builder.PrependUint64(readBytes)
    builder.Pad(4)
    builder.PrependFloat32(cpuUserPerSec)
    builder.PrependFloat32(cpuUser)
    builder.PrependFloat32(cpuWaitPerSec)
    builder.PrependFloat32(cpuWait)
    builder.PrependFloat32(cpuSystemPerSec)
    builder.PrependFloat32(cpuSystem)
    builder.PrependUint32(numCtxSwitchesVoluntaryPerSec)
    builder.PrependUint64(numCtxSwitchesVoluntary)
    builder.Pad(4)
    builder.PrependUint32(numCtxSwitchesInvoluntaryPerSec)
    builder.PrependUint64(numCtxSwitchesInvoluntary)
    builder.Pad(2)
    builder.PrependUint16(numThreads)
    builder.PrependUint32(numFds)
    builder.PrependUint32(counter)
    builder.Pad(3)
    builder.PrependUint8(pstate)
    builder.PrependUint32(pid)
    builder.Pad(2)
    builder.PrependUint8(state)
    builder.PrependUint8(type)
    builder.PrependUint64(timestamp)
    return builder.Offset()
