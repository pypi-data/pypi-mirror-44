.\" Man page generated from reStructuredText.
.
.TH RTCON 1 "2015-08-13" "4.0" "User commands"
.SH NAME
rtcon \- ポートを接続する
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH 書式
.sp
rtcon [options] <path 1> <path 2> [<path 3> ...]
.SH 概要
.sp
二つ以上のデータポートやサービスポートを接続します。
.sp
データポートの場合に有効なプロパティは:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\- dataport.data_type　(ポートのデータ型）
\- dataport.dataflow_type　（データの流れ方法）
\- dataport.interface_type　（ポートのプロトコル）
\- dateport.serializer.cdr.endian
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
サービスポートの場合に有効なプロパティは:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\- port.port_type
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
データポートの場合、以下のプロパティも使えます。プロパティの間に依存が
ありますので、プロパティによって他のプロパティは影響がない時もあります。
.TS
center;
|l|l|l|.
_
T{
プロパティ
T}	T{
値
T}	T{
依存
T}
_
T{
dataport.inport.buffer.length
T}	T{
<integer>
T}	T{
T}
_
T{
dataport.inport.buffer.read.timeout
T}	T{
<float> in seconds
T}	T{
T}
_
T{
dataport.inport.buffer.read.empty_policy
T}	T{
readback, do_nothing, block
T}	T{
T}
_
T{
dataport.inport.buffer.write.timeout
T}	T{
<float> in seconds
T}	T{
T}
_
T{
dataport.inport.buffer.write.full_policy
T}	T{
overwrite, do_nothing, block
T}	T{
T}
_
T{
dataport.outport.buffer.length
T}	T{
<integer>
T}	T{
T}
_
T{
dataport.outport.buffer.read.timeout
T}	T{
<float> in seconds
T}	T{
T}
_
T{
dataport.outport.buffer.read.empty_policy
T}	T{
readback, do_nothing, block
T}	T{
T}
_
T{
dataport.outport.buffer.write.timeout
T}	T{
<float> in seconds
T}	T{
T}
_
T{
dataport.outport.buffer.write.full_policy
T}	T{
overwrite, do_nothing, block
T}	T{
T}
_
T{
dataport.subscription_type
T}	T{
flush, new, periodic
T}	T{
dataport.dataflow_typeがpush
T}
_
T{
dataport.publisher.push_policy
T}	T{
all, fifo, skip, new
T}	T{
dataport.subscription_typeがflushではない
T}
_
T{
dataport.push_rate
T}	T{
<float> in Hz
T}	T{
dataport.subscription_typeがperiodic
T}
_
T{
dataport.publisher.skip_count
T}	T{
<integer>
T}	T{
dataport.publisher.push_policyがskip
T}
_
.TE
.sp
OpenRTMのバージョンによっては、ほかのプロパティも有効な場合があります。
.SH オプション
.INDENT 0.0
.TP
.BI \-i \ ID\fP,\fB \ \-\-id\fB= ID
コネクションのID
.TP
.BI \-n \ NAME\fP,\fB \ \-\-name\fB= NAME
コネクションの名
.TP
.BI \-p \ PROPERTIES\fP,\fB \ \-\-property\fB= PROPERTIES
コネクションのプロパティ
.UNINDENT
.INDENT 0.0
.TP
.B \-\-version
プログラムのバージョン番号を表示して終了する
.TP
.B \-h\fP,\fB  \-\-help
ヘルプを表示して終了する
.TP
.B \-v\fP,\fB  \-\-verbose
冗長な情報を出力する [デフォルト： \fBFalse\fP]
.UNINDENT
.SH パス
.sp
\fBrtshell\fP は \fIパス\fP でRTCツリーのオブジェクトを示します。パスは
オブジェクトのアドレスです。ネームサーバとネームコンテクストは
ダイレクトリで、マネージャとRTコンポーネントはファイルです。POSIXの
\fBcat\fP 等のコマンドと同じように、コマンドに渡したパスはrtshellの
ワーキングディレクトリに追加されます。rtshellの現在のワーキングディレクトリは
\fBRTCSH_CWD\fP という環境変数に保存されて、 \fBrtcwd\fP というコマンドで
変更することができます。
.sp
利用できるパスはコマンド実行時のネームサーバによって変わります。
\fBRTCSH_NAMESERVERS\fP という環境変数の値に記録されたネームサーバとパスに
指定された ネームサーバを組み合わせて提供します。
.sp
例えば、 \fB/localhost/comp0.rtc\fP は \fBlocalhost\fP にあるネームサーバに登録
された \fBcomp0.rtc\fP というRTコンポーネントを示します。
\fB/localhost/manager/comp0.rtc\fP は \fBlocalhost\fP にあるネームサーバの下の
\fBmanager\fP というディレクトリに登録された \fBcomp0.rtc\fP というRT
コンポーネントを示します。 \fB\&./comp0.rtc\fP は現在のワーキングディレクトリ
の中にある \fBcomp0.rtc\fP というRTコンポーネントを示します。
.sp
RTコンポーネントのポートを示す場合、パスの後にコロン（「:」）で区切って
示します。例えば、 \fB/localhost/comp0.rtc:data\fP は
\fBcomp0.rtc\fP というRTコンポーネントの \fBdata\fP というポートを示します。
.sp
新しいポートを作るコマンドもあります。この場合、オプションをパスに追加
することができます。使えるオプションは作られるポートの名前とフォーマッタ
です。指定方法は以下の通りです:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
path:port.name#formatter
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
例:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/localhost/blurg.host_cxt/comp0.rtc:input.stuff#a_printer
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
作られるポートの名前は \fBstuff\fP で、データは \fBa_printer\fP という関数で
ターミナルに表示するように指定してます。（ \fBa_printer\fP の関数はPythonが利
用可能な場所に存在する必要があります。普通はユーザがモジュールで提供します。）
作られたポートは \fBcomp0.rtc\fP の \fBinput\fP というポートに接続します。
.sp
「name」という部分は必須ではありません。書いていない場合は「.」文字も
書かないでください。例:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/localhost/blurg.host_cxt/comp0.rtc:input#a_printer
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
「formatter」という部分は必須ではありません。書いていない場合は「.」文字も
書かないでください。例:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/localhost/blurg.host_cxt/comp0.rtc:input.stuff
.ft P
.fi
.UNINDENT
.UNINDENT
.SH 環境変数
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B RTCTREE_ORB_ARGS
ORBを作る時に渡す変数です。セミコロンで区切ります。必須ではありません。
.TP
.B RTCTREE_NAMESERVERS
RTCツリーを作る時に参照するネームサーバのアドレスです。アドレスをセミ
コロンで区切ります。リストされたアドレスはすべてRTCツリーに追加して
rtshellで見ることができるようになります。必須ではありません。
.TP
.B RTSH_CWD
rtshellの現在のワーキングディレクトリ。rtshellが自動的に設定します。
設定しないでください。
.UNINDENT
.UNINDENT
.UNINDENT
.sp
普通、ユーザが設定する変数は \fBRTCTREE_NAMESERVERS\fP のみです。よく使うネ
ームサーバを設定しておくと便利です。例えば、Bashシェルの場合、以下のコマンド
は \fBlocalhost\fP 、 \fB192.168.0.1:65346\fP および \fBexample.com\fP にあるネーム
サーバをいつもrtshellで利用できるようにします。
.INDENT 0.0
.INDENT 3.5
$ export RTCTREE_NAMESERVERS=localhost;192.168.0.1:65346;example.com
.UNINDENT
.UNINDENT
.SH 返り値
.sp
成功の場合はゼロを返します。失敗の場合はゼロではない値を返します。
.sp
デバグ情報とエラーは \fBstderr\fP に出します。
.SH 例
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ rtcon /localhost/ConsoleIn0.rtc:out /localhost/ConsoleOut0.rtc:in
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
デフォルトプロパティを使って \fBConsoleIn0.rtc\fP の \fBout\fP ポートを
\fBConsoleOut0.rtc\fP の \fBin\fP ポートに接続します。
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ rtcon Motor0.rtc:out Sensor0.rtc:in \-\-property
  dataport.dataflow_type=pull
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBPull\fP 型のコネクションによって \fBMotor0.rtc\fP の \fBout\fP ポートを
\fBSensor0.rtc\fP の \fBin\fP ポートに接続します。
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ rtcon Motor0.rtc:out Sensor0.rtc:in \-i con1 \-n motor_data
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBMotor0.rtc\fP の \fBout\fP ポートを \fBSensor0.rtc\fP の \fBin\fP ポートに接続しま
す。コネクション名は \fBmotor_data\fP でIDは \fBcon1\fP になります。
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ rtcon ConsoleIn0.rtc:out ConsoleOut0.rtc:in ConsoleOut1.rtc:in
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
デフォルトプロパティを使って \fBConsoleIn0.rtc\fP の \fBout\fP ポートを
\fBConsoleOut0.rtc\fP の \fBin\fP ポートと \fBConsoleOut1.rtc\fP の \fBin\fP
ポートに接続します。
.SH 参照
.INDENT 0.0
.INDENT 3.5
\fBrtcat\fP (1),
\fBrtdis\fP (1)
.UNINDENT
.UNINDENT
.SH AUTHOR
Geoffrey Biggs and contributors
.SH COPYRIGHT
LGPL3
.\" Generated by docutils manpage writer.
.
