.\" Man page generated from reStructuredText.
.
.TH RTSHELL 1 "2015-08-13" "4.0" "User commands"
.SH NAME
rtshell \- RTミドルウェア用のコマンドラインツール
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH 概要
.sp
rtshellはRTコンポーネント、マネージャ及び全RTシステムを管理するツール
を提供します。OpenRTM\-aistとそれに準じているインタフェースを提供する
他のミドルウェアに対応しています。
.sp
コマンドの多くは、ネームサーバで動作しているコンポーネントとマネージャ
ーをファイルシステムのように扱えるようにしてあります。
ディレクトリに入ったり、コンポーネントをcatのようにで読んだり、アクティブさせ
たり、ポートを接続させたりすることができます。ほかのコマンドはRTシステムを
管理するためのRTSProfileファイルに関連して使用されます。
.sp
rtshellのコマンドは、何らかの都合により RTSystemEditor が使うことができない
OpenRTM\-aist のユーザ向きです。
システムリソースが少ない場合、GUIがない場合（特にネットワークにも接続できな
い場合）、スクリプトを使いたい場合などに役に立ちます。コマンドラインを使用
するのになじみがあるユーザにとってはrtshellは非常に便利です。
.SH コマンド
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B rtact
RTコンポーネントをアクティブにする。
.TP
.B rtcat
RTコンポーネントのメタデータを表示する。
.TP
.B rtcheck
起動中のRTシステムを保存されたRTSProfileと比べる。
.TP
.B rtcomp
コンポジットコンポーネントを作る。
.TP
.B rtcon
ポートを接続する。
.TP
.B rtconf
コンポーネントのコンフィグレーションを編集する。
.TP
.B rtcryo
起動中のRTシステムをRTSProfileファイルに保存する。
.TP
.B rtcwd
現在のワーキングダイレクトリを変更する。
.TP
.B rtdeact
コンポーネントをディアクティブにする。
.TP
.B rtdel
ネームサーバからオブジェクトを消す。
.TP
.B rtdis
ポートの接続を削除する。
.TP
.B rtdoc
RTコンポーネントのドキュメンテーションを表示する。
.TP
.B rtexit
RTコンポーネントを停止する。
.TP
.B rtfind
起動中のRTコンポーネントやマネージャ等を探す。
.TP
.B rtinject
ポートにデータを送る。
.TP
.B rtlog
ポートが送るデータをログに保存して再生する。
.TP
.B rtls
ダイレクトリのオブジェクトをリストする。
.TP
.B rtmgr
マネジャーでRTコンポーネントを管理する。
.TP
.B rtprint
ポートが送るデータをターミナルに表示する。
.TP
.B rtpwd
現在のワーキングダイレクトリを表示する。
.TP
.B rtreset
RTコンポーネントをリセットする。
.TP
.B rtresurrect
RTSProfileファイルに保存されたRTシステムを復元する。
.TP
.B rtstart
RTシステムを起動する。
.TP
.B rtstodot
起動中のRTシステムをグラフで表示する。
.TP
.B rtstop
RTシステムを停止する。
.TP
.B rtteardown
RTシステムを削除する。
.UNINDENT
.UNINDENT
.UNINDENT
.SH RTCツリー
.sp
すべてのコマンドはRTCツリー上で起動します。RTCツリーとは、ネームサーバ上
のコンテキスト、コンポーネント、マネージャ等をファイルシステムに見立てて
扱うことができる仕組みです。通常のファイルシステムと同じように扱うことが
できます。
.sp
ネームサーバはルートディレクトリ（ \fB/\fP ）からのサブディレクトリとして扱
われます。その下にはファイルとサブディレクトリが存在します。サブディレク
トリはネームサーバ上のネーミングコンテクストに対応します。ファイルはコン
ポーネントとマネージャーに対応します。
.sp
ツリーを構築するためのネームサーバを与える方法は2通りあります。一つはコマ
ンドに渡したネームサーバへのパスです。これは現在のツリーの作業ディレクト
リに追加され、最初の要素はネームサーバとして扱われます。
.sp
もう一つは \fBRTCTREE_NAMESERVERS\fP 環境変数です。ネームサーバアドレスをセミ
コロンで区切り、リストを渡すこともできます。
.SH シェルコンプリーション
.sp
Bash（バッシュ）シェルの使う方はrtshellに含めているコンプリーションスク
リプトによってrtshellのコマンドをもっと使いやすくできます。スクリプトは
\fB${prefix}/share/rtshell\fP にインストールされます。以下のコマンドでロー
ドしてください:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ source bash_completion
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
以上のコマンドを \fB~/.bashrc\fP というファイルに保存したら自動的にロードさ
れます。
.sp
コンプリーションの例:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ rtcwd [TAB]
$ rtcwd localhost/
$ rtcwd localhost/[TAB]
$ rtcwd localhost/kenroke.host_cxt/
$ rtcwd localhost/kenroke.host_cxt/[TAB][TAB]
ConsoleIn0.rtc  ConfigSample0.rtc  manager.mgr  Sensor0.rtc
$ rtcwd localhost/kenroke.host_cxt/[ENTER]
$ rtconf ConfigSample0.rtc set [TAB]
double_param0  double_param1  int_param0     int_param1     str_param0
str_param1     vector_param0
$ rtcon Sensor0.rtc:[TAB]
in   out
.ft P
.fi
.UNINDENT
.UNINDENT
.SH システムの要件
.sp
rtshellは \fBrtctree 3.0\fP が必要です。インストールされていない場合はコマン
ドは起動しません。
.sp
RTSProfileを使うコマンドは \fBrtsprofile 2.0\fP が必要です。インストールされ
ていない場合はこのコマンドは起動しません。
.sp
rtshellは \fBPython 2.6\fP が必要です。Python 3.0はまだテストされていないの
で動かない可能性はあります。
.sp
\fBrtinject\fP 、 \fBrtlog\fP 及び \fBrtprint\fP は \fBOpenRTM\-python\fP が必要です。
.sp
Ubuntu 9.04より古いUbuntuのバージョンの使う方は正しいPythonを手動でイン
ストールする必要です。新しいUbuntuにアップグレードすることをお考えくださ
い。10.04はLTSを提供します。
.SH パス
.sp
\fBrtshell\fP は \fIパス\fP でRTCツリーのオブジェクトを示します。パスは
オブジェクトのアドレスです。ネームサーバとネームコンテクストは
ダイレクトリで、マネージャとRTコンポーネントはファイルです。POSIXの
\fBcat\fP 等のコマンドと同じように、コマンドに渡したパスはrtshellの
ワーキングディレクトリに追加されます。rtshellの現在のワーキングディレクトリは
\fBRTCSH_CWD\fP という環境変数に保存されて、 \fBrtcwd\fP というコマンドで
変更することができます。
.sp
利用できるパスはコマンド実行時のネームサーバによって変わります。
\fBRTCSH_NAMESERVERS\fP という環境変数の値に記録されたネームサーバとパスに
指定された ネームサーバを組み合わせて提供します。
.sp
例えば、 \fB/localhost/comp0.rtc\fP は \fBlocalhost\fP にあるネームサーバに登録
された \fBcomp0.rtc\fP というRTコンポーネントを示します。
\fB/localhost/manager/comp0.rtc\fP は \fBlocalhost\fP にあるネームサーバの下の
\fBmanager\fP というディレクトリに登録された \fBcomp0.rtc\fP というRT
コンポーネントを示します。 \fB\&./comp0.rtc\fP は現在のワーキングディレクトリ
の中にある \fBcomp0.rtc\fP というRTコンポーネントを示します。
.sp
RTコンポーネントのポートを示す場合、パスの後にコロン（「:」）で区切って
示します。例えば、 \fB/localhost/comp0.rtc:data\fP は
\fBcomp0.rtc\fP というRTコンポーネントの \fBdata\fP というポートを示します。
.sp
新しいポートを作るコマンドもあります。この場合、オプションをパスに追加
することができます。使えるオプションは作られるポートの名前とフォーマッタ
です。指定方法は以下の通りです:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
path:port.name#formatter
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
例:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/localhost/blurg.host_cxt/comp0.rtc:input.stuff#a_printer
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
作られるポートの名前は \fBstuff\fP で、データは \fBa_printer\fP という関数で
ターミナルに表示するように指定してます。（ \fBa_printer\fP の関数はPythonが利
用可能な場所に存在する必要があります。普通はユーザがモジュールで提供します。）
作られたポートは \fBcomp0.rtc\fP の \fBinput\fP というポートに接続します。
.sp
「name」という部分は必須ではありません。書いていない場合は「.」文字も
書かないでください。例:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/localhost/blurg.host_cxt/comp0.rtc:input#a_printer
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
「formatter」という部分は必須ではありません。書いていない場合は「.」文字も
書かないでください。例:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/localhost/blurg.host_cxt/comp0.rtc:input.stuff
.ft P
.fi
.UNINDENT
.UNINDENT
.SH 環境変数
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B RTCTREE_ORB_ARGS
ORBを作る時に渡す変数です。セミコロンで区切ります。必須ではありません。
.TP
.B RTCTREE_NAMESERVERS
RTCツリーを作る時に参照するネームサーバのアドレスです。アドレスをセミ
コロンで区切ります。リストされたアドレスはすべてRTCツリーに追加して
rtshellで見ることができるようになります。必須ではありません。
.TP
.B RTSH_CWD
rtshellの現在のワーキングディレクトリ。rtshellが自動的に設定します。
設定しないでください。
.UNINDENT
.UNINDENT
.UNINDENT
.sp
普通、ユーザが設定する変数は \fBRTCTREE_NAMESERVERS\fP のみです。よく使うネ
ームサーバを設定しておくと便利です。例えば、Bashシェルの場合、以下のコマンド
は \fBlocalhost\fP 、 \fB192.168.0.1:65346\fP および \fBexample.com\fP にあるネーム
サーバをいつもrtshellで利用できるようにします。
.INDENT 0.0
.INDENT 3.5
$ export RTCTREE_NAMESERVERS=localhost;192.168.0.1:65346;example.com
.UNINDENT
.UNINDENT
.SH 返り値
.sp
成功の場合はゼロを返します。失敗の場合はゼロではない値を返します。
.sp
デバグ情報とエラーは \fBstderr\fP に出します。
.SH 参照
.INDENT 0.0
.INDENT 3.5
\fBrtact\fP (1),
\fBrtcat\fP (1),
\fBrtcheck\fP (1),
\fBrtcomp\fP (1),
\fBrtcon\fP (1),
\fBrtconf\fP (1),
\fBrtcryo\fP (1),
\fBrtcwd\fP (1),
\fBrtdeact\fP (1),
\fBrtdel\fP (1),
\fBrtdis\fP (1),
\fBrtexit\fP (1),
\fBrtfind\fP (1),
\fBrtinject\fP (1),
\fBrtlog\fP (1),
\fBrtls\fP (1),
\fBrtmgr\fP (1),
\fBrtprint\fP (1),
\fBrtpwd\fP (1),
\fBrtreset\fP (1),
\fBrtresurrect\fP (1),
\fBrtstart\fP (1),
\fBrtstodot\fP (1),
\fBrtstop\fP (1),
\fBrtteardown\fP (1)
.UNINDENT
.UNINDENT
.SH AUTHOR
Geoffrey Biggs and contributors
.SH COPYRIGHT
LGPL3
.\" Generated by docutils manpage writer.
.
