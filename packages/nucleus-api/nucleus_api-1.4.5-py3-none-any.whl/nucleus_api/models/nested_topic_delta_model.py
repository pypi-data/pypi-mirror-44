# coding: utf-8

"""
    Nucleus API

    Nucleus text analytics APIs from SumUp Analytics. Example and documentation: https://github.com/SumUpAnalytics/nucleus-sdk  # noqa: E501

    OpenAPI spec version: v1.4.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NestedTopicDeltaModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'topic': 'str',
        'keywords_weight': 'str',
        'strength': 'str',
        'doc_topic_exposure_delta': 'list[str]',
        'doc_id_t0': 'list[str]',
        'doc_id_t1': 'list[str]'
    }

    attribute_map = {
        'topic': 'topic',
        'keywords_weight': 'keywords_weight',
        'strength': 'strength',
        'doc_topic_exposure_delta': 'doc_topic_exposure_delta',
        'doc_id_t0': 'doc_id_t0',
        'doc_id_t1': 'doc_id_t1'
    }

    def __init__(self, topic=None, keywords_weight=None, strength=None, doc_topic_exposure_delta=None, doc_id_t0=None, doc_id_t1=None):  # noqa: E501
        """NestedTopicDeltaModel - a model defined in Swagger"""  # noqa: E501

        self._topic = None
        self._keywords_weight = None
        self._strength = None
        self._doc_topic_exposure_delta = None
        self._doc_id_t0 = None
        self._doc_id_t1 = None
        self.discriminator = None

        if topic is not None:
            self.topic = topic
        if keywords_weight is not None:
            self.keywords_weight = keywords_weight
        if strength is not None:
            self.strength = strength
        if doc_topic_exposure_delta is not None:
            self.doc_topic_exposure_delta = doc_topic_exposure_delta
        if doc_id_t0 is not None:
            self.doc_id_t0 = doc_id_t0
        if doc_id_t1 is not None:
            self.doc_id_t1 = doc_id_t1

    @property
    def topic(self):
        """Gets the topic of this NestedTopicDeltaModel.  # noqa: E501

        Start-of-period topics  # noqa: E501

        :return: The topic of this NestedTopicDeltaModel.  # noqa: E501
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this NestedTopicDeltaModel.

        Start-of-period topics  # noqa: E501

        :param topic: The topic of this NestedTopicDeltaModel.  # noqa: E501
        :type: str
        """

        self._topic = topic

    @property
    def keywords_weight(self):
        """Gets the keywords_weight of this NestedTopicDeltaModel.  # noqa: E501

        Weight of keywords in each topic  # noqa: E501

        :return: The keywords_weight of this NestedTopicDeltaModel.  # noqa: E501
        :rtype: str
        """
        return self._keywords_weight

    @keywords_weight.setter
    def keywords_weight(self, keywords_weight):
        """Sets the keywords_weight of this NestedTopicDeltaModel.

        Weight of keywords in each topic  # noqa: E501

        :param keywords_weight: The keywords_weight of this NestedTopicDeltaModel.  # noqa: E501
        :type: str
        """

        self._keywords_weight = keywords_weight

    @property
    def strength(self):
        """Gets the strength of this NestedTopicDeltaModel.  # noqa: E501

        Prevalence of each topic in the dataset  # noqa: E501

        :return: The strength of this NestedTopicDeltaModel.  # noqa: E501
        :rtype: str
        """
        return self._strength

    @strength.setter
    def strength(self, strength):
        """Sets the strength of this NestedTopicDeltaModel.

        Prevalence of each topic in the dataset  # noqa: E501

        :param strength: The strength of this NestedTopicDeltaModel.  # noqa: E501
        :type: str
        """

        self._strength = strength

    @property
    def doc_topic_exposure_delta(self):
        """Gets the doc_topic_exposure_delta of this NestedTopicDeltaModel.  # noqa: E501


        :return: The doc_topic_exposure_delta of this NestedTopicDeltaModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._doc_topic_exposure_delta

    @doc_topic_exposure_delta.setter
    def doc_topic_exposure_delta(self, doc_topic_exposure_delta):
        """Sets the doc_topic_exposure_delta of this NestedTopicDeltaModel.


        :param doc_topic_exposure_delta: The doc_topic_exposure_delta of this NestedTopicDeltaModel.  # noqa: E501
        :type: list[str]
        """

        self._doc_topic_exposure_delta = doc_topic_exposure_delta

    @property
    def doc_id_t0(self):
        """Gets the doc_id_t0 of this NestedTopicDeltaModel.  # noqa: E501


        :return: The doc_id_t0 of this NestedTopicDeltaModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._doc_id_t0

    @doc_id_t0.setter
    def doc_id_t0(self, doc_id_t0):
        """Sets the doc_id_t0 of this NestedTopicDeltaModel.


        :param doc_id_t0: The doc_id_t0 of this NestedTopicDeltaModel.  # noqa: E501
        :type: list[str]
        """

        self._doc_id_t0 = doc_id_t0

    @property
    def doc_id_t1(self):
        """Gets the doc_id_t1 of this NestedTopicDeltaModel.  # noqa: E501


        :return: The doc_id_t1 of this NestedTopicDeltaModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._doc_id_t1

    @doc_id_t1.setter
    def doc_id_t1(self, doc_id_t1):
        """Sets the doc_id_t1 of this NestedTopicDeltaModel.


        :param doc_id_t1: The doc_id_t1 of this NestedTopicDeltaModel.  # noqa: E501
        :type: list[str]
        """

        self._doc_id_t1 = doc_id_t1

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NestedTopicDeltaModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NestedTopicDeltaModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
