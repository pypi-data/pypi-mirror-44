--- general.h
+++ general.h
@@ -28,9 +28,12 @@
 #include <iostream>
 #include <assert.h>
 
+/*
+// Regina will use GMP everywhere, even on Windows.
 #ifdef _WIN32 //for 32 and 64 bit windows
     #define NMZ_MPIR //always use MPIR
 #endif
+*/
 
 #ifdef NMZ_MPIR // use MPIR
     #include <mpirxx.h>
--- list_operations.h
+++ list_operations.h
@@ -46,7 +46,7 @@ ostream& operator<< (ostream& out, const list<T>& l) {
     for (i =l.begin(); i != l.end(); i++) {
         out << *i << " ";
     }
-    out << endl;
+    out << std::endl;
     return out;
 }
 
--- offload_handler.cpp
+++ offload_handler.cpp
@@ -9,6 +9,7 @@
 #include "libnormaliz/vector_operations.h"
 #include "libnormaliz/my_omp.h"
 #include "libnormaliz/HilbertSeries.h"
+#include <cstring>
 #include <iostream>
 #include <fstream>
 
--- full_cone.cpp
+++ full_cone.cpp
@@ -1512,8 +1512,10 @@ void Full_Cone<Integer>::evaluate_large_rec_pyramids(size_t new_generator){
     
     #pragma omp for schedule(dynamic) 
     for(size_t i=0; i<nrLargeRecPyrs; i++){
-        for(; i > ppos; ++ppos, ++p) ;
-        for(; i < ppos; --ppos, --p) ;
+        for(; i > ppos; ++ppos, ++p)
+            ;
+        for(; i < ppos; --ppos, --p)
+            ;
 #ifndef NCATCH
         try {
 #endif
--- general.h
+++ general.h
@@ -25,6 +25,11 @@
 #define GENERAL_H_
 
 
+/* We need to include cstddef before gmpxx.h to avoid a compile error with
+   older versions of GMP.  See https://gcc.gnu.org/gcc-4.9/porting_to.html ,
+   in the section about cstddef. */
+#include <cstddef>
+
 #include <iostream>
 #include <assert.h>
 
--- bottom.cpp
+++ bottom.cpp
@@ -52,7 +52,7 @@ class SCIP;
 namespace libnormaliz {
 using namespace std;
 
-long ScipBound = 1000000;
+const long ScipBound = 1000000;
 
 template<typename Integer>
 vector<Integer> best_point(const list<vector<Integer> >& bottom_candidates, const Matrix<Integer>& gens, const Matrix<Integer>& SuppHyp, const vector<Integer>& grading);
--- bottom.h
+++ bottom.h
@@ -33,7 +33,7 @@
 namespace libnormaliz {
 using namespace std;
 
-extern long ScipBound;
+extern const long ScipBound;
 
 template<typename Integer>
 void bottom_points(list< vector<Integer> >& new_points, Matrix<Integer> gens,const vector<Integer>& grading, long app_level, long recursion_depth);
