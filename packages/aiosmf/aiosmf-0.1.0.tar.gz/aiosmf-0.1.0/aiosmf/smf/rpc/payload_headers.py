# automatically generated by the FlatBuffers compiler, do not modify

# namespace: rpc

import flatbuffers

class payload_headers(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAspayload_headers(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = payload_headers()
        x.Init(buf, n + offset)
        return x

    # payload_headers
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

# /// Headers for forward compat.
    # payload_headers
    def DynamicHeaders(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .dynamic_header import dynamic_header
            obj = dynamic_header()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # payload_headers
    def DynamicHeadersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

# /// We need to chain the actual payload
    # payload_headers
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # payload_headers
    def Checksum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # payload_headers
    def Compression(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def payload_headersStart(builder): builder.StartObject(4)
def payload_headersAddDynamicHeaders(builder, dynamicHeaders): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(dynamicHeaders), 0)
def payload_headersStartDynamicHeadersVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def payload_headersAddSize(builder, size): builder.PrependUint32Slot(1, size, 0)
def payload_headersAddChecksum(builder, checksum): builder.PrependUint32Slot(2, checksum, 0)
def payload_headersAddCompression(builder, compression): builder.PrependInt8Slot(3, compression, 0)
def payload_headersEnd(builder): return builder.EndObject()
