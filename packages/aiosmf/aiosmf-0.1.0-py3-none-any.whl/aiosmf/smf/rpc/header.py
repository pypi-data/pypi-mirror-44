# automatically generated by the FlatBuffers compiler, do not modify

# namespace: rpc

import flatbuffers

# /// \brief: header parsed by rpc engine
# /// must be sizeof()'able
# /// that is, must be a struct in fbs language
# ///
# /// layout
# /// [ 8bits(compression) + 8bits(bitflags) + 16bits(session) + 32bits(size) + 32bits(checksum) + 32bits(meta) ]
# /// total = 128bits == 16bytes
# ///
class header(object):
    __slots__ = ['_tab']

    # header
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # header
    def Compression(self): return self._tab.Get(flatbuffers.number_types.Int8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # header
    def Bitflags(self): return self._tab.Get(flatbuffers.number_types.Int8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(1))
# /// 16 bits for storing the actual session id.
# /// used for streaming client and slot allocation
    # header
    def Session(self): return self._tab.Get(flatbuffers.number_types.Uint16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(2))
# /// size of the next payload
    # header
    def Size(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
# /// currently we use (xxhash64 & UINT32_MAX)
    # header
    def Checksum(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))
# /// \brief used for sending and receiving, read carefully.
# ///
# /// Receiving:
# ///
# /// Uses the same as HTTP status - on the receiving end
# /// We don't want to pay the cost of parsing a header
# /// On every response as does HTTP. std::to_string and std::stol()
# /// are needlesly expensive
# ///
# /// Sending:
# ///
# /// Used with the xor hash of Service::ID() ^ Service::Method::ID()
# /// This is how the server multiplexer figures out what function pointer
# /// to call
# ///
    # header
    def Meta(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(12))

def Createheader(builder, compression, bitflags, session, size, checksum, meta):
    builder.Prep(4, 16)
    builder.PrependUint32(meta)
    builder.PrependUint32(checksum)
    builder.PrependUint32(size)
    builder.PrependUint16(session)
    builder.PrependInt8(bitflags)
    builder.PrependInt8(compression)
    return builder.Offset()
