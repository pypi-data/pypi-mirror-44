# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkStructureTensorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkStructureTensorPython', [dirname(__file__)])
        except ImportError:
            import _itkStructureTensorPython
            return _itkStructureTensorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkStructureTensorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkStructureTensorPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkStructureTensorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageToImageFilterCommonPython
import pyBasePython
import itkImagePython
import itkCovariantVectorPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkVectorPython
import itkFixedArrayPython
import itkSizePython
import itkRGBPixelPython
import itkPointPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkIndexPython
import itkOffsetPython
import itkImageRegionPython
import ITKCommonBasePython
import itkImageSourceCommonPython
import itkVariableSizeMatrixPython
import itkArrayPython

def itkStructureTensorIF3VSM3_New():
  return itkStructureTensorIF3VSM3.New()


def itkStructureTensorIF2VSM2_New():
  return itkStructureTensorIF2VSM2.New()


def itkImageToImageFilterIF3VSM3_New():
  return itkImageToImageFilterIF3VSM3.New()


def itkImageToImageFilterIF2VSM2_New():
  return itkImageToImageFilterIF2VSM2.New()


def itkImageSourceVSM3_New():
  return itkImageSourceVSM3.New()


def itkImageSourceVSM2_New():
  return itkImageSourceVSM2.New()


def itkImageVSM3_New():
  return itkImageVSM3.New()


def itkImageVSM2_New():
  return itkImageVSM2.New()

class itkImageSourceVSM2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ itkImageSourceVSM2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args) -> "itkImageVSM2 *":
        """
        GetOutput(itkImageSourceVSM2 self) -> itkImageVSM2
        GetOutput(itkImageSourceVSM2 self) -> itkImageVSM2
        GetOutput(itkImageSourceVSM2 self, unsigned int idx) -> itkImageVSM2
        """
        return _itkStructureTensorPython.itkImageSourceVSM2_GetOutput(self, *args)


    def GraftOutput(self, *args) -> "void":
        """
        GraftOutput(itkImageSourceVSM2 self, itkDataObject output)
        GraftOutput(itkImageSourceVSM2 self, std::string const & key, itkDataObject output)
        """
        return _itkStructureTensorPython.itkImageSourceVSM2_GraftOutput(self, *args)


    def GraftNthOutput(self, idx: 'unsigned int', output: 'itkDataObject') -> "void":
        """GraftNthOutput(itkImageSourceVSM2 self, unsigned int idx, itkDataObject output)"""
        return _itkStructureTensorPython.itkImageSourceVSM2_GraftNthOutput(self, idx, output)


    def MakeOutput(self, *args) -> "itkDataObject_Pointer":
        """
        MakeOutput(itkImageSourceVSM2 self, unsigned long long idx) -> itkDataObject_Pointer
        MakeOutput(itkImageSourceVSM2 self, std::string const & arg0) -> itkDataObject_Pointer
        """
        return _itkStructureTensorPython.itkImageSourceVSM2_MakeOutput(self, *args)

    __swig_destroy__ = _itkStructureTensorPython.delete_itkImageSourceVSM2

    def cast(obj: 'itkLightObject') -> "itkImageSourceVSM2 *":
        """cast(itkLightObject obj) -> itkImageSourceVSM2"""
        return _itkStructureTensorPython.itkImageSourceVSM2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSourceVSM2

        Create a new object of the class itkImageSourceVSM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSourceVSM2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSourceVSM2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSourceVSM2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSourceVSM2.GetOutput = new_instancemethod(_itkStructureTensorPython.itkImageSourceVSM2_GetOutput, None, itkImageSourceVSM2)
itkImageSourceVSM2.GraftOutput = new_instancemethod(_itkStructureTensorPython.itkImageSourceVSM2_GraftOutput, None, itkImageSourceVSM2)
itkImageSourceVSM2.GraftNthOutput = new_instancemethod(_itkStructureTensorPython.itkImageSourceVSM2_GraftNthOutput, None, itkImageSourceVSM2)
itkImageSourceVSM2.MakeOutput = new_instancemethod(_itkStructureTensorPython.itkImageSourceVSM2_MakeOutput, None, itkImageSourceVSM2)
itkImageSourceVSM2_swigregister = _itkStructureTensorPython.itkImageSourceVSM2_swigregister
itkImageSourceVSM2_swigregister(itkImageSourceVSM2)

def itkImageSourceVSM2_cast(obj: 'itkLightObject') -> "itkImageSourceVSM2 *":
    """itkImageSourceVSM2_cast(itkLightObject obj) -> itkImageSourceVSM2"""
    return _itkStructureTensorPython.itkImageSourceVSM2_cast(obj)

class itkImageSourceVSM3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ itkImageSourceVSM3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args) -> "itkImageVSM3 *":
        """
        GetOutput(itkImageSourceVSM3 self) -> itkImageVSM3
        GetOutput(itkImageSourceVSM3 self) -> itkImageVSM3
        GetOutput(itkImageSourceVSM3 self, unsigned int idx) -> itkImageVSM3
        """
        return _itkStructureTensorPython.itkImageSourceVSM3_GetOutput(self, *args)


    def GraftOutput(self, *args) -> "void":
        """
        GraftOutput(itkImageSourceVSM3 self, itkDataObject output)
        GraftOutput(itkImageSourceVSM3 self, std::string const & key, itkDataObject output)
        """
        return _itkStructureTensorPython.itkImageSourceVSM3_GraftOutput(self, *args)


    def GraftNthOutput(self, idx: 'unsigned int', output: 'itkDataObject') -> "void":
        """GraftNthOutput(itkImageSourceVSM3 self, unsigned int idx, itkDataObject output)"""
        return _itkStructureTensorPython.itkImageSourceVSM3_GraftNthOutput(self, idx, output)


    def MakeOutput(self, *args) -> "itkDataObject_Pointer":
        """
        MakeOutput(itkImageSourceVSM3 self, unsigned long long idx) -> itkDataObject_Pointer
        MakeOutput(itkImageSourceVSM3 self, std::string const & arg0) -> itkDataObject_Pointer
        """
        return _itkStructureTensorPython.itkImageSourceVSM3_MakeOutput(self, *args)

    __swig_destroy__ = _itkStructureTensorPython.delete_itkImageSourceVSM3

    def cast(obj: 'itkLightObject') -> "itkImageSourceVSM3 *":
        """cast(itkLightObject obj) -> itkImageSourceVSM3"""
        return _itkStructureTensorPython.itkImageSourceVSM3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSourceVSM3

        Create a new object of the class itkImageSourceVSM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSourceVSM3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSourceVSM3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSourceVSM3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSourceVSM3.GetOutput = new_instancemethod(_itkStructureTensorPython.itkImageSourceVSM3_GetOutput, None, itkImageSourceVSM3)
itkImageSourceVSM3.GraftOutput = new_instancemethod(_itkStructureTensorPython.itkImageSourceVSM3_GraftOutput, None, itkImageSourceVSM3)
itkImageSourceVSM3.GraftNthOutput = new_instancemethod(_itkStructureTensorPython.itkImageSourceVSM3_GraftNthOutput, None, itkImageSourceVSM3)
itkImageSourceVSM3.MakeOutput = new_instancemethod(_itkStructureTensorPython.itkImageSourceVSM3_MakeOutput, None, itkImageSourceVSM3)
itkImageSourceVSM3_swigregister = _itkStructureTensorPython.itkImageSourceVSM3_swigregister
itkImageSourceVSM3_swigregister(itkImageSourceVSM3)

def itkImageSourceVSM3_cast(obj: 'itkLightObject') -> "itkImageSourceVSM3 *":
    """itkImageSourceVSM3_cast(itkLightObject obj) -> itkImageSourceVSM3"""
    return _itkStructureTensorPython.itkImageSourceVSM3_cast(obj)

class itkImageToImageFilterIF2VSM2(itkImageSourceVSM2):
    """Proxy of C++ itkImageToImageFilterIF2VSM2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToImageFilterIF2VSM2 self, itkImageF2 image)
        SetInput(itkImageToImageFilterIF2VSM2 self, unsigned int arg0, itkImageF2 image)
        """
        return _itkStructureTensorPython.itkImageToImageFilterIF2VSM2_SetInput(self, *args)


    def GetInput(self, *args) -> "itkImageF2 const *":
        """
        GetInput(itkImageToImageFilterIF2VSM2 self) -> itkImageF2
        GetInput(itkImageToImageFilterIF2VSM2 self, unsigned int idx) -> itkImageF2
        """
        return _itkStructureTensorPython.itkImageToImageFilterIF2VSM2_GetInput(self, *args)


    def PushBackInput(self, image: 'itkImageF2') -> "void":
        """PushBackInput(itkImageToImageFilterIF2VSM2 self, itkImageF2 image)"""
        return _itkStructureTensorPython.itkImageToImageFilterIF2VSM2_PushBackInput(self, image)


    def PopBackInput(self) -> "void":
        """PopBackInput(itkImageToImageFilterIF2VSM2 self)"""
        return _itkStructureTensorPython.itkImageToImageFilterIF2VSM2_PopBackInput(self)


    def PushFrontInput(self, image: 'itkImageF2') -> "void":
        """PushFrontInput(itkImageToImageFilterIF2VSM2 self, itkImageF2 image)"""
        return _itkStructureTensorPython.itkImageToImageFilterIF2VSM2_PushFrontInput(self, image)


    def PopFrontInput(self) -> "void":
        """PopFrontInput(itkImageToImageFilterIF2VSM2 self)"""
        return _itkStructureTensorPython.itkImageToImageFilterIF2VSM2_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageToImageFilterIF2VSM2 self, double const _arg)"""
        return _itkStructureTensorPython.itkImageToImageFilterIF2VSM2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageToImageFilterIF2VSM2 self) -> double"""
        return _itkStructureTensorPython.itkImageToImageFilterIF2VSM2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageToImageFilterIF2VSM2 self, double const _arg)"""
        return _itkStructureTensorPython.itkImageToImageFilterIF2VSM2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageToImageFilterIF2VSM2 self) -> double"""
        return _itkStructureTensorPython.itkImageToImageFilterIF2VSM2_GetDirectionTolerance(self)

    __swig_destroy__ = _itkStructureTensorPython.delete_itkImageToImageFilterIF2VSM2

    def cast(obj: 'itkLightObject') -> "itkImageToImageFilterIF2VSM2 *":
        """cast(itkLightObject obj) -> itkImageToImageFilterIF2VSM2"""
        return _itkStructureTensorPython.itkImageToImageFilterIF2VSM2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF2VSM2

        Create a new object of the class itkImageToImageFilterIF2VSM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF2VSM2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF2VSM2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF2VSM2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterIF2VSM2.SetInput = new_instancemethod(_itkStructureTensorPython.itkImageToImageFilterIF2VSM2_SetInput, None, itkImageToImageFilterIF2VSM2)
itkImageToImageFilterIF2VSM2.GetInput = new_instancemethod(_itkStructureTensorPython.itkImageToImageFilterIF2VSM2_GetInput, None, itkImageToImageFilterIF2VSM2)
itkImageToImageFilterIF2VSM2.PushBackInput = new_instancemethod(_itkStructureTensorPython.itkImageToImageFilterIF2VSM2_PushBackInput, None, itkImageToImageFilterIF2VSM2)
itkImageToImageFilterIF2VSM2.PopBackInput = new_instancemethod(_itkStructureTensorPython.itkImageToImageFilterIF2VSM2_PopBackInput, None, itkImageToImageFilterIF2VSM2)
itkImageToImageFilterIF2VSM2.PushFrontInput = new_instancemethod(_itkStructureTensorPython.itkImageToImageFilterIF2VSM2_PushFrontInput, None, itkImageToImageFilterIF2VSM2)
itkImageToImageFilterIF2VSM2.PopFrontInput = new_instancemethod(_itkStructureTensorPython.itkImageToImageFilterIF2VSM2_PopFrontInput, None, itkImageToImageFilterIF2VSM2)
itkImageToImageFilterIF2VSM2.SetCoordinateTolerance = new_instancemethod(_itkStructureTensorPython.itkImageToImageFilterIF2VSM2_SetCoordinateTolerance, None, itkImageToImageFilterIF2VSM2)
itkImageToImageFilterIF2VSM2.GetCoordinateTolerance = new_instancemethod(_itkStructureTensorPython.itkImageToImageFilterIF2VSM2_GetCoordinateTolerance, None, itkImageToImageFilterIF2VSM2)
itkImageToImageFilterIF2VSM2.SetDirectionTolerance = new_instancemethod(_itkStructureTensorPython.itkImageToImageFilterIF2VSM2_SetDirectionTolerance, None, itkImageToImageFilterIF2VSM2)
itkImageToImageFilterIF2VSM2.GetDirectionTolerance = new_instancemethod(_itkStructureTensorPython.itkImageToImageFilterIF2VSM2_GetDirectionTolerance, None, itkImageToImageFilterIF2VSM2)
itkImageToImageFilterIF2VSM2_swigregister = _itkStructureTensorPython.itkImageToImageFilterIF2VSM2_swigregister
itkImageToImageFilterIF2VSM2_swigregister(itkImageToImageFilterIF2VSM2)

def itkImageToImageFilterIF2VSM2_cast(obj: 'itkLightObject') -> "itkImageToImageFilterIF2VSM2 *":
    """itkImageToImageFilterIF2VSM2_cast(itkLightObject obj) -> itkImageToImageFilterIF2VSM2"""
    return _itkStructureTensorPython.itkImageToImageFilterIF2VSM2_cast(obj)

class itkImageToImageFilterIF3VSM3(itkImageSourceVSM3):
    """Proxy of C++ itkImageToImageFilterIF3VSM3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToImageFilterIF3VSM3 self, itkImageF3 image)
        SetInput(itkImageToImageFilterIF3VSM3 self, unsigned int arg0, itkImageF3 image)
        """
        return _itkStructureTensorPython.itkImageToImageFilterIF3VSM3_SetInput(self, *args)


    def GetInput(self, *args) -> "itkImageF3 const *":
        """
        GetInput(itkImageToImageFilterIF3VSM3 self) -> itkImageF3
        GetInput(itkImageToImageFilterIF3VSM3 self, unsigned int idx) -> itkImageF3
        """
        return _itkStructureTensorPython.itkImageToImageFilterIF3VSM3_GetInput(self, *args)


    def PushBackInput(self, image: 'itkImageF3') -> "void":
        """PushBackInput(itkImageToImageFilterIF3VSM3 self, itkImageF3 image)"""
        return _itkStructureTensorPython.itkImageToImageFilterIF3VSM3_PushBackInput(self, image)


    def PopBackInput(self) -> "void":
        """PopBackInput(itkImageToImageFilterIF3VSM3 self)"""
        return _itkStructureTensorPython.itkImageToImageFilterIF3VSM3_PopBackInput(self)


    def PushFrontInput(self, image: 'itkImageF3') -> "void":
        """PushFrontInput(itkImageToImageFilterIF3VSM3 self, itkImageF3 image)"""
        return _itkStructureTensorPython.itkImageToImageFilterIF3VSM3_PushFrontInput(self, image)


    def PopFrontInput(self) -> "void":
        """PopFrontInput(itkImageToImageFilterIF3VSM3 self)"""
        return _itkStructureTensorPython.itkImageToImageFilterIF3VSM3_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageToImageFilterIF3VSM3 self, double const _arg)"""
        return _itkStructureTensorPython.itkImageToImageFilterIF3VSM3_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageToImageFilterIF3VSM3 self) -> double"""
        return _itkStructureTensorPython.itkImageToImageFilterIF3VSM3_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageToImageFilterIF3VSM3 self, double const _arg)"""
        return _itkStructureTensorPython.itkImageToImageFilterIF3VSM3_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageToImageFilterIF3VSM3 self) -> double"""
        return _itkStructureTensorPython.itkImageToImageFilterIF3VSM3_GetDirectionTolerance(self)

    __swig_destroy__ = _itkStructureTensorPython.delete_itkImageToImageFilterIF3VSM3

    def cast(obj: 'itkLightObject') -> "itkImageToImageFilterIF3VSM3 *":
        """cast(itkLightObject obj) -> itkImageToImageFilterIF3VSM3"""
        return _itkStructureTensorPython.itkImageToImageFilterIF3VSM3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF3VSM3

        Create a new object of the class itkImageToImageFilterIF3VSM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF3VSM3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF3VSM3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF3VSM3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterIF3VSM3.SetInput = new_instancemethod(_itkStructureTensorPython.itkImageToImageFilterIF3VSM3_SetInput, None, itkImageToImageFilterIF3VSM3)
itkImageToImageFilterIF3VSM3.GetInput = new_instancemethod(_itkStructureTensorPython.itkImageToImageFilterIF3VSM3_GetInput, None, itkImageToImageFilterIF3VSM3)
itkImageToImageFilterIF3VSM3.PushBackInput = new_instancemethod(_itkStructureTensorPython.itkImageToImageFilterIF3VSM3_PushBackInput, None, itkImageToImageFilterIF3VSM3)
itkImageToImageFilterIF3VSM3.PopBackInput = new_instancemethod(_itkStructureTensorPython.itkImageToImageFilterIF3VSM3_PopBackInput, None, itkImageToImageFilterIF3VSM3)
itkImageToImageFilterIF3VSM3.PushFrontInput = new_instancemethod(_itkStructureTensorPython.itkImageToImageFilterIF3VSM3_PushFrontInput, None, itkImageToImageFilterIF3VSM3)
itkImageToImageFilterIF3VSM3.PopFrontInput = new_instancemethod(_itkStructureTensorPython.itkImageToImageFilterIF3VSM3_PopFrontInput, None, itkImageToImageFilterIF3VSM3)
itkImageToImageFilterIF3VSM3.SetCoordinateTolerance = new_instancemethod(_itkStructureTensorPython.itkImageToImageFilterIF3VSM3_SetCoordinateTolerance, None, itkImageToImageFilterIF3VSM3)
itkImageToImageFilterIF3VSM3.GetCoordinateTolerance = new_instancemethod(_itkStructureTensorPython.itkImageToImageFilterIF3VSM3_GetCoordinateTolerance, None, itkImageToImageFilterIF3VSM3)
itkImageToImageFilterIF3VSM3.SetDirectionTolerance = new_instancemethod(_itkStructureTensorPython.itkImageToImageFilterIF3VSM3_SetDirectionTolerance, None, itkImageToImageFilterIF3VSM3)
itkImageToImageFilterIF3VSM3.GetDirectionTolerance = new_instancemethod(_itkStructureTensorPython.itkImageToImageFilterIF3VSM3_GetDirectionTolerance, None, itkImageToImageFilterIF3VSM3)
itkImageToImageFilterIF3VSM3_swigregister = _itkStructureTensorPython.itkImageToImageFilterIF3VSM3_swigregister
itkImageToImageFilterIF3VSM3_swigregister(itkImageToImageFilterIF3VSM3)

def itkImageToImageFilterIF3VSM3_cast(obj: 'itkLightObject') -> "itkImageToImageFilterIF3VSM3 *":
    """itkImageToImageFilterIF3VSM3_cast(itkLightObject obj) -> itkImageToImageFilterIF3VSM3"""
    return _itkStructureTensorPython.itkImageToImageFilterIF3VSM3_cast(obj)

class itkImageVSM2(itkImagePython.itkImageBase2):
    """Proxy of C++ itkImageVSM2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVSM2_Pointer":
        """__New_orig__() -> itkImageVSM2_Pointer"""
        return _itkStructureTensorPython.itkImageVSM2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVSM2_Pointer":
        """Clone(itkImageVSM2 self) -> itkImageVSM2_Pointer"""
        return _itkStructureTensorPython.itkImageVSM2_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVSM2 self, bool initializePixels=False)
        Allocate(itkImageVSM2 self)
        """
        return _itkStructureTensorPython.itkImageVSM2_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVariableSizeMatrixD') -> "void":
        """FillBuffer(itkImageVSM2 self, itkVariableSizeMatrixD value)"""
        return _itkStructureTensorPython.itkImageVSM2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkVariableSizeMatrixD') -> "void":
        """SetPixel(itkImageVSM2 self, itkIndex2 index, itkVariableSizeMatrixD value)"""
        return _itkStructureTensorPython.itkImageVSM2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVariableSizeMatrixD &":
        """
        GetPixel(itkImageVSM2 self, itkIndex2 index) -> itkVariableSizeMatrixD
        GetPixel(itkImageVSM2 self, itkIndex2 index) -> itkVariableSizeMatrixD
        """
        return _itkStructureTensorPython.itkImageVSM2_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVariableSizeMatrixD const *":
        """
        GetBufferPointer(itkImageVSM2 self) -> itkVariableSizeMatrixD
        GetBufferPointer(itkImageVSM2 self) -> itkVariableSizeMatrixD
        """
        return _itkStructureTensorPython.itkImageVSM2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::VariableSizeMatrix< double > > const *":
        """
        GetPixelContainer(itkImageVSM2 self) -> itk::ImportImageContainer< unsigned long long,itk::VariableSizeMatrix< double > >
        GetPixelContainer(itkImageVSM2 self) -> itk::ImportImageContainer< unsigned long long,itk::VariableSizeMatrix< double > > const *
        """
        return _itkStructureTensorPython.itkImageVSM2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::VariableSizeMatrix< double > > *') -> "void":
        """SetPixelContainer(itkImageVSM2 self, itk::ImportImageContainer< unsigned long long,itk::VariableSizeMatrix< double > > * container)"""
        return _itkStructureTensorPython.itkImageVSM2_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVSM2') -> "void":
        """Graft(itkImageVSM2 self, itkImageVSM2 data)"""
        return _itkStructureTensorPython.itkImageVSM2_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::VariableSizeMatrix< double > > const":
        """
        GetPixelAccessor(itkImageVSM2 self) -> itk::DefaultPixelAccessor< itk::VariableSizeMatrix< double > >
        GetPixelAccessor(itkImageVSM2 self) -> itk::DefaultPixelAccessor< itk::VariableSizeMatrix< double > > const
        """
        return _itkStructureTensorPython.itkImageVSM2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::VariableSizeMatrix< double >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageVSM2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::VariableSizeMatrix< double >,2 > >
        GetNeighborhoodAccessor(itkImageVSM2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::VariableSizeMatrix< double >,2 > > const
        """
        return _itkStructureTensorPython.itkImageVSM2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkStructureTensorPython.delete_itkImageVSM2

    def cast(obj: 'itkLightObject') -> "itkImageVSM2 *":
        """cast(itkLightObject obj) -> itkImageVSM2"""
        return _itkStructureTensorPython.itkImageVSM2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageVSM2

        Create a new object of the class itkImageVSM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVSM2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVSM2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVSM2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVSM2.Clone = new_instancemethod(_itkStructureTensorPython.itkImageVSM2_Clone, None, itkImageVSM2)
itkImageVSM2.Allocate = new_instancemethod(_itkStructureTensorPython.itkImageVSM2_Allocate, None, itkImageVSM2)
itkImageVSM2.FillBuffer = new_instancemethod(_itkStructureTensorPython.itkImageVSM2_FillBuffer, None, itkImageVSM2)
itkImageVSM2.SetPixel = new_instancemethod(_itkStructureTensorPython.itkImageVSM2_SetPixel, None, itkImageVSM2)
itkImageVSM2.GetPixel = new_instancemethod(_itkStructureTensorPython.itkImageVSM2_GetPixel, None, itkImageVSM2)
itkImageVSM2.GetBufferPointer = new_instancemethod(_itkStructureTensorPython.itkImageVSM2_GetBufferPointer, None, itkImageVSM2)
itkImageVSM2.GetPixelContainer = new_instancemethod(_itkStructureTensorPython.itkImageVSM2_GetPixelContainer, None, itkImageVSM2)
itkImageVSM2.SetPixelContainer = new_instancemethod(_itkStructureTensorPython.itkImageVSM2_SetPixelContainer, None, itkImageVSM2)
itkImageVSM2.Graft = new_instancemethod(_itkStructureTensorPython.itkImageVSM2_Graft, None, itkImageVSM2)
itkImageVSM2.GetPixelAccessor = new_instancemethod(_itkStructureTensorPython.itkImageVSM2_GetPixelAccessor, None, itkImageVSM2)
itkImageVSM2.GetNeighborhoodAccessor = new_instancemethod(_itkStructureTensorPython.itkImageVSM2_GetNeighborhoodAccessor, None, itkImageVSM2)
itkImageVSM2_swigregister = _itkStructureTensorPython.itkImageVSM2_swigregister
itkImageVSM2_swigregister(itkImageVSM2)

def itkImageVSM2___New_orig__() -> "itkImageVSM2_Pointer":
    """itkImageVSM2___New_orig__() -> itkImageVSM2_Pointer"""
    return _itkStructureTensorPython.itkImageVSM2___New_orig__()

def itkImageVSM2_cast(obj: 'itkLightObject') -> "itkImageVSM2 *":
    """itkImageVSM2_cast(itkLightObject obj) -> itkImageVSM2"""
    return _itkStructureTensorPython.itkImageVSM2_cast(obj)

class itkImageVSM3(itkImagePython.itkImageBase3):
    """Proxy of C++ itkImageVSM3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVSM3_Pointer":
        """__New_orig__() -> itkImageVSM3_Pointer"""
        return _itkStructureTensorPython.itkImageVSM3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVSM3_Pointer":
        """Clone(itkImageVSM3 self) -> itkImageVSM3_Pointer"""
        return _itkStructureTensorPython.itkImageVSM3_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVSM3 self, bool initializePixels=False)
        Allocate(itkImageVSM3 self)
        """
        return _itkStructureTensorPython.itkImageVSM3_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVariableSizeMatrixD') -> "void":
        """FillBuffer(itkImageVSM3 self, itkVariableSizeMatrixD value)"""
        return _itkStructureTensorPython.itkImageVSM3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkVariableSizeMatrixD') -> "void":
        """SetPixel(itkImageVSM3 self, itkIndex3 index, itkVariableSizeMatrixD value)"""
        return _itkStructureTensorPython.itkImageVSM3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVariableSizeMatrixD &":
        """
        GetPixel(itkImageVSM3 self, itkIndex3 index) -> itkVariableSizeMatrixD
        GetPixel(itkImageVSM3 self, itkIndex3 index) -> itkVariableSizeMatrixD
        """
        return _itkStructureTensorPython.itkImageVSM3_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVariableSizeMatrixD const *":
        """
        GetBufferPointer(itkImageVSM3 self) -> itkVariableSizeMatrixD
        GetBufferPointer(itkImageVSM3 self) -> itkVariableSizeMatrixD
        """
        return _itkStructureTensorPython.itkImageVSM3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::VariableSizeMatrix< double > > const *":
        """
        GetPixelContainer(itkImageVSM3 self) -> itk::ImportImageContainer< unsigned long long,itk::VariableSizeMatrix< double > >
        GetPixelContainer(itkImageVSM3 self) -> itk::ImportImageContainer< unsigned long long,itk::VariableSizeMatrix< double > > const *
        """
        return _itkStructureTensorPython.itkImageVSM3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::VariableSizeMatrix< double > > *') -> "void":
        """SetPixelContainer(itkImageVSM3 self, itk::ImportImageContainer< unsigned long long,itk::VariableSizeMatrix< double > > * container)"""
        return _itkStructureTensorPython.itkImageVSM3_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVSM3') -> "void":
        """Graft(itkImageVSM3 self, itkImageVSM3 data)"""
        return _itkStructureTensorPython.itkImageVSM3_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::VariableSizeMatrix< double > > const":
        """
        GetPixelAccessor(itkImageVSM3 self) -> itk::DefaultPixelAccessor< itk::VariableSizeMatrix< double > >
        GetPixelAccessor(itkImageVSM3 self) -> itk::DefaultPixelAccessor< itk::VariableSizeMatrix< double > > const
        """
        return _itkStructureTensorPython.itkImageVSM3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::VariableSizeMatrix< double >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageVSM3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::VariableSizeMatrix< double >,3 > >
        GetNeighborhoodAccessor(itkImageVSM3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::VariableSizeMatrix< double >,3 > > const
        """
        return _itkStructureTensorPython.itkImageVSM3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkStructureTensorPython.delete_itkImageVSM3

    def cast(obj: 'itkLightObject') -> "itkImageVSM3 *":
        """cast(itkLightObject obj) -> itkImageVSM3"""
        return _itkStructureTensorPython.itkImageVSM3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageVSM3

        Create a new object of the class itkImageVSM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVSM3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVSM3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVSM3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVSM3.Clone = new_instancemethod(_itkStructureTensorPython.itkImageVSM3_Clone, None, itkImageVSM3)
itkImageVSM3.Allocate = new_instancemethod(_itkStructureTensorPython.itkImageVSM3_Allocate, None, itkImageVSM3)
itkImageVSM3.FillBuffer = new_instancemethod(_itkStructureTensorPython.itkImageVSM3_FillBuffer, None, itkImageVSM3)
itkImageVSM3.SetPixel = new_instancemethod(_itkStructureTensorPython.itkImageVSM3_SetPixel, None, itkImageVSM3)
itkImageVSM3.GetPixel = new_instancemethod(_itkStructureTensorPython.itkImageVSM3_GetPixel, None, itkImageVSM3)
itkImageVSM3.GetBufferPointer = new_instancemethod(_itkStructureTensorPython.itkImageVSM3_GetBufferPointer, None, itkImageVSM3)
itkImageVSM3.GetPixelContainer = new_instancemethod(_itkStructureTensorPython.itkImageVSM3_GetPixelContainer, None, itkImageVSM3)
itkImageVSM3.SetPixelContainer = new_instancemethod(_itkStructureTensorPython.itkImageVSM3_SetPixelContainer, None, itkImageVSM3)
itkImageVSM3.Graft = new_instancemethod(_itkStructureTensorPython.itkImageVSM3_Graft, None, itkImageVSM3)
itkImageVSM3.GetPixelAccessor = new_instancemethod(_itkStructureTensorPython.itkImageVSM3_GetPixelAccessor, None, itkImageVSM3)
itkImageVSM3.GetNeighborhoodAccessor = new_instancemethod(_itkStructureTensorPython.itkImageVSM3_GetNeighborhoodAccessor, None, itkImageVSM3)
itkImageVSM3_swigregister = _itkStructureTensorPython.itkImageVSM3_swigregister
itkImageVSM3_swigregister(itkImageVSM3)

def itkImageVSM3___New_orig__() -> "itkImageVSM3_Pointer":
    """itkImageVSM3___New_orig__() -> itkImageVSM3_Pointer"""
    return _itkStructureTensorPython.itkImageVSM3___New_orig__()

def itkImageVSM3_cast(obj: 'itkLightObject') -> "itkImageVSM3 *":
    """itkImageVSM3_cast(itkLightObject obj) -> itkImageVSM3"""
    return _itkStructureTensorPython.itkImageVSM3_cast(obj)

class itkStructureTensorIF2VSM2(itkImageToImageFilterIF2VSM2):
    """Proxy of C++ itkStructureTensorIF2VSM2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkStructureTensorIF2VSM2_Pointer":
        """__New_orig__() -> itkStructureTensorIF2VSM2_Pointer"""
        return _itkStructureTensorPython.itkStructureTensorIF2VSM2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkStructureTensorIF2VSM2_Pointer":
        """Clone(itkStructureTensorIF2VSM2 self) -> itkStructureTensorIF2VSM2_Pointer"""
        return _itkStructureTensorPython.itkStructureTensorIF2VSM2_Clone(self)

    InputPixelTypeIsFloatCheck = _itkStructureTensorPython.itkStructureTensorIF2VSM2_InputPixelTypeIsFloatCheck

    def SetInputs(self, inputs: 'std::vector< itkImageF2_Pointer,std::allocator< itkImageF2_Pointer > > const &') -> "void":
        """SetInputs(itkStructureTensorIF2VSM2 self, std::vector< itkImageF2_Pointer,std::allocator< itkImageF2_Pointer > > const & inputs)"""
        return _itkStructureTensorPython.itkStructureTensorIF2VSM2_SetInputs(self, inputs)


    def SetGaussianWindowRadius(self, _arg: 'double const') -> "void":
        """SetGaussianWindowRadius(itkStructureTensorIF2VSM2 self, double const _arg)"""
        return _itkStructureTensorPython.itkStructureTensorIF2VSM2_SetGaussianWindowRadius(self, _arg)


    def GetGaussianWindowRadius(self) -> "double":
        """GetGaussianWindowRadius(itkStructureTensorIF2VSM2 self) -> double"""
        return _itkStructureTensorPython.itkStructureTensorIF2VSM2_GetGaussianWindowRadius(self)


    def SetGaussianWindowSigma(self, _arg: 'double const') -> "void":
        """SetGaussianWindowSigma(itkStructureTensorIF2VSM2 self, double const _arg)"""
        return _itkStructureTensorPython.itkStructureTensorIF2VSM2_SetGaussianWindowSigma(self, _arg)


    def GetGaussianWindowSigma(self) -> "double":
        """GetGaussianWindowSigma(itkStructureTensorIF2VSM2 self) -> double"""
        return _itkStructureTensorPython.itkStructureTensorIF2VSM2_GetGaussianWindowSigma(self)


    def GetModifiableGaussianSource(self) -> "itk::GaussianImageSource< itk::Image< double,2 > > *":
        """GetModifiableGaussianSource(itkStructureTensorIF2VSM2 self) -> itk::GaussianImageSource< itk::Image< double,2 > > *"""
        return _itkStructureTensorPython.itkStructureTensorIF2VSM2_GetModifiableGaussianSource(self)


    def GetGaussianSource(self, *args) -> "itk::GaussianImageSource< itk::Image< double,2 > > *":
        """
        GetGaussianSource(itkStructureTensorIF2VSM2 self) -> itk::GaussianImageSource< itk::Image< double,2 > > const
        GetGaussianSource(itkStructureTensorIF2VSM2 self) -> itk::GaussianImageSource< itk::Image< double,2 > > *
        """
        return _itkStructureTensorPython.itkStructureTensorIF2VSM2_GetGaussianSource(self, *args)


    def ComputeProjectionImage(self, eigen_number: 'unsigned int') -> "itkImageF2_Pointer":
        """ComputeProjectionImage(itkStructureTensorIF2VSM2 self, unsigned int eigen_number) -> itkImageF2_Pointer"""
        return _itkStructureTensorPython.itkStructureTensorIF2VSM2_ComputeProjectionImage(self, eigen_number)


    def ComputeProjectionImageWithLargestResponse(self) -> "itkImageF2_Pointer":
        """ComputeProjectionImageWithLargestResponse(itkStructureTensorIF2VSM2 self) -> itkImageF2_Pointer"""
        return _itkStructureTensorPython.itkStructureTensorIF2VSM2_ComputeProjectionImageWithLargestResponse(self)


    def ComputeCoherencyImage(self) -> "itkImageF2_Pointer":
        """ComputeCoherencyImage(itkStructureTensorIF2VSM2 self) -> itkImageF2_Pointer"""
        return _itkStructureTensorPython.itkStructureTensorIF2VSM2_ComputeCoherencyImage(self)


    def GetRotationMatrixFromOutputMatrix(self, outputMatrix: 'itkVariableSizeMatrixD', reOrderLargestEigenvectorInFirstRow: 'bool'=False) -> "itkVariableSizeMatrixD":
        """
        GetRotationMatrixFromOutputMatrix(itkStructureTensorIF2VSM2 self, itkVariableSizeMatrixD outputMatrix, bool reOrderLargestEigenvectorInFirstRow=False) -> itkVariableSizeMatrixD
        GetRotationMatrixFromOutputMatrix(itkStructureTensorIF2VSM2 self, itkVariableSizeMatrixD outputMatrix) -> itkVariableSizeMatrixD
        """
        return _itkStructureTensorPython.itkStructureTensorIF2VSM2_GetRotationMatrixFromOutputMatrix(self, outputMatrix, reOrderLargestEigenvectorInFirstRow)

    __swig_destroy__ = _itkStructureTensorPython.delete_itkStructureTensorIF2VSM2

    def cast(obj: 'itkLightObject') -> "itkStructureTensorIF2VSM2 *":
        """cast(itkLightObject obj) -> itkStructureTensorIF2VSM2"""
        return _itkStructureTensorPython.itkStructureTensorIF2VSM2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkStructureTensorIF2VSM2

        Create a new object of the class itkStructureTensorIF2VSM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStructureTensorIF2VSM2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkStructureTensorIF2VSM2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkStructureTensorIF2VSM2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkStructureTensorIF2VSM2.Clone = new_instancemethod(_itkStructureTensorPython.itkStructureTensorIF2VSM2_Clone, None, itkStructureTensorIF2VSM2)
itkStructureTensorIF2VSM2.SetInputs = new_instancemethod(_itkStructureTensorPython.itkStructureTensorIF2VSM2_SetInputs, None, itkStructureTensorIF2VSM2)
itkStructureTensorIF2VSM2.SetGaussianWindowRadius = new_instancemethod(_itkStructureTensorPython.itkStructureTensorIF2VSM2_SetGaussianWindowRadius, None, itkStructureTensorIF2VSM2)
itkStructureTensorIF2VSM2.GetGaussianWindowRadius = new_instancemethod(_itkStructureTensorPython.itkStructureTensorIF2VSM2_GetGaussianWindowRadius, None, itkStructureTensorIF2VSM2)
itkStructureTensorIF2VSM2.SetGaussianWindowSigma = new_instancemethod(_itkStructureTensorPython.itkStructureTensorIF2VSM2_SetGaussianWindowSigma, None, itkStructureTensorIF2VSM2)
itkStructureTensorIF2VSM2.GetGaussianWindowSigma = new_instancemethod(_itkStructureTensorPython.itkStructureTensorIF2VSM2_GetGaussianWindowSigma, None, itkStructureTensorIF2VSM2)
itkStructureTensorIF2VSM2.GetModifiableGaussianSource = new_instancemethod(_itkStructureTensorPython.itkStructureTensorIF2VSM2_GetModifiableGaussianSource, None, itkStructureTensorIF2VSM2)
itkStructureTensorIF2VSM2.GetGaussianSource = new_instancemethod(_itkStructureTensorPython.itkStructureTensorIF2VSM2_GetGaussianSource, None, itkStructureTensorIF2VSM2)
itkStructureTensorIF2VSM2.ComputeProjectionImage = new_instancemethod(_itkStructureTensorPython.itkStructureTensorIF2VSM2_ComputeProjectionImage, None, itkStructureTensorIF2VSM2)
itkStructureTensorIF2VSM2.ComputeProjectionImageWithLargestResponse = new_instancemethod(_itkStructureTensorPython.itkStructureTensorIF2VSM2_ComputeProjectionImageWithLargestResponse, None, itkStructureTensorIF2VSM2)
itkStructureTensorIF2VSM2.ComputeCoherencyImage = new_instancemethod(_itkStructureTensorPython.itkStructureTensorIF2VSM2_ComputeCoherencyImage, None, itkStructureTensorIF2VSM2)
itkStructureTensorIF2VSM2.GetRotationMatrixFromOutputMatrix = new_instancemethod(_itkStructureTensorPython.itkStructureTensorIF2VSM2_GetRotationMatrixFromOutputMatrix, None, itkStructureTensorIF2VSM2)
itkStructureTensorIF2VSM2_swigregister = _itkStructureTensorPython.itkStructureTensorIF2VSM2_swigregister
itkStructureTensorIF2VSM2_swigregister(itkStructureTensorIF2VSM2)

def itkStructureTensorIF2VSM2___New_orig__() -> "itkStructureTensorIF2VSM2_Pointer":
    """itkStructureTensorIF2VSM2___New_orig__() -> itkStructureTensorIF2VSM2_Pointer"""
    return _itkStructureTensorPython.itkStructureTensorIF2VSM2___New_orig__()

def itkStructureTensorIF2VSM2_cast(obj: 'itkLightObject') -> "itkStructureTensorIF2VSM2 *":
    """itkStructureTensorIF2VSM2_cast(itkLightObject obj) -> itkStructureTensorIF2VSM2"""
    return _itkStructureTensorPython.itkStructureTensorIF2VSM2_cast(obj)

class itkStructureTensorIF3VSM3(itkImageToImageFilterIF3VSM3):
    """Proxy of C++ itkStructureTensorIF3VSM3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkStructureTensorIF3VSM3_Pointer":
        """__New_orig__() -> itkStructureTensorIF3VSM3_Pointer"""
        return _itkStructureTensorPython.itkStructureTensorIF3VSM3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkStructureTensorIF3VSM3_Pointer":
        """Clone(itkStructureTensorIF3VSM3 self) -> itkStructureTensorIF3VSM3_Pointer"""
        return _itkStructureTensorPython.itkStructureTensorIF3VSM3_Clone(self)

    InputPixelTypeIsFloatCheck = _itkStructureTensorPython.itkStructureTensorIF3VSM3_InputPixelTypeIsFloatCheck

    def SetInputs(self, inputs: 'std::vector< itkImageF3_Pointer,std::allocator< itkImageF3_Pointer > > const &') -> "void":
        """SetInputs(itkStructureTensorIF3VSM3 self, std::vector< itkImageF3_Pointer,std::allocator< itkImageF3_Pointer > > const & inputs)"""
        return _itkStructureTensorPython.itkStructureTensorIF3VSM3_SetInputs(self, inputs)


    def SetGaussianWindowRadius(self, _arg: 'double const') -> "void":
        """SetGaussianWindowRadius(itkStructureTensorIF3VSM3 self, double const _arg)"""
        return _itkStructureTensorPython.itkStructureTensorIF3VSM3_SetGaussianWindowRadius(self, _arg)


    def GetGaussianWindowRadius(self) -> "double":
        """GetGaussianWindowRadius(itkStructureTensorIF3VSM3 self) -> double"""
        return _itkStructureTensorPython.itkStructureTensorIF3VSM3_GetGaussianWindowRadius(self)


    def SetGaussianWindowSigma(self, _arg: 'double const') -> "void":
        """SetGaussianWindowSigma(itkStructureTensorIF3VSM3 self, double const _arg)"""
        return _itkStructureTensorPython.itkStructureTensorIF3VSM3_SetGaussianWindowSigma(self, _arg)


    def GetGaussianWindowSigma(self) -> "double":
        """GetGaussianWindowSigma(itkStructureTensorIF3VSM3 self) -> double"""
        return _itkStructureTensorPython.itkStructureTensorIF3VSM3_GetGaussianWindowSigma(self)


    def GetModifiableGaussianSource(self) -> "itk::GaussianImageSource< itk::Image< double,3 > > *":
        """GetModifiableGaussianSource(itkStructureTensorIF3VSM3 self) -> itk::GaussianImageSource< itk::Image< double,3 > > *"""
        return _itkStructureTensorPython.itkStructureTensorIF3VSM3_GetModifiableGaussianSource(self)


    def GetGaussianSource(self, *args) -> "itk::GaussianImageSource< itk::Image< double,3 > > *":
        """
        GetGaussianSource(itkStructureTensorIF3VSM3 self) -> itk::GaussianImageSource< itk::Image< double,3 > > const
        GetGaussianSource(itkStructureTensorIF3VSM3 self) -> itk::GaussianImageSource< itk::Image< double,3 > > *
        """
        return _itkStructureTensorPython.itkStructureTensorIF3VSM3_GetGaussianSource(self, *args)


    def ComputeProjectionImage(self, eigen_number: 'unsigned int') -> "itkImageF3_Pointer":
        """ComputeProjectionImage(itkStructureTensorIF3VSM3 self, unsigned int eigen_number) -> itkImageF3_Pointer"""
        return _itkStructureTensorPython.itkStructureTensorIF3VSM3_ComputeProjectionImage(self, eigen_number)


    def ComputeProjectionImageWithLargestResponse(self) -> "itkImageF3_Pointer":
        """ComputeProjectionImageWithLargestResponse(itkStructureTensorIF3VSM3 self) -> itkImageF3_Pointer"""
        return _itkStructureTensorPython.itkStructureTensorIF3VSM3_ComputeProjectionImageWithLargestResponse(self)


    def ComputeCoherencyImage(self) -> "itkImageF3_Pointer":
        """ComputeCoherencyImage(itkStructureTensorIF3VSM3 self) -> itkImageF3_Pointer"""
        return _itkStructureTensorPython.itkStructureTensorIF3VSM3_ComputeCoherencyImage(self)


    def GetRotationMatrixFromOutputMatrix(self, outputMatrix: 'itkVariableSizeMatrixD', reOrderLargestEigenvectorInFirstRow: 'bool'=False) -> "itkVariableSizeMatrixD":
        """
        GetRotationMatrixFromOutputMatrix(itkStructureTensorIF3VSM3 self, itkVariableSizeMatrixD outputMatrix, bool reOrderLargestEigenvectorInFirstRow=False) -> itkVariableSizeMatrixD
        GetRotationMatrixFromOutputMatrix(itkStructureTensorIF3VSM3 self, itkVariableSizeMatrixD outputMatrix) -> itkVariableSizeMatrixD
        """
        return _itkStructureTensorPython.itkStructureTensorIF3VSM3_GetRotationMatrixFromOutputMatrix(self, outputMatrix, reOrderLargestEigenvectorInFirstRow)

    __swig_destroy__ = _itkStructureTensorPython.delete_itkStructureTensorIF3VSM3

    def cast(obj: 'itkLightObject') -> "itkStructureTensorIF3VSM3 *":
        """cast(itkLightObject obj) -> itkStructureTensorIF3VSM3"""
        return _itkStructureTensorPython.itkStructureTensorIF3VSM3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkStructureTensorIF3VSM3

        Create a new object of the class itkStructureTensorIF3VSM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStructureTensorIF3VSM3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkStructureTensorIF3VSM3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkStructureTensorIF3VSM3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkStructureTensorIF3VSM3.Clone = new_instancemethod(_itkStructureTensorPython.itkStructureTensorIF3VSM3_Clone, None, itkStructureTensorIF3VSM3)
itkStructureTensorIF3VSM3.SetInputs = new_instancemethod(_itkStructureTensorPython.itkStructureTensorIF3VSM3_SetInputs, None, itkStructureTensorIF3VSM3)
itkStructureTensorIF3VSM3.SetGaussianWindowRadius = new_instancemethod(_itkStructureTensorPython.itkStructureTensorIF3VSM3_SetGaussianWindowRadius, None, itkStructureTensorIF3VSM3)
itkStructureTensorIF3VSM3.GetGaussianWindowRadius = new_instancemethod(_itkStructureTensorPython.itkStructureTensorIF3VSM3_GetGaussianWindowRadius, None, itkStructureTensorIF3VSM3)
itkStructureTensorIF3VSM3.SetGaussianWindowSigma = new_instancemethod(_itkStructureTensorPython.itkStructureTensorIF3VSM3_SetGaussianWindowSigma, None, itkStructureTensorIF3VSM3)
itkStructureTensorIF3VSM3.GetGaussianWindowSigma = new_instancemethod(_itkStructureTensorPython.itkStructureTensorIF3VSM3_GetGaussianWindowSigma, None, itkStructureTensorIF3VSM3)
itkStructureTensorIF3VSM3.GetModifiableGaussianSource = new_instancemethod(_itkStructureTensorPython.itkStructureTensorIF3VSM3_GetModifiableGaussianSource, None, itkStructureTensorIF3VSM3)
itkStructureTensorIF3VSM3.GetGaussianSource = new_instancemethod(_itkStructureTensorPython.itkStructureTensorIF3VSM3_GetGaussianSource, None, itkStructureTensorIF3VSM3)
itkStructureTensorIF3VSM3.ComputeProjectionImage = new_instancemethod(_itkStructureTensorPython.itkStructureTensorIF3VSM3_ComputeProjectionImage, None, itkStructureTensorIF3VSM3)
itkStructureTensorIF3VSM3.ComputeProjectionImageWithLargestResponse = new_instancemethod(_itkStructureTensorPython.itkStructureTensorIF3VSM3_ComputeProjectionImageWithLargestResponse, None, itkStructureTensorIF3VSM3)
itkStructureTensorIF3VSM3.ComputeCoherencyImage = new_instancemethod(_itkStructureTensorPython.itkStructureTensorIF3VSM3_ComputeCoherencyImage, None, itkStructureTensorIF3VSM3)
itkStructureTensorIF3VSM3.GetRotationMatrixFromOutputMatrix = new_instancemethod(_itkStructureTensorPython.itkStructureTensorIF3VSM3_GetRotationMatrixFromOutputMatrix, None, itkStructureTensorIF3VSM3)
itkStructureTensorIF3VSM3_swigregister = _itkStructureTensorPython.itkStructureTensorIF3VSM3_swigregister
itkStructureTensorIF3VSM3_swigregister(itkStructureTensorIF3VSM3)

def itkStructureTensorIF3VSM3___New_orig__() -> "itkStructureTensorIF3VSM3_Pointer":
    """itkStructureTensorIF3VSM3___New_orig__() -> itkStructureTensorIF3VSM3_Pointer"""
    return _itkStructureTensorPython.itkStructureTensorIF3VSM3___New_orig__()

def itkStructureTensorIF3VSM3_cast(obj: 'itkLightObject') -> "itkStructureTensorIF3VSM3 *":
    """itkStructureTensorIF3VSM3_cast(itkLightObject obj) -> itkStructureTensorIF3VSM3"""
    return _itkStructureTensorPython.itkStructureTensorIF3VSM3_cast(obj)


def structure_tensor(*args, **kwargs):
    """Procedural interface for StructureTensor"""
    import itk
    return itk.StructureTensor.__call__(*args, **kwargs)
def image_source(*args, **kwargs):
    """Procedural interface for ImageSource"""
    import itk
    return itk.ImageSource.__call__(*args, **kwargs)
def image_to_image_filter(*args, **kwargs):
    """Procedural interface for ImageToImageFilter"""
    import itk
    return itk.ImageToImageFilter.__call__(*args, **kwargs)



