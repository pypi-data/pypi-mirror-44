from Fortuna import *

import time as _time
import math as _math
import random as _random


def quick_test(cycles=10000):
    start_test = _time.time()
    print("\nFortuna Test Suite: RNG Storm Engine\n")
    some_list = [i for i in range(10)]
    truffle_shuffle_class = TruffleShuffle(some_list)
    distribution_timer(truffle_shuffle_class, num_cycles=cycles)
    print("Functional truffle_shuffle(some_list)")
    distribution_timer(truffle_shuffle, some_list, num_cycles=cycles)
    some_list.sort()
    distribution_timer(lazy_cat, some_list, num_cycles=cycles)
    distribution_timer(lazy_cat, some_list, fn=front_geometric, num_cycles=cycles)
    distribution_timer(lazy_cat, some_list, fn=back_geometric, num_cycles=cycles)
    distribution_timer(lazy_cat, some_list, fn=middle_geometric, num_cycles=cycles)
    distribution_timer(lazy_cat, some_list, fn=front_gauss, num_cycles=cycles)
    distribution_timer(lazy_cat, some_list, fn=back_gauss, num_cycles=cycles)
    distribution_timer(lazy_cat, some_list, fn=middle_gauss, num_cycles=cycles)
    distribution_timer(lazy_cat, some_list, fn=front_poisson, num_cycles=cycles)
    distribution_timer(lazy_cat, some_list, fn=back_poisson, num_cycles=cycles)
    distribution_timer(lazy_cat, some_list, fn=middle_poisson, num_cycles=cycles)
    distribution_timer(lazy_cat, some_list, fn=quantum_geometric, num_cycles=cycles)
    distribution_timer(lazy_cat, some_list, fn=quantum_gauss, num_cycles=cycles)
    distribution_timer(lazy_cat, some_list, fn=quantum_poisson, num_cycles=cycles)
    distribution_timer(lazy_cat, some_list, fn=quantum_monty, num_cycles=cycles)
    monty = QuantumMonty(some_list)
    distribution_timer(monty.quantum_monty, num_cycles=cycles)
    print("\nWeighted Choices")
    population = [36, 30, 24, 18]
    cum_weights = [1, 10, 100, 1000]
    rel_weights = [1, 9, 90, 900]
    print("Base Case")
    distribution_timer(_random.choices, population, cum_weights=cum_weights, num_cycles=cycles)
    cum_weighted_choice = CumulativeWeightedChoice(list(zip(cum_weights, population)))
    distribution_timer(cum_weighted_choice, num_cycles=cycles)
    print("Functional Weighted Choice")
    distribution_timer(cumulative_weighted_choice, list(zip(cum_weights, population)), num_cycles=cycles)
    print("Base Case")
    distribution_timer(_random.choices, population, weights=rel_weights, num_cycles=cycles)
    rel_weighted_choice = RelativeWeightedChoice(list(zip(rel_weights, population)))
    distribution_timer(rel_weighted_choice, num_cycles=cycles)
    print("\nFlexCat(some_dict)")
    some_dict = {1: [1, 2, 3], 2: [10, 20, 30], 3: [100, 200, 300]}
    flex_cat = FlexCat(some_dict)
    distribution_timer(flex_cat, num_cycles=cycles)
    print("\nRandom Integers")
    print("Base Case")
    distribution_timer(_random.randrange, 10, num_cycles=cycles)
    distribution_timer(randbelow, 10, num_cycles=cycles)
    distribution_timer(randindex, 10, num_cycles=cycles)
    distribution_timer(randindex, -10, num_cycles=cycles)
    distribution_timer(randindex, 0, num_cycles=cycles)
    print("Base Case")
    distribution_timer(_random.randint, -5, 5, num_cycles=cycles)
    distribution_timer(randint, -5, 5, num_cycles=cycles)
    print("Base Case")
    distribution_timer(_random.randrange, 1, 21, 2, num_cycles=cycles)
    distribution_timer(randrange, 1, 21, 2, num_cycles=cycles)
    distribution_timer(d, 10, num_cycles=cycles)
    distribution_timer(dice, 2, 6, num_cycles=cycles)
    distribution_timer(plus_or_minus, 5, num_cycles=cycles)
    distribution_timer(plus_or_minus_linear, 5, num_cycles=cycles)
    print("\nRandom Floats")
    distribution_timer(random, post_processor=round, num_cycles=cycles)
    distribution_timer(uniform, 0.0, 10.0, post_processor=_math.floor, num_cycles=cycles)
    print("\nRandom Boolean")
    distribution_timer(percent_true, 33.33, num_cycles=cycles)
    print("\nRandom Shuffle")
    print("Base Case")
    print(f"Timer only: random.shuffle(some_list) of size {len(some_list)}:")
    timer(_random.shuffle, some_list)
    some_list.sort()
    print(f"\nTimer only: shuffle(some_list) of size {len(some_list)}:")
    timer(shuffle, some_list)
    some_list.sort()
    print(f"\nTimer only: knuth(some_list) of size {len(some_list)}:")
    timer(knuth, some_list)
    some_list.sort()
    print(f"\nTimer only: fisher_yates(some_list) of size {len(some_list)}:")
    timer(fisher_yates, some_list)
    some_list.sort()
    print("\n\nRandom Values")
    print("Base Case")
    distribution_timer(_random.choice, some_list, num_cycles=cycles)
    distribution_timer(random_value, some_list, num_cycles=cycles)
    print()
    print("-" * 73)
    stop_test = _time.time()
    print(f"Total Test Time: {round(stop_test - start_test, 3)} seconds")


if __name__ == "__main__":
    quick_test(1000000)
