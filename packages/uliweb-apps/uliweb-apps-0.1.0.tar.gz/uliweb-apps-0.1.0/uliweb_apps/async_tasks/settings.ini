[MODELS]
async_tasks = '#{appname}.models.Async_Tasks'
async_tasks_his = '#{appname}.models.Async_Tasks_His'

#全局性配置
[ASYNC_TASKS]
#超时时间
timeout = '30m'
#最大重试次数
max_retry_times = 5
#重试间隔时间
retry_time_interval = '15m'

ASYNC_STATUS = [('0', 'queued'),
    ('1', 'success'),
    ('2', 'started'),
    ('E', 'error'),
    ('F', 'failed'),
    ('C', 'cancel'),
]

MESSAGE_TYPE = [('r', 'Request'), ('s', 'Response')]
MESSAGE_SOURCE = [('l', 'Local'), ('r', 'Remote')]

#任务KEY队列,用于查看任务是否存在
tasks_keys_queue = 'async_tasks_keys'
#缺省参数
parameters = {}
#Handler基类，为None则使用缺省的Handler类
base = '#{appname}.Handler'

check_point = 30

#定义队列名,值需要与ASYNC_TASKS_WORKERS/queues一致
[ASYNC_TASKS_QUEUES]
default = 'async_workers_default'
slow = 'async_workers_slow'

[ASYNC_TASKS_WORKERS]
check_point = 10
#available options
#max_requests
#timeout seconds
#soft_memory_limit
#number if None then use multiple cores
queues = {
    'async_workers_default':{'soft_memory_limit':500, 'hard_memory_limit':700,
         'max_requests':1000, 'timeout':300, 'number':None},
    'async_workers_slow':{'soft_memory_limit':1000, 'hard_memory_limit':1200,
         'max_requests':500, 'timeout':7200, 'number':None},
}

#命令配置
[ASYNC_TASKS_COMMANDS]
echo = {
    'function':'async_tasks.tasks.echo',
}
shell = {
    'function':'async_tasks.tasks.shell',
}
test_error = {
    'function':'async_tasks.tasks.test_error',
}

#command_name = {
#    'function':'函数路径',
#    'timeout':'超时时间,可以是整数或字符串表达'，
#    'parameters':'缺省参数',
#    'base':'Job的基类',
#    ’queue':'队列名',
#	]
#}

[FUNCTIONS]
call_async = '#{appname}.call_async'
AsyncCommand = '#{appname}.AsyncCommand'
