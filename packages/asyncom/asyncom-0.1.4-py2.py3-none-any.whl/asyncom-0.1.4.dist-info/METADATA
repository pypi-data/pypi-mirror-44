Metadata-Version: 2.1
Name: asyncom
Version: 0.1.4
Summary: Small and partial Obejct mapper on top of sqlalchemy for async
Home-page: https://github.com/vinissimus/asyncom
Author: Jordi Collell
Author-email: jordic@gmail.com
License: MIT license
Keywords: asyncom
Platform: UNKNOWN
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Requires-Dist: sqlalchemy
Requires-Dist: asyncpg
Requires-Dist: databases


# AsyncOM

Async OM it's a super basic Object mapper based almost all on sqlalchemy
ORM layer.

We use the declarative extension for building the classes, and also,
factor instances of them on querys.

There is still no support for relations. At the moment it's
tied to the [encode/databases](https://github.com/encode/databases) dependency.



## Usage

```python

from sqlalchemy.ext.declarative import declarative_base
import sqlalchemy as sa

Base = declarative_base()


class OrmTest(Base):
    __tablename__ = 'orm_test'

    id = sa.Column(sa.Integer, primary_key=True)
    name = sa.Column(sa.String(100), index=True)
    value = sa.Column(sa.Text)


# Instead of usign Database from databases, you can use:

db = OMDatabase()
res = await db.query(OrmTest).filter(
    OrmTest.name.like('xx')).all()

# Look at tests
```




=======
History
=======

0.1.4
----
query(Object).get should return None if not found

0.1.3
----
- Fixes and improvements. Lay out basic API

0.1.0 (2019-04-07)
------------------

* First release on PyPI.


