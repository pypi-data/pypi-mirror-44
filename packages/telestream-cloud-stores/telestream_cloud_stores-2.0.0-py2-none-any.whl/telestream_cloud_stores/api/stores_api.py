# coding: utf-8

"""
    API

    API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: you@your-company.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from telestream_cloud_stores.api_client import ApiClient


class StoresApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_store(self, store_body, **kwargs):  # noqa: E501
        """create_store  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_store(store_body, async=True)
        >>> result = thread.get()

        :param async bool
        :param StoreBody store_body: (required)
        :return: Store
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_store_with_http_info(store_body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_store_with_http_info(store_body, **kwargs)  # noqa: E501
            return data

    def create_store_with_http_info(self, store_body, **kwargs):  # noqa: E501
        """create_store  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_store_with_http_info(store_body, async=True)
        >>> result = thread.get()

        :param async bool
        :param StoreBody store_body: (required)
        :return: Store
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_body' is set
        if ('store_body' not in params or
                params['store_body'] is None):
            raise ValueError("Missing the required parameter `store_body` when calling `create_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'store_body' in params:
            body_params = params['store_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/stores', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Store',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_store_client_link(self, store_id, service_name, service_id, **kwargs):  # noqa: E501
        """create_store_client_link  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_store_client_link(store_id, service_name, service_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str store_id: an id of a store (required)
        :param str service_name: a name of a client service (required)
        :param str service_id: a service id of a resource that queries for its stores (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_store_client_link_with_http_info(store_id, service_name, service_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_store_client_link_with_http_info(store_id, service_name, service_id, **kwargs)  # noqa: E501
            return data

    def create_store_client_link_with_http_info(self, store_id, service_name, service_id, **kwargs):  # noqa: E501
        """create_store_client_link  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_store_client_link_with_http_info(store_id, service_name, service_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str store_id: an id of a store (required)
        :param str service_name: a name of a client service (required)
        :param str service_id: a service id of a resource that queries for its stores (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'service_name', 'service_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_store_client_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `create_store_client_link`")  # noqa: E501
        # verify the required parameter 'service_name' is set
        if ('service_name' not in params or
                params['service_name'] is None):
            raise ValueError("Missing the required parameter `service_name` when calling `create_store_client_link`")  # noqa: E501
        # verify the required parameter 'service_id' is set
        if ('service_id' not in params or
                params['service_id'] is None):
            raise ValueError("Missing the required parameter `service_id` when calling `create_store_client_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'service_name' in params:
            path_params['service_name'] = params['service_name']  # noqa: E501
        if 'service_id' in params:
            path_params['service_id'] = params['service_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/stores/{store_id}/service/{service_name}/id/{service_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_watch_rule(self, watch_rule_body, **kwargs):  # noqa: E501
        """create_watch_rule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_watch_rule(watch_rule_body, async=True)
        >>> result = thread.get()

        :param async bool
        :param WatchRule watch_rule_body: (required)
        :return: WatchRule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_watch_rule_with_http_info(watch_rule_body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_watch_rule_with_http_info(watch_rule_body, **kwargs)  # noqa: E501
            return data

    def create_watch_rule_with_http_info(self, watch_rule_body, **kwargs):  # noqa: E501
        """create_watch_rule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_watch_rule_with_http_info(watch_rule_body, async=True)
        >>> result = thread.get()

        :param async bool
        :param WatchRule watch_rule_body: (required)
        :return: WatchRule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['watch_rule_body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_watch_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'watch_rule_body' is set
        if ('watch_rule_body' not in params or
                params['watch_rule_body'] is None):
            raise ValueError("Missing the required parameter `watch_rule_body` when calling `create_watch_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'watch_rule_body' in params:
            body_params = params['watch_rule_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/watch_rules', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WatchRule',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_store(self, id, **kwargs):  # noqa: E501
        """delete_store  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_store(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: an id of a store (required)
        :return: Store
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_store_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_store_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_store_with_http_info(self, id, **kwargs):  # noqa: E501
        """delete_store  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_store_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: an id of a store (required)
        :return: Store
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/stores/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Store',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_store_client_link(self, store_id, service_name, service_id, **kwargs):  # noqa: E501
        """delete_store_client_link  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_store_client_link(store_id, service_name, service_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str store_id: an id of a store (required)
        :param str service_name: a name of a client service (required)
        :param str service_id: a service id of a resource that queries for its stores (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_store_client_link_with_http_info(store_id, service_name, service_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_store_client_link_with_http_info(store_id, service_name, service_id, **kwargs)  # noqa: E501
            return data

    def delete_store_client_link_with_http_info(self, store_id, service_name, service_id, **kwargs):  # noqa: E501
        """delete_store_client_link  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_store_client_link_with_http_info(store_id, service_name, service_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str store_id: an id of a store (required)
        :param str service_name: a name of a client service (required)
        :param str service_id: a service id of a resource that queries for its stores (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'service_name', 'service_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_store_client_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `delete_store_client_link`")  # noqa: E501
        # verify the required parameter 'service_name' is set
        if ('service_name' not in params or
                params['service_name'] is None):
            raise ValueError("Missing the required parameter `service_name` when calling `delete_store_client_link`")  # noqa: E501
        # verify the required parameter 'service_id' is set
        if ('service_id' not in params or
                params['service_id'] is None):
            raise ValueError("Missing the required parameter `service_id` when calling `delete_store_client_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'service_name' in params:
            path_params['service_name'] = params['service_name']  # noqa: E501
        if 'service_id' in params:
            path_params['service_id'] = params['service_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/stores/{store_id}/service/{service_name}/id/{service_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_watch_rule(self, id, **kwargs):  # noqa: E501
        """delete_watch_rule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_watch_rule(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: an id of a resource (required)
        :return: WatchRule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_watch_rule_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_watch_rule_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_watch_rule_with_http_info(self, id, **kwargs):  # noqa: E501
        """delete_watch_rule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_watch_rule_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: an id of a resource (required)
        :return: WatchRule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_watch_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_watch_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/watch_rules/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WatchRule',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_object_url(self, id, path, expires_in, **kwargs):  # noqa: E501
        """get_object_url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_object_url(id, path, expires_in, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: an id of a store (required)
        :param str path: an path to a file (required)
        :param str expires_in: expiration time in seconds (required)
        :return: ObjectURL
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_object_url_with_http_info(id, path, expires_in, **kwargs)  # noqa: E501
        else:
            (data) = self.get_object_url_with_http_info(id, path, expires_in, **kwargs)  # noqa: E501
            return data

    def get_object_url_with_http_info(self, id, path, expires_in, **kwargs):  # noqa: E501
        """get_object_url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_object_url_with_http_info(id, path, expires_in, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: an id of a store (required)
        :param str path: an path to a file (required)
        :param str expires_in: expiration time in seconds (required)
        :return: ObjectURL
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'path', 'expires_in']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_object_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_object_url`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_object_url`")  # noqa: E501
        # verify the required parameter 'expires_in' is set
        if ('expires_in' not in params or
                params['expires_in'] is None):
            raise ValueError("Missing the required parameter `expires_in` when calling `get_object_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'path' in params:
            query_params.append(('path', params['path']))  # noqa: E501
        if 'expires_in' in params:
            query_params.append(('expires_in', params['expires_in']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/stores/{id}/object_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ObjectURL',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_store(self, id, **kwargs):  # noqa: E501
        """get_store  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_store(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: an id of a store (required)
        :return: Store
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_store_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_store_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_store_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_store  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_store_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: an id of a store (required)
        :return: Store
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/stores/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Store',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_store_ids_for_client(self, service_name, service_id, **kwargs):  # noqa: E501
        """get_store_ids_for_client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_store_ids_for_client(service_name, service_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str service_name: a name of a client service (required)
        :param str service_id: a service id of a resource that queries for its stores (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_store_ids_for_client_with_http_info(service_name, service_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_store_ids_for_client_with_http_info(service_name, service_id, **kwargs)  # noqa: E501
            return data

    def get_store_ids_for_client_with_http_info(self, service_name, service_id, **kwargs):  # noqa: E501
        """get_store_ids_for_client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_store_ids_for_client_with_http_info(service_name, service_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str service_name: a name of a client service (required)
        :param str service_id: a service id of a resource that queries for its stores (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_name', 'service_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_store_ids_for_client" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_name' is set
        if ('service_name' not in params or
                params['service_name'] is None):
            raise ValueError("Missing the required parameter `service_name` when calling `get_store_ids_for_client`")  # noqa: E501
        # verify the required parameter 'service_id' is set
        if ('service_id' not in params or
                params['service_id'] is None):
            raise ValueError("Missing the required parameter `service_id` when calling `get_store_ids_for_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_name' in params:
            path_params['service_name'] = params['service_name']  # noqa: E501
        if 'service_id' in params:
            path_params['service_id'] = params['service_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/stores/service/{service_name}/id/{service_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_stores(self, **kwargs):  # noqa: E501
        """get_stores  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_stores(async=True)
        >>> result = thread.get()

        :param async bool
        :param str bucket_name: filter stores by bucket_name
        :param str provider: filter stores by storage provider
        :return: list[Store]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_stores_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_stores_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_stores_with_http_info(self, **kwargs):  # noqa: E501
        """get_stores  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_stores_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str bucket_name: filter stores by bucket_name
        :param str provider: filter stores by storage provider
        :return: list[Store]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bucket_name', 'provider']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_stores" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bucket_name' in params:
            query_params.append(('bucket_name', params['bucket_name']))  # noqa: E501
        if 'provider' in params:
            query_params.append(('provider', params['provider']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/stores', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Store]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_watch_rule(self, id, **kwargs):  # noqa: E501
        """get_watch_rule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_watch_rule(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: an id of a watch rule (required)
        :return: WatchRule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_watch_rule_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_watch_rule_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_watch_rule_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_watch_rule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_watch_rule_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: an id of a watch rule (required)
        :return: WatchRule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_watch_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_watch_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/watch_rules/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WatchRule',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_watch_rules(self, **kwargs):  # noqa: E501
        """get_watch_rules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_watch_rules(async=True)
        >>> result = thread.get()

        :param async bool
        :param str service_id: filter watch rules by service_id
        :param str store_id: filter watch rules by store_id
        :return: list[WatchRule]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_watch_rules_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_watch_rules_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_watch_rules_with_http_info(self, **kwargs):  # noqa: E501
        """get_watch_rules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_watch_rules_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str service_id: filter watch rules by service_id
        :param str store_id: filter watch rules by store_id
        :return: list[WatchRule]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_id', 'store_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_watch_rules" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'service_id' in params:
            query_params.append(('service_id', params['service_id']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/watch_rules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[WatchRule]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sync_watch_rule(self, id, **kwargs):  # noqa: E501
        """sync_watch_rule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sync_watch_rule(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: an id of a watch rule (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sync_watch_rule_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.sync_watch_rule_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def sync_watch_rule_with_http_info(self, id, **kwargs):  # noqa: E501
        """sync_watch_rule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sync_watch_rule_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: an id of a watch rule (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sync_watch_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `sync_watch_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/watch_rules/{id}/sync', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_store(self, id, store_body, **kwargs):  # noqa: E501
        """update_store  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_store(id, store_body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: an id of a store (required)
        :param StoreBody store_body: (required)
        :return: Store
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_store_with_http_info(id, store_body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_store_with_http_info(id, store_body, **kwargs)  # noqa: E501
            return data

    def update_store_with_http_info(self, id, store_body, **kwargs):  # noqa: E501
        """update_store  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_store_with_http_info(id, store_body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: an id of a store (required)
        :param StoreBody store_body: (required)
        :return: Store
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'store_body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_store`")  # noqa: E501
        # verify the required parameter 'store_body' is set
        if ('store_body' not in params or
                params['store_body'] is None):
            raise ValueError("Missing the required parameter `store_body` when calling `update_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'store_body' in params:
            body_params = params['store_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/stores/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Store',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_watch_rule(self, id, watch_rule_body, **kwargs):  # noqa: E501
        """update_watch_rule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_watch_rule(id, watch_rule_body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: an id of a watch rule (required)
        :param WatchRule watch_rule_body: (required)
        :return: WatchRule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_watch_rule_with_http_info(id, watch_rule_body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_watch_rule_with_http_info(id, watch_rule_body, **kwargs)  # noqa: E501
            return data

    def update_watch_rule_with_http_info(self, id, watch_rule_body, **kwargs):  # noqa: E501
        """update_watch_rule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_watch_rule_with_http_info(id, watch_rule_body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: an id of a watch rule (required)
        :param WatchRule watch_rule_body: (required)
        :return: WatchRule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'watch_rule_body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_watch_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_watch_rule`")  # noqa: E501
        # verify the required parameter 'watch_rule_body' is set
        if ('watch_rule_body' not in params or
                params['watch_rule_body'] is None):
            raise ValueError("Missing the required parameter `watch_rule_body` when calling `update_watch_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'watch_rule_body' in params:
            body_params = params['watch_rule_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/watch_rules/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WatchRule',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def validate_bucket(self, validate_bucket_body, **kwargs):  # noqa: E501
        """validate_bucket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.validate_bucket(validate_bucket_body, async=True)
        >>> result = thread.get()

        :param async bool
        :param ValidateBucketBody validate_bucket_body: (required)
        :return: ValidateBucketResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.validate_bucket_with_http_info(validate_bucket_body, **kwargs)  # noqa: E501
        else:
            (data) = self.validate_bucket_with_http_info(validate_bucket_body, **kwargs)  # noqa: E501
            return data

    def validate_bucket_with_http_info(self, validate_bucket_body, **kwargs):  # noqa: E501
        """validate_bucket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.validate_bucket_with_http_info(validate_bucket_body, async=True)
        >>> result = thread.get()

        :param async bool
        :param ValidateBucketBody validate_bucket_body: (required)
        :return: ValidateBucketResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['validate_bucket_body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_bucket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'validate_bucket_body' is set
        if ('validate_bucket_body' not in params or
                params['validate_bucket_body'] is None):
            raise ValueError("Missing the required parameter `validate_bucket_body` when calling `validate_bucket`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'validate_bucket_body' in params:
            body_params = params['validate_bucket_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/validate_bucket', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ValidateBucketResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
