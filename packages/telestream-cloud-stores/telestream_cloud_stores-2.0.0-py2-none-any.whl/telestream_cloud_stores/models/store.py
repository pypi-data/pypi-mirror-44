# coding: utf-8

"""
    API

    API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: you@your-company.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_stores.models.store_body_provider_specific_settings import StoreBodyProviderSpecificSettings  # noqa: F401,E501


class Store(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'provider': 'str',
        'account_id': 'str',
        'bucket_name': 'str',
        'input_store': 'bool',
        'watch_interval': 'int',
        'region': 'str',
        'private_access': 'bool',
        'access_key': 'str',
        'secret_key': 'str',
        'base_upload_url': 'str',
        'provider_specific_settings': 'StoreBodyProviderSpecificSettings'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'provider': 'provider',
        'account_id': 'account_id',
        'bucket_name': 'bucket_name',
        'input_store': 'input_store',
        'watch_interval': 'watch_interval',
        'region': 'region',
        'private_access': 'private_access',
        'access_key': 'access_key',
        'secret_key': 'secret_key',
        'base_upload_url': 'base_upload_url',
        'provider_specific_settings': 'provider_specific_settings'
    }

    def __init__(self, id=None, name=None, provider=None, account_id=None, bucket_name=None, input_store=None, watch_interval=None, region=None, private_access=None, access_key=None, secret_key=None, base_upload_url=None, provider_specific_settings=None):  # noqa: E501
        """Store - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._provider = None
        self._account_id = None
        self._bucket_name = None
        self._input_store = None
        self._watch_interval = None
        self._region = None
        self._private_access = None
        self._access_key = None
        self._secret_key = None
        self._base_upload_url = None
        self._provider_specific_settings = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if provider is not None:
            self.provider = provider
        if account_id is not None:
            self.account_id = account_id
        if bucket_name is not None:
            self.bucket_name = bucket_name
        if input_store is not None:
            self.input_store = input_store
        if watch_interval is not None:
            self.watch_interval = watch_interval
        if region is not None:
            self.region = region
        if private_access is not None:
            self.private_access = private_access
        if access_key is not None:
            self.access_key = access_key
        if secret_key is not None:
            self.secret_key = secret_key
        if base_upload_url is not None:
            self.base_upload_url = base_upload_url
        if provider_specific_settings is not None:
            self.provider_specific_settings = provider_specific_settings

    @property
    def id(self):
        """Gets the id of this Store.  # noqa: E501


        :return: The id of this Store.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Store.


        :param id: The id of this Store.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Store.  # noqa: E501


        :return: The name of this Store.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Store.


        :param name: The name of this Store.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def provider(self):
        """Gets the provider of this Store.  # noqa: E501


        :return: The provider of this Store.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Store.


        :param provider: The provider of this Store.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def account_id(self):
        """Gets the account_id of this Store.  # noqa: E501


        :return: The account_id of this Store.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Store.


        :param account_id: The account_id of this Store.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def bucket_name(self):
        """Gets the bucket_name of this Store.  # noqa: E501


        :return: The bucket_name of this Store.  # noqa: E501
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this Store.


        :param bucket_name: The bucket_name of this Store.  # noqa: E501
        :type: str
        """

        self._bucket_name = bucket_name

    @property
    def input_store(self):
        """Gets the input_store of this Store.  # noqa: E501


        :return: The input_store of this Store.  # noqa: E501
        :rtype: bool
        """
        return self._input_store

    @input_store.setter
    def input_store(self, input_store):
        """Sets the input_store of this Store.


        :param input_store: The input_store of this Store.  # noqa: E501
        :type: bool
        """

        self._input_store = input_store

    @property
    def watch_interval(self):
        """Gets the watch_interval of this Store.  # noqa: E501


        :return: The watch_interval of this Store.  # noqa: E501
        :rtype: int
        """
        return self._watch_interval

    @watch_interval.setter
    def watch_interval(self, watch_interval):
        """Sets the watch_interval of this Store.


        :param watch_interval: The watch_interval of this Store.  # noqa: E501
        :type: int
        """

        self._watch_interval = watch_interval

    @property
    def region(self):
        """Gets the region of this Store.  # noqa: E501


        :return: The region of this Store.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Store.


        :param region: The region of this Store.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def private_access(self):
        """Gets the private_access of this Store.  # noqa: E501


        :return: The private_access of this Store.  # noqa: E501
        :rtype: bool
        """
        return self._private_access

    @private_access.setter
    def private_access(self, private_access):
        """Sets the private_access of this Store.


        :param private_access: The private_access of this Store.  # noqa: E501
        :type: bool
        """

        self._private_access = private_access

    @property
    def access_key(self):
        """Gets the access_key of this Store.  # noqa: E501


        :return: The access_key of this Store.  # noqa: E501
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this Store.


        :param access_key: The access_key of this Store.  # noqa: E501
        :type: str
        """

        self._access_key = access_key

    @property
    def secret_key(self):
        """Gets the secret_key of this Store.  # noqa: E501


        :return: The secret_key of this Store.  # noqa: E501
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this Store.


        :param secret_key: The secret_key of this Store.  # noqa: E501
        :type: str
        """

        self._secret_key = secret_key

    @property
    def base_upload_url(self):
        """Gets the base_upload_url of this Store.  # noqa: E501


        :return: The base_upload_url of this Store.  # noqa: E501
        :rtype: str
        """
        return self._base_upload_url

    @base_upload_url.setter
    def base_upload_url(self, base_upload_url):
        """Sets the base_upload_url of this Store.


        :param base_upload_url: The base_upload_url of this Store.  # noqa: E501
        :type: str
        """

        self._base_upload_url = base_upload_url

    @property
    def provider_specific_settings(self):
        """Gets the provider_specific_settings of this Store.  # noqa: E501


        :return: The provider_specific_settings of this Store.  # noqa: E501
        :rtype: StoreBodyProviderSpecificSettings
        """
        return self._provider_specific_settings

    @provider_specific_settings.setter
    def provider_specific_settings(self, provider_specific_settings):
        """Sets the provider_specific_settings of this Store.


        :param provider_specific_settings: The provider_specific_settings of this Store.  # noqa: E501
        :type: StoreBodyProviderSpecificSettings
        """

        self._provider_specific_settings = provider_specific_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Store):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
