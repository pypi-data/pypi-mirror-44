# coding: utf-8

"""
    API

    API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: you@your-company.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StoreBodyProviderSpecificSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host': 'str',
        'port': 'str',
        'cache_control': 'str',
        'metadata': 'str',
        'fasp_port': 'str',
        'ssh_port': 'str',
        'max_rate': 'str',
        'min_rate': 'str',
        'policy': 'str'
    }

    attribute_map = {
        'host': 'host',
        'port': 'port',
        'cache_control': 'cache_control',
        'metadata': 'metadata',
        'fasp_port': 'fasp_port',
        'ssh_port': 'ssh_port',
        'max_rate': 'max_rate',
        'min_rate': 'min_rate',
        'policy': 'policy'
    }

    def __init__(self, host=None, port=None, cache_control=None, metadata=None, fasp_port=None, ssh_port=None, max_rate=None, min_rate=None, policy=None):  # noqa: E501
        """StoreBodyProviderSpecificSettings - a model defined in Swagger"""  # noqa: E501

        self._host = None
        self._port = None
        self._cache_control = None
        self._metadata = None
        self._fasp_port = None
        self._ssh_port = None
        self._max_rate = None
        self._min_rate = None
        self._policy = None
        self.discriminator = None

        if host is not None:
            self.host = host
        if port is not None:
            self.port = port
        if cache_control is not None:
            self.cache_control = cache_control
        if metadata is not None:
            self.metadata = metadata
        if fasp_port is not None:
            self.fasp_port = fasp_port
        if ssh_port is not None:
            self.ssh_port = ssh_port
        if max_rate is not None:
            self.max_rate = max_rate
        if min_rate is not None:
            self.min_rate = min_rate
        if policy is not None:
            self.policy = policy

    @property
    def host(self):
        """Gets the host of this StoreBodyProviderSpecificSettings.  # noqa: E501


        :return: The host of this StoreBodyProviderSpecificSettings.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this StoreBodyProviderSpecificSettings.


        :param host: The host of this StoreBodyProviderSpecificSettings.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def port(self):
        """Gets the port of this StoreBodyProviderSpecificSettings.  # noqa: E501


        :return: The port of this StoreBodyProviderSpecificSettings.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this StoreBodyProviderSpecificSettings.


        :param port: The port of this StoreBodyProviderSpecificSettings.  # noqa: E501
        :type: str
        """

        self._port = port

    @property
    def cache_control(self):
        """Gets the cache_control of this StoreBodyProviderSpecificSettings.  # noqa: E501


        :return: The cache_control of this StoreBodyProviderSpecificSettings.  # noqa: E501
        :rtype: str
        """
        return self._cache_control

    @cache_control.setter
    def cache_control(self, cache_control):
        """Sets the cache_control of this StoreBodyProviderSpecificSettings.


        :param cache_control: The cache_control of this StoreBodyProviderSpecificSettings.  # noqa: E501
        :type: str
        """

        self._cache_control = cache_control

    @property
    def metadata(self):
        """Gets the metadata of this StoreBodyProviderSpecificSettings.  # noqa: E501


        :return: The metadata of this StoreBodyProviderSpecificSettings.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this StoreBodyProviderSpecificSettings.


        :param metadata: The metadata of this StoreBodyProviderSpecificSettings.  # noqa: E501
        :type: str
        """

        self._metadata = metadata

    @property
    def fasp_port(self):
        """Gets the fasp_port of this StoreBodyProviderSpecificSettings.  # noqa: E501


        :return: The fasp_port of this StoreBodyProviderSpecificSettings.  # noqa: E501
        :rtype: str
        """
        return self._fasp_port

    @fasp_port.setter
    def fasp_port(self, fasp_port):
        """Sets the fasp_port of this StoreBodyProviderSpecificSettings.


        :param fasp_port: The fasp_port of this StoreBodyProviderSpecificSettings.  # noqa: E501
        :type: str
        """

        self._fasp_port = fasp_port

    @property
    def ssh_port(self):
        """Gets the ssh_port of this StoreBodyProviderSpecificSettings.  # noqa: E501


        :return: The ssh_port of this StoreBodyProviderSpecificSettings.  # noqa: E501
        :rtype: str
        """
        return self._ssh_port

    @ssh_port.setter
    def ssh_port(self, ssh_port):
        """Sets the ssh_port of this StoreBodyProviderSpecificSettings.


        :param ssh_port: The ssh_port of this StoreBodyProviderSpecificSettings.  # noqa: E501
        :type: str
        """

        self._ssh_port = ssh_port

    @property
    def max_rate(self):
        """Gets the max_rate of this StoreBodyProviderSpecificSettings.  # noqa: E501


        :return: The max_rate of this StoreBodyProviderSpecificSettings.  # noqa: E501
        :rtype: str
        """
        return self._max_rate

    @max_rate.setter
    def max_rate(self, max_rate):
        """Sets the max_rate of this StoreBodyProviderSpecificSettings.


        :param max_rate: The max_rate of this StoreBodyProviderSpecificSettings.  # noqa: E501
        :type: str
        """

        self._max_rate = max_rate

    @property
    def min_rate(self):
        """Gets the min_rate of this StoreBodyProviderSpecificSettings.  # noqa: E501


        :return: The min_rate of this StoreBodyProviderSpecificSettings.  # noqa: E501
        :rtype: str
        """
        return self._min_rate

    @min_rate.setter
    def min_rate(self, min_rate):
        """Sets the min_rate of this StoreBodyProviderSpecificSettings.


        :param min_rate: The min_rate of this StoreBodyProviderSpecificSettings.  # noqa: E501
        :type: str
        """

        self._min_rate = min_rate

    @property
    def policy(self):
        """Gets the policy of this StoreBodyProviderSpecificSettings.  # noqa: E501


        :return: The policy of this StoreBodyProviderSpecificSettings.  # noqa: E501
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this StoreBodyProviderSpecificSettings.


        :param policy: The policy of this StoreBodyProviderSpecificSettings.  # noqa: E501
        :type: str
        """

        self._policy = policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoreBodyProviderSpecificSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
