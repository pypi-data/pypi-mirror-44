# coding: utf-8

"""
    API

    API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: you@your-company.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WatchRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'store_id': 'str',
        'service_id': 'str',
        'service_name': 'str',
        'filters': 'object',
        'sync_scheduled_at': 'datetime',
        'synced': 'bool',
        'enabled': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'store_id': 'store_id',
        'service_id': 'service_id',
        'service_name': 'service_name',
        'filters': 'filters',
        'sync_scheduled_at': 'sync_scheduled_at',
        'synced': 'synced',
        'enabled': 'enabled'
    }

    def __init__(self, id=None, store_id=None, service_id=None, service_name=None, filters=None, sync_scheduled_at=None, synced=None, enabled=None):  # noqa: E501
        """WatchRule - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._store_id = None
        self._service_id = None
        self._service_name = None
        self._filters = None
        self._sync_scheduled_at = None
        self._synced = None
        self._enabled = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if store_id is not None:
            self.store_id = store_id
        if service_id is not None:
            self.service_id = service_id
        if service_name is not None:
            self.service_name = service_name
        if filters is not None:
            self.filters = filters
        if sync_scheduled_at is not None:
            self.sync_scheduled_at = sync_scheduled_at
        if synced is not None:
            self.synced = synced
        if enabled is not None:
            self.enabled = enabled

    @property
    def id(self):
        """Gets the id of this WatchRule.  # noqa: E501


        :return: The id of this WatchRule.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WatchRule.


        :param id: The id of this WatchRule.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def store_id(self):
        """Gets the store_id of this WatchRule.  # noqa: E501


        :return: The store_id of this WatchRule.  # noqa: E501
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this WatchRule.


        :param store_id: The store_id of this WatchRule.  # noqa: E501
        :type: str
        """

        self._store_id = store_id

    @property
    def service_id(self):
        """Gets the service_id of this WatchRule.  # noqa: E501


        :return: The service_id of this WatchRule.  # noqa: E501
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this WatchRule.


        :param service_id: The service_id of this WatchRule.  # noqa: E501
        :type: str
        """

        self._service_id = service_id

    @property
    def service_name(self):
        """Gets the service_name of this WatchRule.  # noqa: E501


        :return: The service_name of this WatchRule.  # noqa: E501
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this WatchRule.


        :param service_name: The service_name of this WatchRule.  # noqa: E501
        :type: str
        """

        self._service_name = service_name

    @property
    def filters(self):
        """Gets the filters of this WatchRule.  # noqa: E501


        :return: The filters of this WatchRule.  # noqa: E501
        :rtype: object
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this WatchRule.


        :param filters: The filters of this WatchRule.  # noqa: E501
        :type: object
        """

        self._filters = filters

    @property
    def sync_scheduled_at(self):
        """Gets the sync_scheduled_at of this WatchRule.  # noqa: E501


        :return: The sync_scheduled_at of this WatchRule.  # noqa: E501
        :rtype: datetime
        """
        return self._sync_scheduled_at

    @sync_scheduled_at.setter
    def sync_scheduled_at(self, sync_scheduled_at):
        """Sets the sync_scheduled_at of this WatchRule.


        :param sync_scheduled_at: The sync_scheduled_at of this WatchRule.  # noqa: E501
        :type: datetime
        """

        self._sync_scheduled_at = sync_scheduled_at

    @property
    def synced(self):
        """Gets the synced of this WatchRule.  # noqa: E501


        :return: The synced of this WatchRule.  # noqa: E501
        :rtype: bool
        """
        return self._synced

    @synced.setter
    def synced(self, synced):
        """Sets the synced of this WatchRule.


        :param synced: The synced of this WatchRule.  # noqa: E501
        :type: bool
        """

        self._synced = synced

    @property
    def enabled(self):
        """Gets the enabled of this WatchRule.  # noqa: E501


        :return: The enabled of this WatchRule.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this WatchRule.


        :param enabled: The enabled of this WatchRule.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WatchRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
