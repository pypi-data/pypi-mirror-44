"""

"""
import sys
import os
import inspect
import pkg_resources
import tempfile
from navipy.scripts import parser_logger, args_to_logparam
# Following need to be imported in blender as well
from navipy.sensors.renderer import BlenderRender
from navipy.trajectories import Trajectory
from navipy import logger


importwithinblender = [
    'from navipy.sensors.renderer import BlenderRender',
    'from navipy.trajectories import Trajectory',
    'from navipy import logger']


def parser_blend_alongtraj():
    # Create command line options
    parser = parser_logger()
    arghelp = 'Path to the environment (.blend) in which your agent lives'
    defaultworld = pkg_resources.resource_filename(
        'navipy', 'resources/sample_experiment/Ravi_2018/corridor.blend')
    defaulttraj = pkg_resources.resource_filename(
        'navipy', 'resources/sample_experiment/Ravi_2018/corridor_traj.csv')
    defaultconfig = pkg_resources.resource_filename(
        'navipy', 'resources/configs/BlenderRender.yaml')
    defaultoutput = tempfile.NamedTemporaryFile().name
    parser.add_argument('--blender-world',
                        type=str,
                        default=defaultworld,
                        help=arghelp)
    arghelp = 'Outputfile to store the rendered database'
    parser.add_argument('--output-file',
                        type=str,
                        default=defaultoutput,
                        help=arghelp)
    arghelp = 'Configuration file'
    parser.add_argument('--config-file',
                        type=str,
                        default=defaultconfig,
                        help=arghelp)
    arghelp = 'File containing the trajectory'
    parser.add_argument('--trajectory',
                        type=str,
                        default=defaulttraj,
                        help=arghelp)
    arghelp = 'Command to run blender\n'
    arghelp += 'If not provided, the script will try to find the command'
    arghelp += " by using: shutil.which('blender')"
    parser.add_argument('--blender-command',
                        type=str,
                        default=None,
                        help=arghelp)
    arghelp = 'To ignore the autocheck of python version'
    arghelp += 'and blender'
    parser.add_argument('--ignorepycheck',
                        default=0,
                        help=arghelp,
                        action='count')
    return parser


def run(config_file, outputfile,
        trajfile, level, logfile):
    logger(level, logfile)
    renderer = BlenderRender()
    renderer.config_file = config_file
    # Load trajectory
    trajectory = Trajectory().read_csv(trajfile)
    renderer.render_trajectory(outputfile, trajectory)


def main():
    # encoding for temporary file
    encoding = 'utf-8'

    # Fetch arguments
    args = parser_blend_alongtraj().parse_args()
    loglevel, logfile = args_to_logparam(args)
    # Some output
    # Create tempfile with testing code and then call blendnavipy
    header = '# Generated by {}\n'.format(sys.argv[0])
    with tempfile.NamedTemporaryFile() as tfile:
        # Start of file
        tfile.write(header.encode(encoding))
        for line in importwithinblender:
            tfile.write(line.encode(encoding))
            tfile.write('\n'.encode(encoding))
        for line in inspect.getsourcelines(run)[0]:
            tfile.write(line.encode(encoding))
        tfile.write('\n\n'.encode(encoding))
        tfile.write('try:\n'.encode(encoding))
        tfile.write('     run("{}","{}","{}",{},"{}")\n'.format(
            args.config_file,
            args.output_file,
            args.trajectory,
            loglevel,
            logfile).encode(encoding))
        tfile.write('     sys.exit(0)\n'.encode(encoding))
        tfile.write('except Exception:\n'.encode(encoding))
        tfile.write('     sys.exit(1)\n'.encode(encoding))
        tfile.seek(0)
        if args.ignorepycheck == 0:
            ignorepyversion = ''
        else:
            ignorepyversion = '--ignorepycheck '

        command = 'blendnavipy --background {}'.format(ignorepyversion)
        command += '--blender-world {} --python-script {}'
        command = command.format(args.blender_world, tfile.name)
        if args.blender_command is not None:
            command += ' --blender-command {}'.format(args.blender_command)
        for _ in range(args.verbose):
            command += ' -v'
        print(command)
        os.system(command)


if __name__ == "__main__":
    # execute only if run as a script
    main()
