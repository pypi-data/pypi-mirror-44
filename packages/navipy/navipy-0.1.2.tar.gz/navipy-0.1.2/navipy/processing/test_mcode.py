import unittest
import numpy as np
from navipy.processing import mcode
# import matplotlib.pyplot as plt


class TestCase(unittest.TestCase):
    def setUp(self):
        self.inM = mcode.Module(size=(1, 1))
        self.tau = 0.025
        self.lp = mcode.lp(self.tau, self.inM)
        self.hp = mcode.hp(self.tau, self.inM)
        self.hp2 = mcode.hp(self.tau, self.hp)

    def test_step(self):
        """
        checks the response of the low and high pass filter to a step input
        for low pass it should be h(t)=1-e^(-t/tau)
        for high pass it should be h(t)=e^(-t/tau)
        """
        res_low = [[0.], [0.], [0.], [0.], [0.], [0.], [0.], [0.], [0.],
                   [0.], [0.], [0.], [0.], [0.], [0.], [0.], [0.], [0.],
                   [0.], [0.], [0.], [0.], [0.], [0.], [0.], [0.], [0.],
                   [0.], [0.], [0.], [0.], [0.], [0.], [0.], [0.], [0.],
                   [0.], [0.], [0.], [0.], [0.], [0.], [0.], [0.], [0.],
                   [0.], [0.], [0.], [0.], [0.], [0.], [0.], [0.], [0.],
                   [0.], [0.], [0.], [0.], [0.], [0.], [0.], [0.], [0.],
                   [0.], [0.], [0.], [0.], [0.], [0.], [0.], [0.], [0.],
                   [0.], [0.], [0.], [0.], [0.], [0.], [0.], [0.], [0.],
                   [0.], [0.], [0.], [0.], [0.], [0.], [0.], [0.], [0.],
                   [0.], [0.], [0.], [0.], [0.], [0.], [0.], [0.], [0.],
                   [0.], [0.025], [0.049375], [0.07314063], [0.09631211],
                   [0.11890431], [0.1409317], [0.16240841], [0.1833482],
                   [0.20376449], [0.22367038], [0.24307862], [0.26200165],
                   [0.28045161], [0.29844032], [0.31597931], [0.33307983],
                   [0.34975284], [0.36600901], [0.38185879], [0.39731232],
                   [0.41237951], [0.42707002], [0.44139327], [0.45535844],
                   [0.46897448], [0.48225012], [0.49519387], [0.50781402],
                   [0.52011867], [0.5321157], [0.54381281], [0.55521749],
                   [0.56633705], [0.57717863], [0.58774916], [0.59805543],
                   [0.60810405], [0.61790144], [0.62745391], [0.63676756],
                   [0.64584837], [0.65470216], [0.66333461], [0.67175124],
                   [0.67995746], [0.68795852], [0.69575956], [0.70336557],
                   [0.71078143], [0.7180119], [0.7250616], [0.73193506],
                   [0.73863668], [0.74517077], [0.7515415], [0.75775296],
                   [0.76380914], [0.76971391], [0.77547106], [0.78108428],
                   [0.78655718], [0.79189325], [0.79709592], [0.80216852],
                   [0.8071143], [0.81193645], [0.81663804], [0.82122209],
                   [0.82569153], [0.83004924], [0.83429801], [0.83844056],
                   [0.84247955], [0.84641756], [0.85025712], [0.85400069],
                   [0.85765068], [0.86120941], [0.86467917], [0.86806219],
                   [0.87136064], [0.87457662], [0.87771221], [0.8807694],
                   [0.88375017], [0.88665641], [0.88949], [0.89225275],
                   [0.89494643], [0.89757277], [0.90013345], [0.90263012],
                   [0.90506436], [0.90743776], [0.90975181], [0.91200802],
                   [0.91420782], [0.91635262], [0.91844381], [0.92048271],
                   [0.92247064], [0.92440888], [0.92629865], [0.92814119],
                   [0.92993766], [0.93168922], [0.93339699], [0.93506206],
                   [0.93668551], [0.93826837], [0.93981166], [0.94131637],
                   [0.94278346], [0.94421388], [0.94560853], [0.94696832],
                   [0.94829411], [0.94958676], [0.95084709], [0.95207591],
                   [0.95327401], [0.95444216], [0.95558111], [0.95669158],
                   [0.95777429], [0.95882993], [0.95985918], [0.9608627],
                   [0.96184114], [0.96279511], [0.96372523], [0.9646321],
                   [0.9655163], [0.96637839], [0.96721893], [0.96803846],
                   [0.9688375], [0.96961656], [0.97037614], [0.97111674],
                   [0.97183882], [0.97254285], [0.97322928], [0.97389855],
                   [0.97455108], [0.97518731], [0.97580762], [0.97641243],
                   [0.97700212], [0.97757707], [0.97813764], [0.9786842],
                   [0.9792171], [0.97973667], [0.98024325], [0.98073717],
                   [0.98121874], [0.98168827], [0.98214607], [0.98259242],
                   [0.98302761], [0.98345191], [0.98386562], [0.98426898],
                   [0.98466225], [0.9850457], [0.98541955], [0.98578406],
                   [0.98613946], [0.98648598], [0.98682383], [0.98715323],
                   [0.9874744], [0.98778754], [0.98809285], [0.98839053],
                   [0.98868077], [0.98896375], [0.98923965], [0.98950866],
                   [0.98977095], [0.99002667], [0.99027601], [0.99051911],
                   [0.99075613], [0.99098723], [0.99121254], [0.99143223],
                   [0.99164643], [0.99185526], [0.99205888], [0.99225741],
                   [0.99245098], [0.9926397], [0.99282371], [0.99300312],
                   [0.99317804], [0.99334859], [0.99351487], [0.993677]]
        res_low = np.array(res_low)
        res_high = [[0.0, 0.0, 0.0, 0.0,
                     0.0, 0.0, 0.0, 0.0,
                     0.0, 0.0, 0.0, 0.0,
                     0.0, 0.0, 0.0, 0.0,
                     0.0, 0.0, 0.0, 0.0,
                     0.0, 0.0, 0.0, 0.0,
                     0.0, 0.0, 0.0, 0.0,
                     0.0, 0.0, 0.0, 0.0,
                     0.0, 0.0, 0.0, 0.0,
                     0.0, 0.0, 0.0, 0.0,
                     0.0, 0.0, 0.0, 0.0,
                     0.0, 0.0, 0.0, 0.0,
                     0.0, 0.0, 0.0, 0.0,
                     0.0, 0.0, 0.0, 0.0,
                     0.0, 0.0, 0.0, 0.0,
                     0.0, 0.0, 0.0, 0.0,
                     0.0, 0.0, 0.0, 0.0,
                     0.0, 0.0, 0.0, 0.0,
                     0.0, 0.0, 0.0, 0.0,
                     0.0, 0.0, 0.0, 0.0,
                     0.0, 0.0, 0.0, 0.0,
                     0.0, 0.0, 0.0, 0.0,
                     0.0, 0.0, 0.0, 0.0,
                     0.0, 0.0, 0.0, 0.0,
                     0.0, 0.0, 0.0, 0.0,
                     9.75000000e-01, 9.26859375e-01, 8.81095693e-01,
                     8.37591593e-01,
                     7.96235509e-01, 7.56921380e-01, 7.19548387e-01,
                     6.84020686e-01,
                     6.50247164e-01, 6.18141210e-01, 5.87620488e-01,
                     5.58606727e-01,
                     5.31025519e-01, 5.04806134e-01, 4.79881332e-01,
                     4.56187191e-01,
                     4.33662948e-01, 4.12250840e-01, 3.91895955e-01,
                     3.72546092e-01,
                     3.54151629e-01, 3.36665392e-01, 3.20042538e-01,
                     3.04240438e-01,
                     2.89218567e-01, 2.74938400e-01, 2.61363316e-01,
                     2.48458503e-01,
                     2.36190864e-01, 2.24528940e-01, 2.13442824e-01,
                     2.02904084e-01,
                     1.92885695e-01, 1.83361964e-01, 1.74308467e-01,
                     1.65701986e-01,
                     1.57520451e-01, 1.49742879e-01, 1.42349324e-01,
                     1.35320826e-01,
                     1.28639360e-01, 1.22287792e-01, 1.16249832e-01,
                     1.10509997e-01,
                     1.05053566e-01, 9.98665458e-02, 9.49356351e-02,
                     9.02481881e-02,
                     8.57921838e-02, 8.15561947e-02, 7.75293576e-02,
                     7.37013456e-02,
                     7.00623416e-02, 6.66030135e-02, 6.33144897e-02,
                     6.01883368e-02,
                     5.72165377e-02, 5.43914711e-02, 5.17058922e-02,
                     4.91529138e-02,
                     4.67259887e-02, 4.44188930e-02, 4.22257102e-02,
                     4.01408157e-02,
                     3.81588629e-02, 3.62747691e-02, 3.44837024e-02,
                     3.27810696e-02,
                     3.11625042e-02, 2.96238556e-02, 2.81611777e-02,
                     2.67707196e-02,
                     2.54489153e-02, 2.41923751e-02, 2.29978766e-02,
                     2.18623564e-02,
                     2.07829026e-02, 1.97567468e-02, 1.87812574e-02,
                     1.78539328e-02,
                     1.69723949e-02, 1.61343829e-02, 1.53377477e-02,
                     1.45804464e-02,
                     1.38605369e-02, 1.31761729e-02, 1.25255993e-02,
                     1.19071479e-02,
                     1.13192325e-02, 1.07603453e-02, 1.02290533e-02,
                     9.72399379e-03,
                     9.24387160e-03, 8.78745544e-03, 8.35357482e-03,
                     7.94111707e-03,
                     7.54902441e-03, 7.17629133e-03, 6.82196195e-03,
                     6.48512758e-03,
                     6.16492440e-03, 5.86053126e-03, 5.57116753e-03,
                     5.29609113e-03,
                     5.03459663e-03, 4.78601342e-03, 4.54970401e-03,
                     4.32506238e-03,
                     4.11151242e-03, 3.90850649e-03, 3.71552399e-03,
                     3.53206999e-03,
                     3.35767403e-03, 3.19188888e-03, 3.03428937e-03,
                     2.88447133e-03,
                     2.74205056e-03, 2.60666181e-03, 2.47795788e-03,
                     2.35560871e-03,
                     2.23930053e-03, 2.12873507e-03, 2.02362877e-03,
                     1.92371210e-03,
                     1.82872882e-03, 1.73843533e-03, 1.65260009e-03,
                     1.57100296e-03,
                     1.49343469e-03, 1.41969635e-03, 1.34959884e-03,
                     1.28296240e-03,
                     1.21961613e-03, 1.15939759e-03, 1.10215233e-03,
                     1.04773356e-03,
                     9.96001714e-04, 9.46824129e-04, 9.00074688e-04,
                     8.55633500e-04,
                     8.13386596e-04, 7.73225633e-04, 7.35047617e-04,
                     6.98754641e-04,
                     6.64253631e-04, 6.31456108e-04, 6.00277962e-04,
                     5.70639238e-04,
                     5.42463926e-04, 5.15679769e-04, 4.90218081e-04,
                     4.66013563e-04,
                     4.43004143e-04, 4.21130814e-04, 4.00337480e-04,
                     3.80570817e-04,
                     3.61780133e-04, 3.43917239e-04, 3.26936325e-04,
                     3.10793844e-04,
                     2.95448398e-04, 2.80860633e-04, 2.66993139e-04,
                     2.53810353e-04,
                     2.41278467e-04, 2.29365343e-04, 2.18040429e-04,
                     2.07274683e-04,
                     1.97040495e-04, 1.87311621e-04, 1.78063110e-04,
                     1.69271243e-04,
                     1.60913476e-04, 1.52968373e-04, 1.45415560e-04,
                     1.38235666e-04,
                     1.31410280e-04, 1.24921898e-04, 1.18753879e-04,
                     1.12890406e-04,
                     1.07316442e-04, 1.02017693e-04, 9.69805695e-05,
                     9.21921539e-05,
                     8.76401663e-05, 8.33129330e-05, 7.91993570e-05,
                     7.52888887e-05,
                     7.15714998e-05, 6.80376570e-05, 6.46782977e-05,
                     6.14848068e-05,
                     5.84489944e-05, 5.55630753e-05, 5.28196485e-05,
                     5.02116784e-05,
                     4.77324767e-05, 4.53756857e-05, 4.31352612e-05,
                     4.10054577e-05]]
        res_high = np.array(np.transpose(res_high))
        res_high2 = [[0., 0., 0., 0., 0., 0., 0.,
                      0., 0., 0., 0., 0., 0., 0.,
                      0., 0., 0., 0., 0., 0., 0.,
                      0., 0., 0., 0., 0., 0., 0.,
                      0., 0., 0., 0., 0., 0., 0.,
                      0., 0., 0., 0., 0., 0., 0.,
                      0., 0., 0., 0., 0., 0., 0.,
                      0., 0., 0., 0., 0., 0., 0.,
                      0., 0., 0., 0., 0., 0., 0.,
                      0., 0., 0., 0., 0., 0., 0.,
                      0., 0., 0., 0., 0., 0., 0.,
                      0., 0., 0., 0., 0., 0., 0.,
                      0., 0., 0., 0., 0., 0., 0.,
                      0., 0., 0., 0., 0., 0., 0.,
                      0., 0., 0.92685938, 0.85792421, 0.792972, 0.73179162,
                      0.6741827, 0.61995514, 0.56892856, 0.52093182,
                      0.47580257, 0.43338679,
                      0.39353836, 0.35611869, 0.32099634, 0.28804663,
                      0.25715132, 0.2281983,
                      0.20108123, 0.17569931, 0.15195697, 0.12976358,
                      0.10903325, 0.08968457,
                      0.07164035, 0.05482747, 0.03917662, 0.02462212,
                      0.01110175, -0.00144343,
                      -0.01306927, -0.02382865, -0.03377167, -0.04294577,
                      -0.05139586, -0.05916446,
                      -0.06629183, -0.07281607, -0.07877324, -0.08419746,
                      -0.08912102, -0.09357446,
                      -0.09758667, -0.10118496, -0.10439517, -0.10724173,
                      -0.1097477, -0.11193492,
                      -0.11382399, -0.1154344, -0.11678453, -0.11789175,
                      -0.11877247, -0.11944216,
                      -0.11991544, -0.12020607, -0.12032708, -0.1202907,
                      -0.1201085, -0.11979136,
                      -0.11934956, -0.11879274, -0.11813002, -0.11736995,
                      -0.1165206, -0.11558954,
                      -0.11458389, -0.11351036, -0.11237524, -0.11118442,
                      -0.10994346, -0.10865755,
                      -0.10733157, -0.10597008, -0.10457737, -0.10315744,
                      -0.10171402, -0.10025062,
                      -0.09877051, -0.09727674, -0.09577215, -0.09425938,
                      -0.09274091, -0.09121902,
                      -0.08969585, -0.08817336, -0.08665339, -0.08513763,
                      -0.08362764, -0.08212486,
                      -0.08063063, -0.07914616, -0.07767256, -0.07621087,
                      -0.07476201, -0.07332684,
                      -0.07190613, -0.07050057, -0.06911079, -0.06773735,
                      -0.06638075, -0.06504143,
                      -0.06371979, -0.06241616, -0.06113083, -0.05986406,
                      -0.05861604, -0.05738695,
                      -0.05617691, -0.05498604, -0.0538144, -0.05266202,
                      -0.05152892, -0.0504151,
                      -0.0493205, -0.04824509, -0.04718878, -0.04615148,
                      -0.04513308, -0.04413346,
                      -0.04315247, -0.04218997, -0.04124579, -0.04031975,
                      -0.03941167, -0.03852136,
                      -0.03764862, -0.03679324, -0.03595501, -0.0351337,
                      -0.0343291, -0.03354097,
                      -0.03276908, -0.0320132, -0.03127309, -0.0305485,
                      -0.02983921, -0.02914496,
                      -0.02846552, -0.02780063, -0.02715005, -0.02651355,
                      -0.02589087, -0.02528178,
                      -0.02468603, -0.02410338, -0.02353359, -0.02297643,
                      -0.02243166, -0.02189904,
                      -0.02137835, -0.02086935, -0.02037182, -0.01988554,
                      -0.01941027, -0.01894581,
                      -0.01849193, -0.01804842, -0.01761507, -0.01719168,
                      -0.01677803, -0.01637392,
                      -0.01597916, -0.01559355, -0.01521689, -0.014849,
                      -0.01448969, -0.01413877,
                      -0.01379607, -0.0134614, -0.0131346, -0.01281548,
                      -0.01250389, -0.01219965,
                      -0.0119026, -0.01161259, -0.01132945, -0.01105304,
                      -0.0107832, -0.01051979,
                      -0.01026266, -0.01001167, -0.00976668, -0.00952755,
                      -0.00929415, -0.00906634,
                      -0.00884401, -0.00862703, -0.00841526, -0.0082086,
                      -0.00800692, -0.0078101,
                      -0.00761804, -0.00743063, -0.00724775, -0.0070693,
                      -0.00689517, -0.00672527,
                      -0.0065595, -0.00639775, -0.00623994, -0.00608596]]
        res_high2 = np.array(np.transpose(res_high2))

        hlow = np.zeros((300, 1))
        aclow = np.zeros((300, 1))
        achigh = np.zeros((300, 1))
        achigh2 = np.zeros((300, 1))
        hhigh = np.zeros((300, 1))
        step = np.zeros((300))
        step[100::] = 1
        for i in range(300):
            self.inM.Input[0, 0] = step[i]
            self.lp.update()
            aclow[i] = self.lp.Input[0, 0]
            # plt.scatter(i, self.lp.Input[0, 0], c='r')
            self.hp.update()
            achigh[i] = self.hp.Input[0, 0]
            # plt.scatter(i, self.hp.Input[0, 0], c='b')
            self.hp2.update()
            achigh2[i] = self.hp2.Input[0, 0]
            # plt.scatter(i, self.hp2.Input[0, 0], c='g')
            hlow[i] = 1 - np.exp(-(i / 1600) / self.tau)
            hhigh[i] = np.exp(-(i / 800) / self.tau)
        # plt.plot(range(300), step)
        # plt.plot(self.lp.Input[0:300,0])#hlow[0:200], c='r')
        # plt.plot(range(100, 300), hhigh[0:200], c='b')
        # plt.plot(aclow[100:300], c = 'r')
        # plt.plot(hlow, c = 'b')
        # plt.show()
        # assert np.all(np.isclose(res_low[100:300, 0], hlow[0:200]))
        # assert np.all(np.isclose(res_high[100:300, 0], hhigh[0:200]))

        assert np.all(np.isclose(res_low, aclow))
        assert np.all(np.isclose(res_high, achigh))
        assert np.all(np.isclose(res_high2, achigh2))

    def test_pulse(self):
        """
        checks the response of the low and high pass filter to a pulse input
        for low pass it should be h(t)=(1/tau)e^(-t/tau)
        for high pass it should be h(t)=inputsignal(t)-(1/tau)*e^(-t/tau)
        """
        res_low = [[0., 0., 0., 0., 0., 0., 0.,
                    0., 0., 0., 0., 0., 0., 0.,
                    0., 0., 0., 0., 0., 0., 0.,
                    0., 0., 0., 0., 0., 0., 0.,
                    0., 0., 0.025, 0.049375, 0.07314063, 0.09631211,
                    0.11890431, 0.1409317, 0.16240841, 0.1833482,
                    0.20376449, 0.22367038,
                    0.21807862, 0.21262665, 0.20731099, 0.20212821,
                    0.19707501, 0.19214813,
                    0.18734443, 0.18266082, 0.1780943, 0.17364194,
                    0.16930089, 0.16506837,
                    0.16094166, 0.15691812, 0.15299517, 0.14917029,

                    0.14544103, 0.141805,
                    0.13825988, 0.13480338, 0.1314333, 0.12814746,
                    0.12494378, 0.12182018,
                    0.11877468, 0.11580531, 0.11291018, 0.11008743,
                    0.10733524, 0.10465186,
                    0.10203556, 0.09948467, 0.09699756, 0.09457262,
                    0.0922083, 0.08990309,
                    0.08765552, 0.08546413, 0.08332753, 0.08124434,
                    0.07921323, 0.0772329,
                    0.07530208, 0.07341952, 0.07158404, 0.06979444,
                    0.06804957, 0.06634833,
                    0.06468963, 0.06307239, 0.06149558, 0.05995819,
                    0.05845923, 0.05699775,
                    0.05557281, 0.05418349, 0.0528289, 0.05150818,
                    0.05022047, 0.04896496,
                    0.04774084, 0.04654732, 0.04538363, 0.04424904,
                    0.04314282, 0.04206425,
                    0.04101264, 0.03998732, 0.03898764, 0.03801295,
                    0.03706263, 0.03613606,
                    0.03523266, 0.03435184, 0.03349305, 0.03265572,
                    0.03183933, 0.03104334,
                    0.03026726, 0.02951058, 0.02877281, 0.02805349,
                    0.02735216, 0.02666835,
                    0.02600164, 0.0253516, 0.02471781, 0.02409987,
                    0.02349737, 0.02290994,
                    0.02233719, 0.02177876, 0.02123429, 0.02070343,
                    0.02018585, 0.0196812,
                    0.01918917, 0.01870944, 0.0182417, 0.01778566,
                    0.01734102, 0.0169075,
                    0.01648481, 0.01607269, 0.01567087, 0.0152791,
                    0.01489712, 0.01452469,
                    0.01416158, 0.01380754]]
        res_low = np.array(np.transpose(res_low))
        res_high = [[0., 0., 0., 0., 0., 0., 0.,
                     0., 0., 0., 0., 0., 0., 0.,
                     0., 0., 0., 0, 0., 0., 0.,
                     0., 0., 0., 0., 0., 0., 0.,
                     0., 0., 0.975, 0.92685938, 0.88109569, 0.83759159,
                     0.79623551, 0.75692138, 0.71954839, 0.68402069,
                     0.65024716, 0.61814121,
                     -0.38737951, -0.36825265, -0.35007017, -0.33278546,
                     -0.31635418, -0.30073419,
                     -0.28588544, -0.27176985, -0.25835121, -0.24559512,

                     -0.23346886, -0.22194133,
                     -0.21098298, -0.2005657, -0.19066277, -0.18124879,
                     -0.17229963, -0.16379234,
                     -0.15570509, -0.14801715, -0.14070881, -0.13376131,
                     -0.12715684, -0.12087847,
                     -0.1149101, -0.10923641, -0.10384287, -0.09871562,
                     -0.09384154, -0.08920811,
                     -0.08480346, -0.08061629, -0.07663586, -0.07285197,
                     -0.0692549, -0.06583544,
                     -0.06258482, -0.05949469, -0.05655714, -0.05376463,
                     -0.05111, -0.04858645,
                     -0.04618749, -0.04390698, -0.04173908, -0.03967821,
                     -0.0377191, -0.03585672,
                     -0.03408629, -0.03240328, -0.03080337, -0.02928245,
                     -0.02783663, -0.0264622,
                     -0.02515563, -0.02391357, -0.02273284, -0.0216104,
                     -0.02054339, -0.01952906,
                     -0.01856481, -0.01764817, -0.01677679, -0.01594844,
                     -0.01516099, -0.01441241,
                     -0.0137008, -0.01302432, -0.01238125, -0.01176992,
                     -0.01118878, -0.01063634,
                     -0.01011117, -0.00961193, -0.00913734, -0.00868618,
                     -0.0082573, -0.0078496,
                     -0.00746202, -0.00709359, -0.00674334, -0.00641039,
                     -0.00609388, -0.00579299,
                     -0.00550696, -0.00523506, -0.00497657, -0.00473086,
                     -0.00449727, -0.00427522,
                     -0.00406413, -0.00386346, -0.0036727, -0.00349136,
                     -0.00331898, -0.0031551,
                     -0.00299932, -0.00285123, -0.00271045, -0.00257662,
                     -0.0024494, -0.00232846,
                     -0.00221349, -0.0021042, -0.00200031, -0.00190154,
                     -0.00180765, -0.0017184,
                     -0.00163355, -0.0015529]]
        res_high = np.array(np.transpose(res_high))
        res_high2 = [[0.00000000e+00, 0.00000000e+00,
                      0.00000000e+00, 0.00000000e+00,
                      0.00000000e+00, 0.00000000e+00,
                      0.00000000e+00, 0.00000000e+00,
                      0.00000000e+00, 0.00000000e+00,
                      0.00000000e+00, 0.00000000e+00,
                      0.00000000e+00, 0.00000000e+00,
                      0.00000000e+00, 0.00000000e+00,
                      0.00000000e+00, 0.00000000e+00,
                      0.00000000e+00, 0.00000000e+00,
                      0.00000000e+00, 0.00000000e+00,
                      0.00000000e+00, 0.00000000e+00,
                      0.00000000e+00, 0.00000000e+00,
                      0.00000000e+00, 0.00000000e+00,
                      0.00000000e+00, 0.00000000e+00,
                      9.26859375e-01, 8.57924209e-01,
                      7.92972004e-01, 7.31791619e-01,
                      6.74182700e-01, 6.19955140e-01,
                      5.68928559e-01, 5.20931824e-01,
                      4.75802575e-01, 4.33386788e-01,
                      -5.33321018e-01, -5.01805518e-01,
                      -4.71975665e-01, -4.43744992e-01,
                      -4.17031379e-01, -3.91756844e-01,
                      -3.67847330e-01, -3.45232510e-01,
                      -3.23845607e-01, -3.03623208e-01,
                      -2.84505102e-01, -2.66434121e-01,
                      -2.49355984e-01, -2.33219153e-01,
                      -2.17974700e-01, -2.03576173e-01,
                      -1.89979475e-01, -1.77142741e-01,
                      -1.65026234e-01, -1.53592231e-01,
                      -1.42804928e-01, -1.32630340e-01,
                      -1.23036213e-01, -1.13991933e-01,
                      -1.05468448e-01, -9.74381891e-02,
                      -8.98749929e-02, -8.27540341e-02,
                      -7.60517572e-02, -6.97458127e-02,
                      -6.38149963e-02, -5.82391920e-02,
                      -5.29993165e-02, -4.80772677e-02,
                      -4.34558752e-02, -3.91188535e-02,
                      -3.50507569e-02, -3.12369376e-02,
                      -2.76635054e-02, -2.43172891e-02,
                      -2.11858004e-02, -1.82571997e-02,
                      -1.55202623e-02, -1.29643485e-02,
                      -1.05793729e-02, -8.35577700e-03,
                      -6.28450214e-03, -4.35696418e-03,
                      -2.56502943e-03, -9.00991702e-04,
                      6.42449431e-04, 2.07220929e-03,
                      3.39483774e-03,  4.61653781e-03,
                      5.74318344e-03, 6.78033626e-03,
                      7.73326160e-03,  8.60694363e-03,
                      9.40609983e-03, 1.01351946e-02,
                      1.07984523e-02,  1.13998695e-02,
                      1.19432270e-02, 1.24321006e-02,
                      1.28698718e-02,  1.32597379e-02,
                      1.36047214e-02, 1.39076793e-02,
                      1.41713114e-02,  1.43981685e-02,
                      1.45906605e-02, 1.47510631e-02,
                      1.48815254e-02,  1.49840763e-02,
                      1.50606305e-02, 1.51129951e-02,
                      1.51428745e-02,  1.51518766e-02,
                      1.51415172e-02, 1.51132251e-02,
                      1.50683470e-02,  1.50081513e-02,
                      1.49338326e-02, 1.48465157e-02,
                      1.47472591e-02,  1.46370585e-02,
                      1.45168504e-02, 1.43875152e-02,
                      1.42498801e-02,  1.41047219e-02,
                      1.39527703e-02, 1.37947095e-02,
                      1.36311815e-02,  1.34627881e-02,
                      1.32900929e-02, 1.31136238e-02,
                      1.29338747e-02,  1.27513072e-02,
                      1.25663530e-02, 1.23794148e-02,
                      1.21908686e-02,  1.20010647e-02,
                      1.18103293e-02, 1.16189661e-02,
                      1.14272571e-02,  1.12354643e-02,
                      1.10438306e-02, 1.08525808e-02,
                      1.06619231e-02,  1.04720493e-02]]
        res_high2 = np.array(np.transpose(res_high2))

        step = np.zeros((150))
        step[30:40] = 1
        hlow = np.zeros((150, 1))
        hhigh = np.zeros((150, 1))
        aclow = np.zeros((150, 1))
        achigh = np.zeros((150, 1))
        achigh2 = np.zeros((150, 1))
        for i in range(150):
            self.inM.Input[0, 0] = step[i]
            self.lp.update()
            aclow[i] = self.lp.Input[0, 0]
            # plt.scatter(i, self.lp.Input[0, 0], c='r')
            self.hp.update()
            achigh[i] = self.hp.Input[0, 0]
            # plt.scatter(i, self.hp.Input[0, 0], c='b')
            self.hp2.update()
            achigh2[i] = self.hp2.Input[0, 0]
            # plt.scatter(i, self.hp2.Input[0, 0], c='g')
            hlow[i] = ((1 / 420) / self.tau) * \
                np.exp(-((i - 30) / 1490) / self.tau)
            hhigh[i] = step[i] - ((1 / 80) / self.tau) * \
                np.exp(-((i - 30) / 800) / self.tau)
        # print("achigh2",np.transpose(achigh2))
        # plt.plot(range(150), step)
        # plt.plot( hlow[0:110], c='r')
        # plt.plot( hhigh[30:150], c='b')
        # plt.plot(aclow[40:150,0], c='r')
        # plt.plot(hlow[0:110,0],c='b')
        # plt.show()
        # assert np.all(np.isclose(aclow[40:150, 0], hlow[0:110]))
        # assert np.all(np.isclose(achigh[30:150, 0], hhigh[30:150]))

        assert np.all(np.isclose(res_low, aclow))
        assert np.all(np.isclose(achigh, res_high))
        assert np.all(np.isclose(achigh2, res_high2))


if __name__ == '__main__':
    unittest.main()
