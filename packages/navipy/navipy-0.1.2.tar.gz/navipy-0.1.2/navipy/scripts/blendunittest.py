"""

"""
import unittest
import sys
import argparse
import pkg_resources
import tempfile
import os
import inspect


def parser_blendunittest():
    # Create command line options
    parser = argparse.ArgumentParser()
    arghelp = 'Path to the environment (.blend) in which your agent lives'
    defaultworld = pkg_resources.resource_filename(
        'navipy', 'resources/twocylinders_world.blend')
    parser.add_argument('--blender-world',
                        type=str,
                        default=defaultworld,
                        help=arghelp)
    arghelp = 'Path to start searching for blendtest*.py'
    parser.add_argument('--start-dir',
                        type=str,
                        default='navipy',
                        help=arghelp)
    arghelp = 'Set pattern to look for in unittest (default: blendtest*.py)'
    parser.add_argument('--pattern',
                        type=str,
                        default='blendtest*.py',
                        help=arghelp)
    arghelp = 'Command to run blender\n'
    arghelp += 'If not provided, the script will try to find the command'
    arghelp += " by using: shutil.which('blender')"
    parser.add_argument('--blender-command',
                        type=str,
                        default=None,
                        help=arghelp)

    arghelp = 'To display some stuff \n'
    arghelp += ' * -v print command \n'
    arghelp += ' * -vv print also script'
    parser.add_argument('-v', '--verbose',
                        action='count',
                        default=0,
                        help=arghelp)

    return parser


def run(start_dir, pattern):
    suite = unittest.defaultTestLoader.discover(start_dir=start_dir,
                                                pattern=pattern)
    success = unittest.TextTestRunner().run(suite).wasSuccessful()
    print(success)
    if not success:
        raise Exception('Tests Failed')


def main():
    # encoding for temporary file
    encoding = 'utf-8'

    # Fetch arguments
    args = parser_blendunittest().parse_args()

    # Create tempfile with testing code and then call blendnavipy
    header = '# Generated by {}\n'.format(sys.argv[0])
    with tempfile.NamedTemporaryFile() as tfile:
        # Start of file
        tfile.write(header.encode(encoding))
        tfile.write('import unittest \n'.encode(encoding))
        for line in inspect.getsourcelines(run)[0]:
            tfile.write(line.encode(encoding))
        tfile.write('\n\n'.encode(encoding))
        tfile.write('try:\n'.encode(encoding))
        tfile.write('     run("{}","{}")\n'.format(
            args.start_dir, args.pattern).encode(encoding))
        tfile.write('     sys.exit(0)\n'.encode(encoding))
        tfile.write('except Exception:\n'.encode(encoding))
        tfile.write('     sys.exit(1)\n'.encode(encoding))
        tfile.seek(0)

        command = 'blendnavipy --background --blender-world {}'
        command += ' --python-script {}'
        command = command.format(args.blender_world, tfile.name)
        if args.blender_command is not None:
            command += ' --blender-command {}'.format(args.blender_command)
        for _ in range(args.verbose):
            command += ' -v'
        os.system(command)


if __name__ == "__main__":
    # execute only if run as a script
    main()
