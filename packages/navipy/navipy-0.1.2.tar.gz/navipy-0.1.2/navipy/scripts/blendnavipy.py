"""
Run a script within blender
"""
import os
import sys
import shutil
import inspect
import tempfile
import argparse
from platform import system
from distutils.spawn import find_executable


def activate_virtualenv(venv_path):
    """ activate venv

    Blender comes with its own python installation. Thus, we need to \
    tell blender to use our virtualenv where the navigation toolbox \
    is installed.
    """
    with open(venv_path, 'r') as f:
        exec(f.read(), dict(__file__=venv_path))


def append_path(path_navipy):
    """ insert path

    Blender comes with its own python installation. Thus, we need to \
    tell blender where to look for navipy
    """
    for cpath in path_navipy:
        sys.path.insert(0, cpath)


def blender_version(pyversion):
    """ check version

    Blender comes with its own version of python, and should be
    match the one used by navipy
    """
    blendpyversion = sys.version_info[:3]
    if blendpyversion != pyversion:
        errormsg = 'Blender comes with its own version of python'
        errormsg += ' (here: {}). To run without hard to debug issues, '
        errormsg += ' the python version used by navipy (here {}) and '
        errormsg += 'the python version used by blender should match'
        errormsg = errormsg.format(blendpyversion, pyversion)
        raise NameError(errormsg)


def parser_blendnavipy():
    # Create command line options
    parser = argparse.ArgumentParser()
    arghelp = 'Path to the environment (.blend) in which your agent lives'
    parser.add_argument('--blender-world',
                        type=str,
                        default='',
                        help=arghelp)
    arghelp = 'Path to your python script to be run in blender'
    parser.add_argument('--python-script',
                        type=str,
                        default=None,
                        help=arghelp)
    arghelp = 'Command to run blender\n'
    arghelp += 'If not provided, the script will try to find the command'
    arghelp += " by using: shutil.which('blender')"
    parser.add_argument('--blender-command',
                        type=str,
                        default=None,
                        help=arghelp)

    arghelp = 'To display some stuff \n'
    arghelp += ' * -v print command \n'
    arghelp += ' * -vv print also script'
    parser.add_argument('-v', '--verbose',
                        action='count',
                        default=0,
                        help=arghelp)

    arghelp = 'To run the script in the background'
    parser.add_argument('--background',
                        action='count',
                        default=0,
                        help=arghelp)

    arghelp = 'To ignore the autocheck of python version'
    arghelp += 'and blender'
    parser.add_argument('--ignorepycheck',
                        default=0,
                        help=arghelp,
                        action='count')
    return parser


def main():
    # Find the name of the virtualenv, so that we can activate
    # it in blender
    venv_path = sys.base_prefix
    venv_path = os.path.join(venv_path, 'bin', 'activate_this.py')
    if os.path.exists(venv_path):
        # Runnin in virtualenv
        syspath = None
    else:
        # Find path packages
        syspath = sys.path
        venv_path = None

    # Find python version to be checked agains blender python version
    pyver = sys.version_info[:3]

    # encoding for temporary file
    encoding = 'utf-8'

    args = parser_blendnavipy().parse_args()
    if args.blender_command is None:
        if system() == 'Windows':
            args.blender_command = find_executable("blender")
        else:
            # Find blender command to do a system call
            args.blender_command = shutil.which('blender')
    if args.blender_command is None:
        raise NameError('Blender executable could not be found. ' +
                        'Please specify the full path to it')
    python_script = args.python_script

    header = '""" Script generated by {}"""\n'.format(sys.argv[0])
    with tempfile.NamedTemporaryFile() as tfile:
        # Start of file
        tfile.write(header.encode(encoding))
        # Check blender version
        tfile.write('# check blender version\n'.encode(encoding))
        tfile.write('import sys \n'.encode(encoding))
        tfile.write('import os \n'.encode(encoding))
        if args.ignorepycheck == 0:
            for line in inspect.getsourcelines(blender_version)[0]:
                tfile.write(line.encode(encoding))
            tfile.write('\n\n'.encode(encoding))
            line = 'blender_version({})\n'.format(pyver)
            tfile.write(line.encode(encoding))
        # Load venv
        if venv_path is not None:
            tfile.write(
                '# activate virtualenv within blender\n'.encode(encoding))
            for line in inspect.getsourcelines(activate_virtualenv)[0]:
                tfile.write(line.encode(encoding))
            tfile.write('\n\n'.encode(encoding))
            line = 'activate_virtualenv(\"{}\")\n'.format(venv_path)
            tfile.write(line.encode(encoding))
        elif syspath is not None:
            tfile.write(
                '# add navipy path within blender\n'.encode(encoding))
            for line in inspect.getsourcelines(append_path)[0]:
                tfile.write(line.encode(encoding))
            line = 'append_path({})\n'.format(str(syspath))
            tfile.write(line.encode(encoding))
        else:
            raise NameError('The path to navipy could not be found')
        # Configure matplotlib to use agg
        # because import tkinter fail
        tfile.write('# Configure matplotlib to use agg\n'.encode(encoding))
        tfile.write('import matplotlib\n'.encode(encoding))
        tfile.write("matplotlib.use('agg')\n".encode(encoding))

        tfile.write('# run simulation\n'.encode(encoding))
        with open(python_script) as infile:
            for line in infile:
                tfile.write(line.encode(encoding))
        tfile.write('print("I am done")\n'.encode(encoding))
        tfile.seek(0)
        # End of file
        if args.verbose > 1:
            print('Script to be run:')
            print('=================')
            print(tfile.read().decode(encoding))
            tfile.seek(0)
        command = '{} {} '
        if args.background:
            command += '--background '
        command += '--python {}'
        command = command.format(
            args.blender_command,
            args.blender_world,
            tfile.name)
        if args.verbose > 0:
            print('Run blender with the following command')
            print('======================================')
            print('>>> ' + command)
        os.system(command)


if __name__ == "__main__":
    # execute only if run as a script
    main()
