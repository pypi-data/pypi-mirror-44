"""ObserveIT REST API Client authenticated with username and password"""

import calendar
from datetime import datetime
import logging
try:
    # Python 3
    import urllib.parse as urllib_parse
except:
    # Python 2
    import urllib as urllib_parse
import os
from string import Template
import time
import traceback
from oauthlib.oauth2 import BackendApplicationClient, TokenExpiredError
import requests
from requests.auth import HTTPBasicAuth
from requests_oauthlib import OAuth2Session
from observeit_base_client import ObserveITBase
LOG = logging.getLogger(__name__)


class ObserveITLoginClient(ObserveITBase):
    def __init__(self, host, username, password, api_version="v2", verify=True, cafile=None, connect_timeout=None, application_server=None):
        super(ObserveITBase, self)(host, api_version=api_version, verify=verify, cafile=cafile, connect_timeout=connect_timeout)
        self.username = username
        self.password = password
        self.application_server = application_server
    # end __init__

    def connect(self):
        """Establish authenticated session to ObserveIT REST API"""
        LOG.info("Connecting to %s", self.host)
        if not self.host.startswith("https://"):
            LOG.warn("Connecting with Insecure Transport Protocol! HTTPS Strongly Encouraged!")
            os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'

            auth_url = "%s/%s/apis/auth/logins" % (self.host, self.api_version)
            session = requests.session()
            LOG.debug("POST login info to %s", auth_url)
            credentials = {
                "username": self.username,
                "password": self.password
                }
            headers = {
                "Content-Type": "application/json",
                "accept": "application/json"
                }
            session.headers = headers
            session.verify = self.verify
            if self.cafile:
                # Verify SSL connection using this Certificate File. (for self-signed certs)
                observeit.verify = self.cafile
            elif not self.verify:
                session.verify = False
                response = requests.post(url, data=json.dumps(credentials),
                                         headers=headers, verify=verify)
                response.raise_for_status()
            except Exception as e:
                LOG.error("Attempt to connect to ObserveIT Failed")
                LOG.debug(response.text)
                raise
            LOG.debug(json.dumps(response.json(), indent=2))
            token = "Bearer "+ response.json().get("access_token")
            session.headers["Authorization"] = token
            LOG.info("Successfully connected to ObserveIT API.")
            return self.retryable_session(session)
    # end connect

    def create_list(self, list_name, list_type="kind:general", items=None):
        pass

    def add_list_item(self, list_name, item):
        # cache list_name to id mapping
        pass

    def replace_all_list_items(self, list_name, items):
        pass

    def get_list_items(self, list_name):
        pass

    def remove_list_item(self, list_name, item):
        # get and patch the list
        pass

    def start_recording(self, endpoint_name, tag_name, login=None, application_server=None):
        # use the application server passed in, else self.application_server, else fail
        pass

    def stop_recording(self, endpoint_name, login=None, application_server=None):
        # use the application server passed in, else self.application_server, else fail
        pass

    def delete_recording(self, tag_name):
        pass

    def export_session(self, session_id):
        # create a pdf? Dump all images and metadata to a directory?
        # If this works with OAUTH, move to base class
        pass
