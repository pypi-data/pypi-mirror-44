import re
import pickle
import os


# A custom exception for invalid Length of input
class LengthError(Exception):
    pass


postcodes = []


# Funtion to load the postcodes.pkl file which is generated by reading all the csv files from Dataset
def load_postcodes():
    file_path = (os.path.dirname(__file__)) + "/postcodes.pkl"
    with open(file_path, "rb") as fp:
        data = pickle.load(fp)

        for x in data:
            postcodes.append(x)


# Function basic_validation to match the code with the regex which follows some rules set for the UK postcodes
def basic_validation(code):
    regex = '([Gg][Ii][Rr] 0[Aa]{2})|((([A-Za-z][0-9]{1,2})|(([A-Za-z][A-Ha-hJ-Yj-y][0-9]{1,2})|(([A-Za-z][0-9][A-Za-z])|([A-Za-z][A-Ha-hJ-Yj-y][0-9][A-Za-z]?))))\s?[0-9][A-Za-z]{2})'
    codes_regex = re.compile('{}'.format(regex), re.I)

    return bool(codes_regex.match(code))


# Function deep_validation function to validate the code actually exists or not (boolean) in the dataset above
def deep_validaion(code):
    check_code = format_postcode(code).replace("-", "").replace("_", "").replace("/", "")

    return bool(check_code in postcodes)


# Function format_postcode function to return the formatted code of input code
def format_postcode(code):
    if len(code) < 5 or len(code) > 9:
        raise LengthError('The postcodes length {} is invalid'.format(len(code)))

    code = code.upper()

    outward_code = code[:-3].strip()

    inward_code = code[-3:].strip()

    postcode = outward_code + inward_code

    return postcode
