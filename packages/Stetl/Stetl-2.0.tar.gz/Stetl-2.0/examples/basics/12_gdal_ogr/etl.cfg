# Example of an ETL Chains using GDAL/OGR Python wrappers as input/output

[etl]
# chains = input_gml_file|ogr_feature_to_geojson_feature|output_std,
#          input_gml_file_to_array|ogr_feature_array_to_geojson_collection|tolowercase_filter|output_file,
#          input_gml_file|output_ogr_shapefile,
#          input_gml_file|ogr_feature_to_geojson_feature|geojson_feature_to_ogr_feature|output_ogr_gmlfile

chains = input_geojson_file|geojson_coll_to_ogr_feature_arr|output_ogr_gmlfile,
         input_gml_file_to_array|ogr_feature_array_to_geojson_collection|tolowercase_filter|output_file,
         input_gml_file|output_ogr_shapefile



#
# INPUTS
#

# Any OGR input, like shapefiles etc
[input_gml_file]
class = stetl.inputs.ogrinput.OgrInput
data_source = input/cities.gml
source_format = GML
source_options = {'GDAL_CACHEMAX': '64', 'CPL_DEBUG': 'OFF'}
output_format = ogr_feature
# data_source = PG: host=localhost dbname='bag' user='postgres' password='postgres'
# source_format = PostgreSQL
# sql = select * from adres

# GML into array of OGR Feature objects
[input_gml_file_to_array]
class = stetl.inputs.ogrinput.OgrInput
data_source = input/cities.gml
source_format = GML
output_format = ogr_feature_array

# GeoJSON FeatureCollection from file
[input_geojson_file]
class = stetl.inputs.fileinput.JsonFileInput
file_path = input/cities.geojson
output_format = geojson_collection


#
# FILTERS
#
[ogr_feature_to_geojson_feature]
class = stetl.filters.formatconverter.FormatConverter
input_format = ogr_feature
output_format = geojson_feature

[ogr_feature_array_to_geojson_collection]
class = stetl.filters.formatconverter.FormatConverter
input_format = ogr_feature_array
output_format = geojson_collection

[geojson_coll_to_ogr_feature_arr]
class = stetl.filters.formatconverter.FormatConverter
input_format = geojson_collection
output_format = ogr_feature_array

[tolowercase_filter]
class = tolowerfilter.ToLowerFilter

#
# OUTPUTS
#
[output_std]
class = stetl.outputs.standardoutput.StandardOutput

[output_file]
class = stetl.outputs.fileoutput.FileOutput
file_path = output/cities.geojson

[output_ogr_shapefile]
class = stetl.outputs.ogroutput.OgrOutput
input_format = ogr_feature
dest_data_source = output/cities.shp
overwrite = True
new_layer_name = cities
dest_format = ESRI Shapefile
# dest_options = {'GDAL_CACHEMAX': '64', 'CPL_DEBUG': 'OFF'}

[output_ogr_gmlfile]
class = stetl.outputs.ogroutput.OgrOutput
input_format = ogr_feature_array
dest_data_source = output/cities.gml
overwrite = True
new_layer_name = cities
dest_format = GML

