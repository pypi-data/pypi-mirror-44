# Trivial example of an ETL Chain that just executes a command.

[etl]
chains = input_glob_file|output_ogr2ogr,
         input_glob_file|output_ogr2ogr_lco,
         input_glob_file|output_ogr2ogr_spat,
         input_glob_file|output_ogr2ogr_options,
         input_glob_file|output_ogr2ogr_gfs,
         input_glob_file_temp|output_ogr2ogr_cleanup,
         input_glob_file_temp|output_ogr2ogr_cleanup_gfs,
         input_glob_file_keep|output_ogr2ogr_no_cleanup

[input_glob_file]
class = stetl.inputs.fileinput.GlobFileInput
file_path = tests/data/dummy.gml

[input_glob_file_temp]
class = stetl.inputs.fileinput.GlobFileInput
file_path = tests/data/dummy_temp.gml

[input_glob_file_keep]
class = stetl.inputs.fileinput.GlobFileInput
file_path = tests/data/keep_dummy.gml

[output_ogr2ogr]
class = stetl.outputs.execoutput.Ogr2OgrExecOutput
# destination format: OGR vector format name
dest_format = PostgreSQL
# destination datasource: name of datasource
dest_data_source = "PG:dbname=dummydb host=dummyhost port=dummyport user=dummyuser password=dummypassword active_schema=dummyschema"

[output_ogr2ogr_lco]
class = stetl.outputs.execoutput.Ogr2OgrExecOutput
dest_format = PostgreSQL
dest_data_source = "PG:dbname=dummydb host=dummyhost port=dummyport user=dummyuser password=dummypassword active_schema=dummyschema"
# layer creation options will only be added to ogr2ogr on first run
lco = -lco LAUNDER=YES -lco PRECISION=NO

[output_ogr2ogr_spat]
class = stetl.outputs.execoutput.Ogr2OgrExecOutput
dest_format = PostgreSQL
dest_data_source = "PG:dbname=dummydb host=dummyhost port=dummyport user=dummyuser password=dummypassword active_schema=dummyschema"
# spatial_extent, translates to -spat xmin ymin xmax ymax
spatial_extent = 140000 450000 150000 460000

[output_ogr2ogr_options]
class = stetl.outputs.execoutput.Ogr2OgrExecOutput
dest_format = PostgreSQL
dest_data_source = "PG:dbname=dummydb host=dummyhost port=dummyport user=dummyuser password=dummypassword active_schema=dummyschema"
# miscellaneous ogr2ogr options
options = -append -gt 65536 -fieldTypeToString StringList --config PG_USE_COPY NO

[output_ogr2ogr_gfs]
class = stetl.outputs.execoutput.Ogr2OgrExecOutput
dest_format = PostgreSQL
dest_data_source = "PG:dbname=dummydb host=dummyhost port=dummyport user=dummyuser password=dummypassword active_schema=dummyschema"
# gfs template
gfs_template = tests/data/gfs/top10-funcgebied.gfs

[output_ogr2ogr_cleanup]
class = stetl.outputs.execoutput.Ogr2OgrExecOutput
dest_format = PostgreSQL
dest_data_source = "PG:dbname=dummydb host=dummyhost port=dummyport user=dummyuser password=dummypassword active_schema=dummyschema"
cleanup_input = True

[output_ogr2ogr_cleanup_gfs]
class = stetl.outputs.execoutput.Ogr2OgrExecOutput
dest_format = PostgreSQL
dest_data_source = "PG:dbname=dummydb host=dummyhost port=dummyport user=dummyuser password=dummypassword active_schema=dummyschema"
# gfs template
gfs_template = tests/data/gfs/top10-funcgebied.gfs
cleanup_input = True

[output_ogr2ogr_no_cleanup]
class = stetl.outputs.execoutput.Ogr2OgrExecOutput
# destination format: OGR vector format name
dest_format = PostgreSQL
# destination datasource: name of datasource
dest_data_source = "PG:dbname=dummydb host=dummyhost port=dummyport user=dummyuser password=dummypassword active_schema=dummyschema"
# cleanup input?
cleanup_input = False
