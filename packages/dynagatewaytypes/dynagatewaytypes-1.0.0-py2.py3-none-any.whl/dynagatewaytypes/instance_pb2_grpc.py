# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from dynagatewaytypes import general_types_pb2 as dynagatewaytypes_dot_general__types__pb2
from dynagatewaytypes import instance_pb2 as dynagatewaytypes_dot_instance__pb2


class InstanceServiceStub(object):
  """Instance service.
  Stream results are sent asynchronous.
  Result messages contain a field stream_index which can be used to match the result with the request.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Create = channel.stream_stream(
        '/dynagatewaytypes.InstanceService/Create',
        request_serializer=dynagatewaytypes_dot_instance__pb2.CreateInstanceReq.SerializeToString,
        response_deserializer=dynagatewaytypes_dot_instance__pb2.CreateInstanceRes.FromString,
        )
    self.Count = channel.unary_unary(
        '/dynagatewaytypes.InstanceService/Count',
        request_serializer=dynagatewaytypes_dot_general__types__pb2.EmptyReq.SerializeToString,
        response_deserializer=dynagatewaytypes_dot_general__types__pb2.CountRes.FromString,
        )
    self.Get = channel.stream_stream(
        '/dynagatewaytypes.InstanceService/Get',
        request_serializer=dynagatewaytypes_dot_instance__pb2.GetInstanceReq.SerializeToString,
        response_deserializer=dynagatewaytypes_dot_instance__pb2.GetInstanceRes.FromString,
        )
    self.Update = channel.stream_stream(
        '/dynagatewaytypes.InstanceService/Update',
        request_serializer=dynagatewaytypes_dot_instance__pb2.UpdateInstanceReq.SerializeToString,
        response_deserializer=dynagatewaytypes_dot_general__types__pb2.EmptyStreamRes.FromString,
        )
    self.Delete = channel.stream_stream(
        '/dynagatewaytypes.InstanceService/Delete',
        request_serializer=dynagatewaytypes_dot_instance__pb2.DeleteInstanceReq.SerializeToString,
        response_deserializer=dynagatewaytypes_dot_general__types__pb2.EmptyStreamRes.FromString,
        )


class InstanceServiceServicer(object):
  """Instance service.
  Stream results are sent asynchronous.
  Result messages contain a field stream_index which can be used to match the result with the request.
  """

  def Create(self, request_iterator, context):
    """Creates instances.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Count(self, request, context):
    """Counts all instances.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Get(self, request_iterator, context):
    """Gets instances.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Update(self, request_iterator, context):
    """Updates instances.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Delete(self, request_iterator, context):
    """Deletes instances.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_InstanceServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Create': grpc.stream_stream_rpc_method_handler(
          servicer.Create,
          request_deserializer=dynagatewaytypes_dot_instance__pb2.CreateInstanceReq.FromString,
          response_serializer=dynagatewaytypes_dot_instance__pb2.CreateInstanceRes.SerializeToString,
      ),
      'Count': grpc.unary_unary_rpc_method_handler(
          servicer.Count,
          request_deserializer=dynagatewaytypes_dot_general__types__pb2.EmptyReq.FromString,
          response_serializer=dynagatewaytypes_dot_general__types__pb2.CountRes.SerializeToString,
      ),
      'Get': grpc.stream_stream_rpc_method_handler(
          servicer.Get,
          request_deserializer=dynagatewaytypes_dot_instance__pb2.GetInstanceReq.FromString,
          response_serializer=dynagatewaytypes_dot_instance__pb2.GetInstanceRes.SerializeToString,
      ),
      'Update': grpc.stream_stream_rpc_method_handler(
          servicer.Update,
          request_deserializer=dynagatewaytypes_dot_instance__pb2.UpdateInstanceReq.FromString,
          response_serializer=dynagatewaytypes_dot_general__types__pb2.EmptyStreamRes.SerializeToString,
      ),
      'Delete': grpc.stream_stream_rpc_method_handler(
          servicer.Delete,
          request_deserializer=dynagatewaytypes_dot_instance__pb2.DeleteInstanceReq.FromString,
          response_serializer=dynagatewaytypes_dot_general__types__pb2.EmptyStreamRes.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'dynagatewaytypes.InstanceService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
